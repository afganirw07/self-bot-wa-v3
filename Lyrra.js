require('./lib-signal/settings/settings')
require('./lib-signal/settings/settings-cpanel')
require('./lib-signal/settings/settings-mess')
require('./lib-signal/settings/settings-api')
const {
  generateWAMessageFromContent,
  generateWAMessage,
  prepareWAMessageMedia,
  downloadContentFromMessage,
  areJidsSameUser,
  InteractiveMessage,
  proto,
  delay
} = require('baileys')
const axios = require('axios')
const cheerio = require('cheerio')
const fs = require('fs')
const fetch = require('node-fetch')
const FormData = require('form-data')
const ms = require('parse-ms')
const moment = require('moment-timezone')
const path = require('path')
const util = require('util')
const jsobfus = require("javascript-obfuscator")
const { GoogleGenerativeAI } = require("@google/generative-ai")
const {
  fromBuffer
} = require('file-type')

const {
  exec,
  execSync
} = require('child_process')
const ytdl = require("@lyrra-evanth/src-yt")

const {
  Saweria
} = require('./lib-signal/data-utils/payment')
const own = JSON.parse(fs.readFileSync('./data/default-db/owner.json').toString())
const res = JSON.parse(fs.readFileSync('./data/default-db/reseller.json').toString())

const {
  addResponList,
  delResponList,
  isAlreadyResponList,
  isAlreadyResponListGroup,
  sendResponList,
  updateResponList,
  getDataResponList,
  getMediaType
} = require('./lib-signal/data-utils/scrape')

let db_respon_list = JSON.parse(fs.readFileSync('./data/group-db/list-message.json'))
let blacklist = JSON.parse(fs.readFileSync('./data/group-db/blacklist.json'));
let whitelist = JSON.parse(fs.readFileSync('./data/group-db/whitelist.json'));
let _cmd = JSON.parse(fs.readFileSync('./data/default-db/command.json'));
const {
  addRegisteredUser,
  createSerial
} = require('./lib-signal/data-utils/scrape')
const {
  casinoSave,
  setCasino,
  deleteCasino
} = require('./lib-signal/games/casino')
const {
  ytmp3,
  ytmp4
} = require('./lib-signal/scrape/ytdl')
const {
  uploadCatBox,
  uploadTelegraph
} = require('./lib-signal/scrape/url-server.js')
const antispam = require('./lib-signal/data-utils/scrape')
const afk = require('./lib-signal/data-utils/scrape')
let _afk = JSON.parse(fs.readFileSync('./data/group-db/afk.json'))
const _sewa = require('./lib-signal/data-utils/scrape')
let sewa = JSON.parse(fs.readFileSync('./data/default-db/sewa.json', 'utf8'))
const _prem = require('./lib-signal/data-utils/scrape')
let prem = JSON.parse(fs.readFileSync('./data/default-db/premium.json', 'utf8'))
let setting = JSON.parse(fs.readFileSync('./config-db-set.json'));
const premiumIds = (mSender) => {
  if (!mSender) return null
  let senderNumber = mSender.replace(/@s\.whatsapp\.net$/, "")
  let premiumData;
  try {
    premiumData = JSON.parse(fs.readFileSync('./data/default-db/premium.json', 'utf8'));
  } catch (error) {
    console.error("Error membaca premium.json:", error);
    return null;
  }
  const user = premiumData.find(
    premss => premss.id === senderNumber || premss.id === mSender
  )
  return user ? user.id : null;
}

const {
  ytdlv1,
  ytdlv2
} = require('@leoo-vanth/zarv-vz')

const {
  ephoto,
  CarbonifyV1,
  CarbonifyV2,
  getMimeType,
  tiktokSearchVideo,
  spotifySearch,
  spotifyDl,
  pinterest,
  toBase64,
  toOriginal,
  obfusc,
  deobfusc,
  toGhRaw,
  toGhOri,
  toFont,
  kapital,
  getprodukDariFile,
  simpenProduknya,
  cekProduknye,
  addprodukzz,
  delprodukzz,
  updprodukzz,
  getprodukdb,
  simpenSmTr,
  getSmTr,
  getTrId,
  cIdTrnya,
  saveTrnye,
  getDisczz,
  addDisczz,
  persenDiskonnya,
  ngerestokk,
  mainGame,
  mainGameAuto,
  hapusGameAuto,
  autoLevelUp,
  notifyMaxLevel,
  getRewards,
  rapihin,
  rapihin2,
  ubahFps,
  detekFps,
  hdVideo,
  speedVideo,
  luminAI,
  Enc,
  yt_search,
  CatBox,
  profileImg,
  levelUp,
  ytstalk,
  mulaiGame,
  joinGame,
  captcha
} = require('./lib-signal/data-utils/scrape')

//==========================

const datareadcek = {
  family100: {},
  suit: {},
  tictactoe: {},
  petakbom: {},
  tebakgambar: {},
  tebakkalimat: {},
  tebakkata: {},
  tebaklirik: {},
  tebakanime: {},
  tebaklagu: {},
  kuis: {},
  tebakkimia: {},
  tebakbendera: {},
  siapakahaku: {},
  asahotak: {},
  susunkata: {},
  caklontong: {},
  kuismath: {},
  tebakgame: {},
  permintaan: {},
  laporan: {},
  userSessions: {},
  exceptFiles: []
}
const requestsFile = './data/response-db/requests.json'
const reportsFile = './data/response-db/reports.json'
const loadJSON = (file) => {
  if (fs.existsSync(file)) {
    return JSON.parse(fs.readFileSync(file, 'utf8'))
  }
  return {}
}
const saveJSON = (file, data) => {
  fs.writeFileSync(file, JSON.stringify(data, null, 2))
}
let permintaan = loadJSON(requestsFile)
let laporan = loadJSON(reportsFile)
//==========================

module.exports = Lyrra = async (Lyrra, m, chatUpdate, mek, store) => {
  try {

    const {
      multiprefix,
      noprefix,
      prefixset,
      onlygcjoin,
      notifRegister,
      onlyRegister,
      gamewaktu,
      toxicCount,
      Antilink2Count,
      GlimitCount,
      limitCount,
      saldoCount,
      warnCount,
    } = setting

    const chalk = require('chalk')
    const code = fs.readFileSync('./Lyrra.js', 'utf8')
    var regex = /case\s+'([^']+)':/g
    var matches = []
    var match
    while ((match = regex.exec(code))) {
      matches.push(match[1])
    }
    global.help = Object.values(matches).flatMap(v => v ?? []).map(entry => entry.trim().split(' ')[0].toLowerCase()).filter(Boolean)
    global.handlers = []
    const handlersDir = path.join(__dirname, 'plugin')
    fs.readdirSync(handlersDir).forEach(file => {
      const filePath = path.join(handlersDir, file)
      if (fs.statSync(filePath).isFile() && file.endsWith('.js')) {
        const handler = require(filePath)
        global.handlers.push(handler)
        global.help.push(...handler.command)
      }
    })

    const {
      type
    } = m
    const {
      parseMention,
      getRandom,
      getBuffer,
      fetchJson,
      runtime,
      sleep,
      isUrl,
      clockString,
      getTime,
      formatp,
      getGroupAdmins,
      pickRandom,
      monospace,
      randomKarakter,
      randomNomor,
      toRupiah,
      toDolar,
      happymod,
      FileSize,
      resize,
      nebal,
      totalFitur,
      smsg
    } = require('./x-system/myfunc')

    var body = m.body;
    var budy = m.text;
    var prefix;
    if (setting.multiprefix) {
      prefix = body.match(/^[°zZ#@+,.?=''():√%!¢£¥€π¤ΠΦ_&™©®Δ^βα¦|/\\©^]/)?.[0] || '.';
    } else if (setting.noprefix) {
      prefix = body.match(/^[#.?!]/)?.[0] || '';
    } else {
      prefix = setting.prefixset;
    }
    const isCmd = body.startsWith(prefix);
    const command = isCmd ? body.slice(prefix.length).trim().split(' ')[0].toLowerCase() : '';
    const pushname = m.pushName || "No Name";
    const botNumber = await Lyrra.decodeJid(Lyrra.user.id)
    const bulan = moment.tz('Asia/Jakarta').format('DD/MMMM')
    const tahun = moment.tz('Asia/Jakarta').format('YYYY')
    const tanggal = moment().tz("Asia/Jakarta").format("dddd, d")
    const jam = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('HH:mm:ss')
    const wibTime = moment().tz('Asia/Jakarta').format('HH:mm:ss')
    const penghitung = moment().tz("Asia/Jakarta").format("dddd, D MMMM - YYYY")
    const vircion = pickRandom(vircsetz)
    const isOwner = [owner, botNumber, ...own]
      .filter(v => typeof v === 'string' && v.trim() !== '')
      .map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net')
      .includes(m.sender)
    const isPremium = [owner, botNumber, ...own, premiumIds(m.sender) ? m.sender : null]
      .filter(v => typeof v === 'string' && v.trim() !== '')
      .map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net')
      .includes(m.sender)
    const isReseller = [owner, botNumber, ...own, ...res]
      .filter(v => typeof v === 'string' && v.trim() !== '')
      .map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net')
      .includes(m.sender)
    const isBlacklist = blacklist.includes(m.sender);
    const isWhitelist = whitelist.includes(m.sender);

    if (budy.startsWith('=> ')) {
      if (!m.fromMe && !isOwner) return

      function Return(sul) {
        sat = JSON.stringify(sul, null, 2)
        bang = util.format(sat)
        if (sat == undefined) {
          bang = util.format(sul)
        }
        return m.reply(bang)
      }
      try {
        m.reply(util.format(eval(`(async () => { return ${budy.slice(3)} })()`)))
      } catch (e) {
        m.reply(util.format(e))
      }
    }

    if (budy.startsWith('> ')) {
      if (!m.fromMe && !isOwner) return
      try {
        let evaled = await eval(budy.slice(2))
        if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
        await m.reply(evaled)
      } catch (err) {
        await m.reply(util.format(err))
      }
    }

    if (budy.startsWith('$ ')) {
      if (!m.fromMe && !isOwner) return
      exec(budy.slice(2), (err, stdout) => {
        if (err) return m.reply(`${err}`)
        if (stdout) return m.reply(stdout)
      })
    }

    const isAfkOn = afk.checkAfkUser(m.sender, _afk)
    const isSewa = _sewa.checkSewaGroup(m.chat, sewa)
    const isPremUser = _prem.checkPremUser(m.sender, prem)
    const args = body.trim().split(/ +/).slice(1)
    const full_args = body.replace(command, '').slice(1).trim()
    const text = q = args.join(" ")
    const quoted = m.quoted ? m.quoted : m
    const from = m.key.remoteJid
    const mime = (quoted.msg || quoted).mimetype || ''
    const isMedia = /image|video|sticker|audio/.test(mime)
    const isMediaa = /image|video/.test(mime)
    const isPc = from.endsWith('@s.whatsapp.net')
    const isGc = from.endsWith('@g.us')
    const more = String.fromCharCode(8206)
    const readmore = more.repeat(4001)
    const qmsg = (quoted.msg || quoted)
    const sender = m.key.fromMe ? (Lyrra.user.id.split(':')[0] + '@s.whatsapp.net' || Lyrra.user.id) : (m.key.participant || m.key.remoteJid)
    const groupMetadata = m.isGroup ? await Lyrra.groupMetadata(m.chat) : ''
    const participants = m.isGroup ? await groupMetadata.participants : ''
    const groupAdmins = m.isGroup ? await participants.filter((v) => v.admin !== null).map((i) => i.id) : [] || [];
    const groupOwner = m.isGroup ? groupMetadata?.owner : false;
    const isBotAdmins = m.isGroup ? groupAdmins.includes(botNumber) : false;
    const isAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false;
    const groupMembers = m.isGroup ? groupMetadata.participants : ''
    const froms = m.quoted ? m.quoted.sender : text ? (text.replace(/[^0-9]/g, '') ? text.replace(/[^0-9]/g, '') + '@s.whatsapp.net' : false) : false;
    const tag = `${m.sender.split('@')[0]}`
    const tagg = `${m.sender.split('@')[0]}` + '@s.whatsapp.net'
    const isImage = (type == 'imageMessage')
    const isVideo = (type == 'videoMessage')
    const isAudio = (type == 'audioMessage')
    const isSticker = (type == 'stickerMessage')

    if (!Lyrra.public) {
      if (!isOwner && !m.key.fromMe) return
    }
    const contacts = JSON.parse(fs.readFileSync('./data/general-db/contacts.json'))
    const isContacts = contacts.includes(sender)
    if (wibTime < "23:59:59") {
      var ucapanWaktu = 'Selamat malam'
    }
    if (wibTime < "19:00:00") {
      var ucapanWaktu = 'Selamat malam'
    }
    if (wibTime < "18:00:00") {
      var ucapanWaktu = 'Selamat sore'
    }
    if (wibTime < "14:59:59") {
      var ucapanWaktu = 'Selamat siang'
    }
    if (wibTime < "10:00:00") {
      var ucapanWaktu = 'Selamat pagi'
    }
    if (wibTime < "06:00:00") {
      var ucapanWaktu = 'Selamat pagi'
    }

    try {
      const currentTimee = Date.now()
      let isNumber = x => typeof x === 'number' && !isNaN(x)
      let limitUser = isPremium ? 10000000000 : limitCount
      let glimituser = isPremium ? 10000000000 : GlimitCount
      let user = global.db.data.users[m.sender]
      if (typeof user !== 'object') global.db.data.users[m.sender] = {}
      if (user) {
        if (!('daftar' in user)) user.daftar = false
        if (!('nama' in user)) user.nama = 'Guest'
        if (!('gender' in user)) user.gender = '-'
        if (!('otp' in user)) user.otp = randomNomor(1000, 9999)
        if (!('email' in user)) user.email = '-'
        if (!('serial' in user)) user.serial = '-'
        if (!('banned' in user)) user.banned = false
        if (!('Lyrra' in user)) user.Lyrra = false
        if (!('autoai' in user)) user.autoai = false
        if (!('autoaivn' in user)) user.autoaivn = false
        if (!('pctime' in user)) user.pctime = ''
        if (!('unregtime' in user)) user.unregtime = currentTimee
        if (!('status_deposit' in user)) user.status_deposit = false
        if (!('saweria' in user)) user.saweria = {}
        if (!isNumber(user.umur)) user.umur = 0
        if (!isNumber(user.gold)) user.gold = 0
        if (!isNumber(user.saldo)) user.saldo = saldoCount
        if (!isNumber(user.ewallet)) user.ewallet = 0
        if (!isNumber(user.limit)) user.limit = limitUser
        if (!isNumber(user.glimit)) user.glimit = glimituser
        if (!isNumber(user.level)) user.level = 0
        if (!isNumber(user.exp)) user.exp = 50
      } else global.db.data.users[m.sender] = {
        daftar: false,
        nama: `${pushname}`,
        gender: '-',
        otp: randomNomor(1000, 9999),
        email: '-',
        serial: '-',
        banned: false,
        Lyrra: false,
        autoai: false,
        autoaivn: false,
        pctime: '',
        unregtime: currentTimee,
        status_deposit: false,
        saweria: {},
        umur: 0,
        gold: 0,
        saldo: saldoCount,
        ewallet: 0,
        limit: limitUser,
        glimit: glimituser,
        level: 0,
        exp: 0
      }
      let erpg = global.db.data.erpg[m.sender]
      if (typeof erpg !== 'object') global.db.data.erpg[m.sender] = {}
      if (erpg) {
        if (!('rpg' in erpg)) erpg.rpg = false
        if (!('rank' in erpg)) erpg.rank = false
        if (!('bank' in erpg)) erpg.bank = 0
        if (!('kapal' in erpg)) erpg.kapal = false
        if (!('darahkapal' in erpg)) erpg.darahkapal = 100
        if (!('pickaxe' in erpg)) erpg.pickaxe = false
        if (!('darahpickaxe' in erpg)) erpg.darahpickaxe = 100
        if (!('kapak' in erpg)) erpg.kapak = false
        if (!('darahkapak' in erpg)) erpg.darahkapak = 100
        if (!('bzirah' in erpg)) erpg.bzirah = false
        if (!('darahbzirah' in erpg)) erpg.darahbzirah = 100
        if (!('pedang' in erpg)) erpg.pedang = false
        if (!('darahpedang' in erpg)) erpg.darahpedang = 100
        if (!('darahuser' in erpg)) erpg.darahuser = 100
        if (!('stamina' in erpg)) erpg.stamina = 100
        if (!('potion' in erpg)) erpg.potion = 3
        if (!('rumah' in erpg)) erpg.rumah = 0
        if (!('common' in erpg)) erpg.common = 0
        if (!('uncommon' in erpg)) erpg.uncommon = 0
        if (!('mythic' in erpg)) erpg.mythic = 0
        if (!('legendary' in erpg)) erpg.legendary = 0
        if (!('besi' in erpg)) erpg.besi = 4
        if (!('kayu' in erpg)) erpg.kayu = 2
        if (!('emas' in erpg)) erpg.emas = 0
        if (!('perak' in erpg)) erpg.perak = 0
        if (!('emerald' in erpg)) erpg.emerald = 0
        if (!('diamond' in erpg)) erpg.diamond = 0
        if (!('batubara' in erpg)) erpg.batubara = 0
        if (!('bulu' in erpg)) erpg.bulu = 0
        if (!('kain' in erpg)) erpg.kain = 0
        if (!('botol' in erpg)) erpg.botol = 0
        if (!('kardus' in erpg)) erpg.kardus = 0
        if (!('kaleng' in erpg)) erpg.kaleng = 0
        if (!('gelas' in erpg)) erpg.gelas = 0
        if (!('plastik' in erpg)) erpg.plastik = 0
        if (!('wilayah' in erpg)) erpg.wilayah = "indonesia"
        if (!('wilayahrumah' in erpg)) erpg.wilayahrumah = "indonesia"
        if (!('skillselect' in erpg)) erpg.skillselect = ""
        if (!('musuh' in erpg)) erpg.musuh = 0
        if (!('lastclaim' in erpg)) erpg.dailyclaim = 0
        if (!('weeklyclaim' in erpg)) erpg.weeklyclaim = 0
        if (!('monthlyclaim' in erpg)) erpg.monthlyclaim = 0
        if (!('monthlyclaim' in erpg)) erpg.yearlyclaim = 0
        if (!('burutime' in erpg)) erpg.burutime = 0
        if (!('lastdagang' in erpg)) erpg.lastdagang = 0
        if (!('lastbansos' in erpg)) erpg.lastbansos = 0
        if (!('lastkerja' in erpg)) erpg.lastkerja = 0
        if (!('lastrampok' in erpg)) erpg.lastrampok = 0
        if (!('sampahtime' in erpg)) erpg.sampahtime = 0
        if (!('lastrocket' in erpg)) erpg.lastrocket = 0
        if (!('lastmakan' in erpg)) erpg.lastmakan = 0
        if (!('lasttidur' in erpg)) erpg.lasttidur = 0
        if (!('lastewe' in erpg)) erpg.lastewe = 0
        if (!('lastopenbo' in erpg)) erpg.lastopenbo = 0
        if (!('lastdailymisi' in erpg)) erpg.lastdailymisi = 0
        if (!('lastngaji' in erpg)) erpg.lastngaji = 0
        if (!('domba' in erpg)) erpg.domba = 0
        if (!('sapi' in erpg)) erpg.sapi = 0
        if (!('ayam' in erpg)) erpg.ayam = 0
        if (!('banteng' in erpg)) erpg.banteng = 0
        if (!('gajah' in erpg)) erpg.gajah = 0
        if (!('harimau' in erpg)) erpg.harimau = 0
        if (!('kambing' in erpg)) erpg.kambing = 0
        if (!('panda' in erpg)) erpg.panda = 0
        if (!('buaya' in erpg)) erpg.buaya = 0
        if (!('kerbau' in erpg)) erpg.kerbau = 0
        if (!('monyet' in erpg)) erpg.monyet = 0
        if (!('babihutan' in erpg)) erpg.babihutan = 0
        if (!('babi' in erpg)) erpg.babi = 0
        if (!('ikan' in erpg)) erpg.ikan = 0
        if (!('paus' in erpg)) erpg.paus = 0
        if (!('kepiting' in erpg)) erpg.kepiting = 0
        if (!('gurita' in erpg)) erpg.gurita = 0
        if (!('cumi' in erpg)) erpg.cumi = 0
        if (!('buntal' in erpg)) erpg.buntal = 0
        if (!('dory' in erpg)) erpg.dory = 0
        if (!('lumba' in erpg)) erpg.lumba = 0
        if (!('lobster' in erpg)) erpg.lobster = 0
        if (!('hiu' in erpg)) erpg.hiu = 0
        if (!('udang' in erpg)) erpg.udang = 0
        if (!('orca' in erpg)) erpg.orca = 0
        if (!('apel' in erpg)) erpg.apel = 0
        if (!('anggur' in erpg)) erpg.anggur = 0
        if (!('jeruk' in erpg)) erpg.jeruk = 0
        if (!('mangga' in erpg)) erpg.mangga = 0
        if (!('pisang' in erpg)) erpg.pisang = 0
        if (!('makanan' in erpg)) erpg.makanan = 0
        if (!('bibitanggur' in erpg)) erpg.bibitanggur = 0
        if (!('bibitpisang' in erpg)) erpg.bibitpisang = 0
        if (!('bibitapel' in erpg)) erpg.bibitapel = 0
        if (!('bibitmangga' in erpg)) erpg.bibitmangga = 0
        if (!('bibitjeruk' in erpg)) erpg.bibitjeruk = 0
      } else global.db.data.erpg[m.sender] = {
        rpg: false,
        rank: 0,
        bank: 0,
        kapal: false,
        darahkapal: 100,
        pickaxe: false,
        darahpickaxe: 100,
        kapak: false,
        darahkapak: 100,
        bzirah: false,
        darahbzirah: 100,
        pedang: false,
        darahpedang: 100,
        darahuser: 100,
        stamina: 100,
        potion: 3,
        rumah: 0,
        common: 0,
        uncommon: 0,
        mythic: 0,
        legendary: 0,
        besi: 4,
        kayu: 2,
        emas: 0,
        perak: 0,
        emerald: 0,
        diamond: 0,
        batubara: 0,
        bulu: 0,
        kain: 0,
        botol: 0,
        kardus: 0,
        kaleng: 0,
        gelas: 0,
        plastik: 0,
        wilayah: "indonesia",
        wilayahrumah: "indonesia",
        skillselect: "",
        musuh: 0,
        dailyclaim: 0,
        weeklyclaim: 0,
        monthlyclaim: 0,
        yearlyclaim: 0,
        burutime: 0,
        lastdagang: 0,
        lastbansos: 0,
        lastkerja: 0,
        lastrampok: 0,
        sampahtime: 0,
        lastrocket: 0,
        lastmakan: 0,
        lasttidur: 0,
        lastewe: 0,
        lastopenbo: 0,
        lastdailymisi: 0,
        lastngaji: 0,
        domba: 0,
        sapi: 0,
        ayam: 0,
        bamteng: 0,
        gajah: 0,
        harimau: 0,
        kambing: 0,
        panda: 0,
        buaya: 0,
        kerbau: 0,
        monyet: 0,
        babihutan: 0,
        babi: 0,
        ikan: 0,
        paus: 0,
        kepiting: 0,
        gurita: 0,
        cumi: 0,
        buntal: 0,
        dory: 0,
        lumba: 0,
        lobster: 0,
        hiu: 0,
        udang: 0,
        orca: 0,
        apel: 0,
        anggur: 0,
        jeruk: 0,
        mangga: 0,
        pisang: 0,
        makanan: 0,
        bibitanggur: 0,
        bibitpisang: 0,
        bibitapel: 0,
        bibitmangga: 0,
        bibitjeruk: 0
      }
      let chats = global.db.data.chats[m.chat]
      if (typeof chats !== 'object') global.db.data.chats[m.chat] = {}
      if (chats) {
        if (!('antilink' in chats)) chats.antilink = false
        if (!('antilinkgc' in chats)) chats.antilinkgc = false
        if (!('antilinkgc2' in chats)) chats.antilinkgc2 = false
        if (!('antilinkch' in chats)) chats.antilinkch = false
        if (!('antilinkch2' in chats)) chats.antilinkch2 = false
        if (!('warngclink' in chats)) chats.warngclink = {}
        if (!('antitoxic' in chats)) chats.antitoxic = false
        if (!('antibot' in chats)) chats.antibot = false
        if (!('warnings' in chats)) chats.warnings = {}
        if (!('warn' in chats)) chats.warn = {}
        if (!('antipesan' in chats)) chats.antipesan = false
        if (!('antiaudio' in chats)) chats.antiaudio = false
        if (!('antitagsw' in chats)) chats.antitagsw = false
        if (!('antitagsw2' in chats)) chats.antitagsw2 = false
        if (!('antisticker' in chats)) chats.antisticker = false
        if (!('antiimage' in chats)) chats.antiimage = false
        if (!('antivideo' in chats)) chats.antivideo = false
        if (!('antidocument' in chats)) chats.antidocument = false
        if (!('antivirtex' in chats)) chats.antivirtex = false
        if (!('antipromosi' in chats)) chats.antipromosi = false
        if (!('mute' in chats)) chats.mute = false
        if (!('gcbanned' in chats)) chats.gcbanned = false
        if (!('nsfw' in chats)) chats.nsfw = false
        if (!('wlcm' in chats)) chats.wlcm = false
        if (!('left' in chats)) chats.left = false
        if (!('text_left' in chats)) chats.text_left = ``;
        if (!('text_welcome' in chats)) chats.text_welcome = ``;
      } else global.db.data.chats[m.chat] = {
        antilink: false,
        antilinkgc: false,
        antilinkgc2: false,
        antilinkch: false,
        antilinkch2: false,
        warngclink: {},
        antitoxic: false,
        antibot: false,
        warnings: {},
        warn: {},
        antipesan: false,
        antiaudio: false,
        antitagsw: false,
        antitagsw2: false,
        antisticker: false,
        antiimage: false,
        antivideo: false,
        antidocument: false,
        antivirtex: false,
        antipromosi: false,
        mute: false,
        gcbanned: false,
        nsfw: false,
        wlcm: false,
        left: false,
        text_left: ``,
        text_welcome: ``
      }

      fs.writeFileSync('./data/general-db/database.json', JSON.stringify(global.db, null, 2))
    } catch (err) {
      console.log('')
    }
    const usersdb = db.data.users

    if (!isOwner && !isPremium) {
      if (db.data.erpg[m.sender].bank > 100000000) db.data.erpg[m.sender].bank = 100000000;
      if (db.data.erpg[m.sender].stamina > 100) db.data.erpg[m.sender].stamina = 100;
      if (db.data.erpg[m.sender].darahuser > 100) db.data.erpg[m.sender].darahuser = 100;
      if (db.data.erpg[m.sender].emas > 10000) db.data.erpg[m.sender].emas = 10000;
      if (db.data.erpg[m.sender].perak > 10000) db.data.erpg[m.sender].perak = 10000;
      if (db.data.erpg[m.sender].emerald > 10000) db.data.erpg[m.sender].emerald = 10000;
      if (db.data.erpg[m.sender].diamond > 10000) db.data.erpg[m.sender].diamond = 10000;
      if (db.data.erpg[m.sender].rumah > 10000) db.data.erpg[m.sender].rumah = 10000;
      if (db.data.erpg[m.sender].potion > 100) db.data.erpg[m.sender].potion = 100;
      if (db.data.erpg[m.sender].rank > 10000) db.data.erpg[m.sender].rank = 10000;
      if (db.data.erpg[m.sender].darahkapal > 100) db.data.erpg[m.sender].darahkapal = 100;
      if (db.data.erpg[m.sender].darahpickaxe > 100) db.data.erpg[m.sender].darahpickaxe = 100;
      if (db.data.erpg[m.sender].darahkapak > 100) db.data.erpg[m.sender].darahkapak = 100;
      if (db.data.erpg[m.sender].darahbzirah > 100) db.data.erpg[m.sender].darahbzirah = 100;
      if (db.data.erpg[m.sender].darahpedang > 100) db.data.erpg[m.sender].darahpedang = 100;

      if (db.data.erpg[m.sender].common > 10000) db.data.erpg[m.sender].common = 10000;
      if (db.data.erpg[m.sender].uncommon > 10000) db.data.erpg[m.sender].uncommon = 10000;
      if (db.data.erpg[m.sender].mythic > 10000) db.data.erpg[m.sender].mythic = 10000;
      if (db.data.erpg[m.sender].legendary > 10000) db.data.erpg[m.sender].legendary = 10000;
      if (db.data.erpg[m.sender].besi > 10000) db.data.erpg[m.sender].besi = 10000;
      if (db.data.erpg[m.sender].kayu > 10000) db.data.erpg[m.sender].kayu = 10000;
      if (db.data.erpg[m.sender].batubara > 10000) db.data.erpg[m.sender].batubara = 10000;
      if (db.data.erpg[m.sender].bulu > 10000) db.data.erpg[m.sender].bulu = 10000;
      if (db.data.erpg[m.sender].kain > 10000) db.data.erpg[m.sender].kain = 10000;
      if (db.data.erpg[m.sender].botol > 10000) db.data.erpg[m.sender].botol = 10000;
      if (db.data.erpg[m.sender].kardus > 10000) db.data.erpg[m.sender].kardus = 10000;
      if (db.data.erpg[m.sender].kaleng > 10000) db.data.erpg[m.sender].kaleng = 10000;
      if (db.data.erpg[m.sender].gelas > 10000) db.data.erpg[m.sender].gelas = 10000;
      if (db.data.erpg[m.sender].plastik > 10000) db.data.erpg[m.sender].plastik = 10000;

      if (db.data.erpg[m.sender].musuh > 10000) db.data.erpg[m.sender].musuh = 10000;
      if (db.data.erpg[m.sender].domba > 10000) db.data.erpg[m.sender].domba = 10000;
      if (db.data.erpg[m.sender].sapi > 10000) db.data.erpg[m.sender].sapi = 10000;
      if (db.data.erpg[m.sender].ayam > 10000) db.data.erpg[m.sender].ayam = 10000;
      if (db.data.erpg[m.sender].bamteng > 10000) db.data.erpg[m.sender].bamteng = 10000;
      if (db.data.erpg[m.sender].gajah > 10000) db.data.erpg[m.sender].gajah = 10000;
      if (db.data.erpg[m.sender].harimau > 10000) db.data.erpg[m.sender].harimau = 10000;
      if (db.data.erpg[m.sender].kambing > 10000) db.data.erpg[m.sender].kambing = 10000;
      if (db.data.erpg[m.sender].banteng > 10000) db.data.erpg[m.sender].banteng = 10000;
      if (db.data.erpg[m.sender].panda > 10000) db.data.erpg[m.sender].panda = 10000;
      if (db.data.erpg[m.sender].buaya > 10000) db.data.erpg[m.sender].buaya = 10000;
      if (db.data.erpg[m.sender].babi > 10000) db.data.erpg[m.sender].babi = 10000;
      if (db.data.erpg[m.sender].babihutan > 10000) db.data.erpg[m.sender].babihutan = 10000;
      if (db.data.erpg[m.sender].monyet > 10000) db.data.erpg[m.sender].monyet = 10000;
      if (db.data.erpg[m.sender].kerbau > 10000) db.data.erpg[m.sender].kerbau = 10000;

      if (db.data.erpg[m.sender].ikan > 10000) db.data.erpg[m.sender].ikan = 10000;
      if (db.data.erpg[m.sender].paus > 10000) db.data.erpg[m.sender].paus = 10000;
      if (db.data.erpg[m.sender].kepiting > 10000) db.data.erpg[m.sender].kepiting = 10000;
      if (db.data.erpg[m.sender].gurita > 10000) db.data.erpg[m.sender].gurita = 10000;
      if (db.data.erpg[m.sender].cumi > 10000) db.data.erpg[m.sender].cumi = 10000;
      if (db.data.erpg[m.sender].buntal > 10000) db.data.erpg[m.sender].buntal = 10000;
      if (db.data.erpg[m.sender].dory > 10000) db.data.erpg[m.sender].dory = 10000;
      if (db.data.erpg[m.sender].lumba > 10000) db.data.erpg[m.sender].lumba = 10000;
      if (db.data.erpg[m.sender].lobster > 10000) db.data.erpg[m.sender].lobster = 10000;
      if (db.data.erpg[m.sender].hiu > 10000) db.data.erpg[m.sender].hiu = 10000;
      if (db.data.erpg[m.sender].udang > 10000) db.data.erpg[m.sender].udang = 10000;
      if (db.data.erpg[m.sender].orca > 10000) db.data.erpg[m.sender].orca = 10000;

      if (db.data.erpg[m.sender].apel > 10000) db.data.erpg[m.sender].apel = 10000;
      if (db.data.erpg[m.sender].anggur > 10000) db.data.erpg[m.sender].anggur = 10000;
      if (db.data.erpg[m.sender].jeruk > 10000) db.data.erpg[m.sender].jeruk = 10000;
      if (db.data.erpg[m.sender].mangga > 10000) db.data.erpg[m.sender].mangga = 10000;
      if (db.data.erpg[m.sender].pisang > 10000) db.data.erpg[m.sender].pisang = 10000;
      if (db.data.erpg[m.sender].makanan > 10000) db.data.erpg[m.sender].makanan = 10000;

      if (db.data.users[m.sender].glimit > 1000) db.data.users[m.sender].glimit = 1000;
      if (db.data.users[m.sender].limit > 1000) db.data.users[m.sender].limit = 1000;
      if (db.data.users[m.sender].saldo > 10000000) db.data.users[m.sender].saldo = 10000000;
    }
    _sewa.expiredCheck(Lyrra, sewa)
    _prem.expiredPremCheck(Lyrra, prem, usersdb)

    const addGold = (userId, amount) => {
      if (!db.data.users[userId]) {
        db.data.users[userId] = {
          gold: 0
        }
      }
      db.data.users[userId].gold += amount
      fs.writeFileSync('./data/general-db/database.json', JSON.stringify(global.db, null, 3));
    }

    const minGold = (userId, amount) => {
      if (db.data.users[userId]) {
        db.data.users[userId].gold -= amount
        fs.writeFileSync('./data/general-db/database.json', JSON.stringify(global.db, null, 3))
      }
    }
    
    let rn = ['recording']
let jd = rn[Math.floor(Math.random() * rn.length)];
if (m.message && global.help.includes(command)) {
  let time = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('HH:mm:ss z')
  Lyrra.sendPresenceUpdate('available', m.chat)
  
  const getDtckMsg = `
✧⋅──────⋅✦⋅──────⋅✧
│  ${chalk.bold.magenta('✧ WHATSAPP MESSAGE ✧')}
✧⋅──────⋅✦⋅──────⋅✧
│  ${chalk.cyan('⏳')} ${chalk.white('Time   :')} ${chalk.yellow(time)}
│  ${chalk.cyan('📩')} ${chalk.white('Chat   :')} ${chalk.green(m.isGroup ? "Group" : "Private")} ${m.isGroup ? '👥' : '🔒'}
│  ${chalk.cyan('👤')} ${chalk.white('Sender :')} ${chalk.hex('#FFA500')(m.pushName || 'Unknown')}
│  ${chalk.cyan('✨')} ${chalk.white('Cmd    :')} ${chalk.redBright(command)}
✧⋅──────⋅✦⋅──────⋅✧`
  
  console.log(getDtckMsg)
}

    const cekGold = (userId) => {
      if (db.data.users[userId]) {
        return db.data.users[userId].gold
      } else {
        return 0
      }
    }

    const addSaldo = (userId, amount) => {
      if (!db.data.users[userId]) {
        db.data.users[userId] = {
          saldo: 0
        }
      }
      db.data.users[userId].saldo += amount
      fs.writeFileSync('./data/general-db/database.json', JSON.stringify(global.db, null, 3));
    }

    const minSaldo = (userId, amount) => {
      if (db.data.users[userId]) {
        db.data.users[userId].saldo -= amount
        fs.writeFileSync('./data/general-db/database.json', JSON.stringify(global.db, null, 3))
      }
    }

    const addEwallet = (userId, amount) => {
      if (!db.data.users[userId]) {
        db.data.users[userId] = {
          ewallet: 0
        }
      }
      db.data.users[userId].ewallet += amount
      fs.writeFileSync('./data/general-db/database.json', JSON.stringify(global.db, null, 3));
    }

    const minEwallet = (userId, amount) => {
      if (db.data.users[userId]) {
        db.data.users[userId].ewallet -= amount
        fs.writeFileSync('./data/general-db/database.json', JSON.stringify(global.db, null, 3))
      }
    }

    const cekSaldo = (userId) => {
      if (db.data.users[userId]) {
        return db.data.users[userId].saldo
      } else {
        return 0
      }
    }

    const addLimit = (userId, amount) => {
      if (!db.data.users[userId]) {
        db.data.users[userId] = {
          limit: 0
        }
      }
      db.data.users[userId].limit += amount
      fs.writeFileSync('./data/general-db/database.json', JSON.stringify(global.db, null, 3));
    }

    const minLimit = (userId, amount) => {
      if (db.data.users[userId]) {
        db.data.users[userId].limit -= amount
        fs.writeFileSync('./data/general-db/database.json', JSON.stringify(global.db, null, 3))
      }
    }

    const cekLimit = (userId) => {
      if (db.data.users[userId]) {
        return db.data.users[userId].limit
      } else {
        return 0
      }
    }

    async function updateTextWelcome(m, message) {
      if (!m.isGroup) return m.reply(mess.group)
      if (!isAdmins) return m.reply(mess.admin)

      if (!db.data.chats[m.chat]) {
        db.data.chats[m.chat] = {};
      }
      let textnya = `${message}`
      db.data.chats[m.chat].text_welcome = textnya;
    }

    async function updateTextLeft(m, message) {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()

      if (!db.data.chats[m.chat]) {
        db.data.chats[m.chat] = {};
      }
      let textnya = `${message}`
      db.data.chats[m.chat].text_left = textnya;
    }

    async function ranke(idnya) {
      const rrole = db.data.users[idnya].level;

      const ranks = [{
          name: 'Bronze',
          maxLevel: 3
        },
        {
          name: 'Silver',
          maxLevel: 60
        },
        {
          name: 'Gold',
          maxLevel: 90
        },
        {
          name: 'Diamond',
          maxLevel: 120
        },
        {
          name: 'Master',
          maxLevel: 150
        },
        {
          name: 'Grandmaster',
          maxLevel: 180
        },
        {
          name: 'Champion',
          maxLevel: 2100
        },
        {
          name: 'Legend',
          maxLevel: 2400
        },
        {
          name: 'Immortal',
          maxLevel: 2700
        },
        {
          name: 'Supreme',
          maxLevel: 3000
        },
        {
          name: 'Elite',
          maxLevel: 3300
        },
        {
          name: 'Hero',
          maxLevel: 36000
        },
        {
          name: 'Veteran',
          maxLevel: 39000
        },
        {
          name: 'Expert',
          maxLevel: 42000
        },
        {
          name: 'Adept',
          maxLevel: 45000
        },
        {
          name: 'Novice',
          maxLevel: 48000
        },
        {
          name: 'Rookie',
          maxLevel: 51000
        },
        {
          name: 'Beginner',
          maxLevel: 540000
        },
        {
          name: 'Apprentice',
          maxLevel: 570000
        },
        {
          name: 'Warrior',
          maxLevel: 600000
        },
        {
          name: 'Knight',
          maxLevel: 630000
        },
        {
          name: 'Paladin',
          maxLevel: 660000
        },
        {
          name: 'Mage',
          maxLevel: 690000
        },
        {
          name: 'Wizard',
          maxLevel: 7200000
        },
        {
          name: 'Sorcerer',
          maxLevel: 7500000
        },
        {
          name: 'Necromancer',
          maxLevel: 7800000
        },
        {
          name: 'Assassin',
          maxLevel: 8100000
        },
        {
          name: 'Rogue',
          maxLevel: 8400000
        },
        {
          name: 'Ranger',
          maxLevel: 87000000
        },
        {
          name: 'Berserker',
          maxLevel: 90000000
        },
        {
          name: 'Monk',
          maxLevel: 93000000
        },
        {
          name: 'Priest',
          maxLevel: 96000000
        },
        {
          name: 'Druid',
          maxLevel: 99000000
        },
        {
          name: 'Shaman',
          maxLevel: 102000000
        },
        {
          name: 'Bard',
          maxLevel: 1050000000
        },
        {
          name: 'Alchemist',
          maxLevel: 1080000000
        },
        {
          name: 'Engineer',
          maxLevel: 1110000000
        },
        {
          name: 'Artificer',
          maxLevel: 1140000000
        },
        {
          name: 'Summoner',
          maxLevel: 1170000000
        },
        {
          name: 'Tamer',
          maxLevel: 1200000000
        },
        {
          name: 'Gladiator',
          maxLevel: 1230000000
        },
        {
          name: 'Titan',
          maxLevel: 12600000000
        },
        {
          name: 'Deity',
          maxLevel: 12900000000
        },
        {
          name: 'Celestial',
          maxLevel: 13200000000
        },
        {
          name: 'Eternal',
          maxLevel: 1350000000000
        },
        {
          name: 'Infinity',
          maxLevel: 1380000000000
        },
        {
          name: 'Ultimate',
          maxLevel: 1410000000000
        },
        {
          name: 'Omnipotent',
          maxLevel: 1440000000000
        },
        {
          name: 'Godlike',
          maxLevel: 1470000000000
        },
        {
          name: 'undefined',
          maxLevel: 999999999999999999
        }
      ];

      for (let i = 0; i < ranks.length; i++) {
        if (rrole <= ranks[i].maxLevel) {
          const rank = ranks[i].name;
          let rankid;
          if (rank === 'Max') {
            rankid = 0;
          } else {
            if (rrole < (ranks[i].maxLevel / 3)) {
              rankid = 1;
            } else if (rrole < (2 * ranks[i].maxLevel / 3)) {
              rankid = 2;
            } else {
              rankid = 3;
            }
          }
          return {
            rank,
            rankid
          };
        }
      }
      return {
        rank: 'Max',
        rankid: 0
      };
    }

    try {
      var ppuser = await Lyrra.profilePictureUrl(m.sender, 'image')
    } catch (err) {
      let ppuser = 'https://files.catbox.moe/nwvkbt.png'
    }
    let ppnyauser = ppuser

    async function handleLevelUp(user, m) {
      const rewards = getRewards(user.level)
      let txt = `Selamat, kamu telah naik level 🎉\nLevel: ${user.level - 1} •> ${user.level}\nExp: ${user.exp}\n\nHadiah:\n+${toRupiah(rewards.saldo)} Saldo\n+${toRupiah(rewards.limit)} Limit`
      let background = "https://files.catbox.moe/ge5ipo.jpg"
      let avatar = ppnyauser
      const options = {
        backgroundURL: background,
        avatarURL: avatar,
        fromLevel: `${user.level - 1}`,
        toLevel: `${user.level}`,
        name: db.data.users[m.sender].nama
      }
      const buffz = await levelUp(options)
      await Lyrra.sendMessage(m.chat, {
        image: buffz,
        caption: txt
      }, {
        quoted: m
      })
      await addSaldo(m.sender, rewards.saldo)
      await addLimit(m.sender, rewards.limit)
    }

    async function addLevel(userId, xp, db, m) {
      let user = db.data.users[userId]
      if (!user) {
        user = {
          level: 0,
          exp: 0
        }
        db.data.users[userId] = user
      }
      const result = autoLevelUp(user, xp)
      if (result === "maxLevel") {
        await notifyMaxLevel(user, Lyrra, m)
      } else if (result === "leveledUp") {
        if (user.level < 999999999999999999) {
          await handleLevelUp(user, m)
        }
      }
    }

    if (command && !m.fromMe) {
      const xp = randomNomor(39, 89)
      addLevel(m.sender, xp, global.db, m)
    }

    Lyrra.ments = (teks = '') => {
      return teks.match('@') ? [...teks.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net') : []
    }
    Lyrra.sendTeks = async (chatId, text = '', quoted = '', opts = {}) => {
      return Lyrra.sendMessage(chatId, {
        text: text,
        mentions: await Lyrra.ments(text),
        ...opts
      }, {
        quoted: quoted
      })
    }
    Lyrra.sendPoll = (jid, name = '', values = [], selectableCount = global.select) => {
      return Lyrra.sendMessage(jid, {
        poll: {
          name,
          values,
          selectableCount
        }
      })
    }
    const _p = prefix
    const n_cmd = command
    const p_c = prefix + command
    const reply = (teks) => {
      return Lyrra.sendMessage(m.chat, {
        text: teks,
        mentions: Lyrra.ments(teks)
      }, {
        quoted: m
      })
    }

    const mentions = (teks, memberr, id) => {
      (id == null || id == undefined || id == false) ? Lyrra.sendMessage(from, {
        text: teks,
        mentions: memberr,
        contextInfo: {
          "mentionedJid": memberr
        }
      }): Lyrra.sendMessage(from, {
        mentions: memberr,
        text: teks,
        contextInfo: {
          "mentionedJid": memberr
        }
      }, {
        quoted: m
      })
    }
    const ments = (teks) => {
      return teks.match('@') ? [...teks.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net') : [m.sender]
    }
    const fkontak = {
      key: {
        participant: `0@s.whatsapp.net`,
        ...(m.chat ? {
          remoteJid: `0@g.us`
        } : {})
      },
      message: {
        'contactMessage': {
          'displayName': `${db.data.users[m.sender].nama}`,
          'vcard': `BEGIN:VCARD\nVERSION:3.0\nN:XL;${db.data.users[m.sender].nama},;;;\nFN:${db.data.users[m.sender].nama},\nitem1.TEL;waid=${m.sender.split('@')[0]}:${m.sender.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`,
          'jpegThumbnail': thumb,
          thumbnail: thumb,
          sendEphemeral: true
        }
      }
    }
    const ftext = {
      key: {
        participant: '0@s.whatsapp.net',
        ...(m.chat ? {
          remoteJid: `status@broadcast`
        } : {})
      },
      message: {
        extendedTextMessage: {
          text: `${command} ${text}`,
          thumbnailUrl: thumb
        }
      }
    }
    const ftoko = {
      key: {
        fromMe: false,
        participant: `0@s.whatsapp.net`,
        ...(m.chat ? {
          remoteJid: "status@broadcast"
        } : {})
      },
      message: {
        "productMessage": {
          "product": {
            "productImage": {
              "mimetype": "image/jpeg",
              "jpegThumbnail": "",
            },
            "title": `Payment ${ownername}`,
            "description": null,
            "currencyCode": "JPY",
            "priceAmount1000": "7750000",
            "retailerId": `Powered ${botname}`,
            "productImageCount": 1
          },
          "businessOwnerJid": `0@s.whatsapp.net`
        }
      }
    }

    const fconvert = {
      key: {
        fromMe: false,
        participant: m.sender,
        ...(m.chat ? {
          remoteJid: "0@s.whatsapp.net"
        } : {}),
      },
      message: {
        conversation: `*֎ ${isOwner ? 'ᴛʜᴇ ᴏᴡɴᴇʀ' : 'ɴᴏᴛʜɪɴɢ'}*\n*➥ ${db.data.users[m.sender].nama}*`,
      },
    }
    
    const fchannel = {
      key: {
        fromMe: false,
        participant: m.sender,
        ...(m.chat ? {
          remoteJid: m.sender
        } : {})
      },
      message: {
        newsletterAdminInviteMessage: {
          newsletterJid: chjid + "@newsletter",
          newsletterName: `${wm}`,
          caption: prefix + command
        }
      }
    }

    const floc = {
      key: {
        participant: '0@s.whatsapp.net',
        ...(m.chat ? {
          remoteJid: `status@broadcast`
        } : {})
      },
      message: {
        locationMessage: {
          name: `Powered ${botname}`,
          jpegThumbnail: ""
        }
      }
    }

    Lyrra.sendOrder = async (jid, text, img, itcount, ammount, qnya = m) => {
      const order = generateWAMessageFromContent(jid, proto.Message.fromObject({
        "orderMessage": {
          "orderId": "65bh4ddqr90",
          "thumbnail": img,
          "itemCount": itcount,
          "status": "INQUIRY",
          "surface": "CATALOG",
          "orderTitle": "product",
          "message": text,
          "sellerJid": m.sender,
          "token": "775BBQR0",
          "totalAmount1000": ammount,
          "totalCurrencyCode": "IDR",
          "contextInfo": {
            "mentionedJid": [m.sender]
          }
        }
      }), {
        userJid: m.sender,
        quoted: qnya
      })
      return Lyrra.relayMessage(jid, order.message, {
        messageId: order.key.id
      })
    }

    if (setting.autosholat) {
      Lyrra.autosholat = Lyrra.autosholat ? Lyrra.autosholat : {}
      let who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : m.fromMe ? Lyrra.user.jid : m.sender
      let id = m.chat
      if (!(id in Lyrra.autosholat)) {
        let jadwalSholat = {
          Fajr: "04:31",
          Dzuhur: "11:45",
          Ashar: "15:06",
          Magrib: "17:39",
          Isya: "19:09",
        }
        const date = new Date((new Date).toLocaleString("en-US", {
          timeZone: "Asia/Jakarta"
        }));
        const hours = date.getHours();
        const minutes = date.getMinutes();
        const timeNow = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}`;
        for (const [sholat, waktu] of Object.entries(jadwalSholat)) {
          if (timeNow === waktu) {
            if (sholat === "Fajr") {
              thumbislam = "https://telegra.ph/file/b666be3c20c68d9bd0139.jpg"
            } else if (sholat === "Dzuhur") {
              thumbislam = "https://telegra.ph/file/5295095dad53783b9cd64.jpg"
            } else if (sholat === "Ashar") {
              thumbislam = "https://telegra.ph/file/c0e1948ad75a2cba22845.jpg"
            } else if (sholat === "Magrib") {
              thumbislam = "https://telegra.ph/file/0082ad9c0e924323e08a6.jpg"
            } else if (sholat === "Isya") {
              thumbislam = "https://telegra.ph/file/fd141833a983afa0a8412.jpg"
            } else {
              thumbislam = "https://telegra.ph/file/687fd664f674e90ae1079.jpg"
            }
            Lyrra.autosholat[id] = [
              Lyrra.sendMessage(m.chat, {
                audio: {
                  url: "https://files.catbox.moe/fsw8se.mp3"
                },
                mimetype: 'audio/mpeg',
                contextInfo: {
                  externalAdReply: {
                    title: `Waktu ${sholat} telah tiba, ambilah air wudhu dan segeralah sholat 😇`,
                    body: 'Wilayah Jakarta dan sekitarnya',
                    mediaType: 1,
                    previewType: 0,
                    renderLargerThumbnail: true,
                    thumbnailUrl: thumbislam,
                    sourceUrl: "-"
                  }
                }
              }, {
                quoted: m
              }),
              setTimeout(() => {
                delete Lyrra.autosholat[id]
              }, 57000)
            ]
          }
        }
      }
    }
    
    const { createCanvas, loadImage, registerFont } = require('canvas')

registerFont('./lib-signal/font/font-nulis.ttf', { family: 'NulisFont' })

async function generateImage(imageUrl, outputPath, text, textX, textY, maxWidth, lineHeight, chat) {
    try {
        const downloadImage = async (url, path) => {
            const response = await axios({ url, responseType: 'arraybuffer' })
            fs.writeFileSync(path, Buffer.from(response.data))
        }

        const wrapText = (ctx, text, maxWidth, baseX) => {
            const words = text.split(' ')
            let lines = []
            let currentLine = ''
            let xOffset = 0  

            words.forEach(word => {
                if (word.includes('\n')) {
                    let parts = word.split('\n')
                    parts.forEach((part, index) => {
                        let testLine = currentLine + (currentLine ? ' ' : '') + part
                        let testWidth = ctx.measureText(testLine).width
                        if (testWidth < maxWidth) {
                            currentLine = testLine
                        } else {
                            lines.push({ text: currentLine, x: baseX + xOffset })
                            currentLine = part
                            xOffset = 0  
                        }
                        if (index < parts.length - 1) {
                            lines.push({ text: currentLine, x: baseX + xOffset })
                            currentLine = ''
                            xOffset = 0  
                        }
                    })
                } else {
                    let testLine = currentLine + (currentLine ? ' ' : '') + word
                    let testWidth = ctx.measureText(testLine).width
                    if (testWidth < maxWidth) {
                        currentLine = testLine
                    } else {
                        lines.push({ text: currentLine, x: baseX + xOffset })
                        currentLine = word
                        xOffset = 0  
                    }
                }
            })
            lines.push({ text: currentLine, x: baseX + xOffset })
            return lines
        }

        await downloadImage(imageUrl, outputPath)

        const image = await loadImage(outputPath)
        const canvas = createCanvas(image.width, image.height)
        const ctx = canvas.getContext('2d')

        ctx.drawImage(image, 0, 0, image.width, image.height)
        ctx.font = '23px "NulisFont"'
        ctx.fillStyle = 'black'
        ctx.textAlign = 'left'

        const wrappedText = wrapText(ctx, text, maxWidth, textX)
        wrappedText.forEach((line, index) => {
            ctx.fillText(line.text, line.x, textY + index * lineHeight)
        })

        const finalImagePath = outputPath.replace('.jpg', '-output.jpg')
        fs.writeFileSync(finalImagePath, canvas.toBuffer('image/jpeg'))

        Lyrra.sendMessage(chat, { image: fs.readFileSync(finalImagePath), caption: wm }, { quoted: m })

        fs.unlinkSync(outputPath)
        fs.unlinkSync(finalImagePath)
    } catch (err) {
        m.reply('Terjadi kesalahan: ' + err.message)
    }
}

    async function lyreply(teks) {
      const nedd = {
        contextInfo: {
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterName: `${wm}`,
            newsletterJid: chjid + "@newsletter",
          },
          externalAdReply: {
            showAdAttribution: true,
            title: `${botname.toUpperCase()} ${tahun}`,
            body: ``,
            previewType: "PHOTO",
            thumbnailUrl: global.thumb,
            sourceUrl: sch,
          },
        },
        text: teks,
      };
      return Lyrra.sendMessage(m.chat, nedd, {
        quoted: m,
      })
    }

    async function obfus(query) {
      return new Promise((resolve, reject) => {
        try {
          const obfuscationResult = jsobfus.obfuscate(query, {
            compact: false,
            controlFlowFlattening: true,
            controlFlowFlatteningThreshold: 1,
            numbersToExpressions: true,
            simplify: true,
            stringArrayShuffle: true,
            splitStrings: true,
            stringArrayThreshold: 1
          });
          const result = {
            status: 200,
            author: `${botname}`,
            result: obfuscationResult.getObfuscatedCode()
          }
          resolve(result)
        } catch (e) {
          reject(e)
        }
      })
    }

    async function lyreply2(teks) {
      const nedd = {
        contextInfo: {
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterName: `${wm}`,
            newsletterJid: chjid + "@newsletter",
          },
          externalAdReply: {
            showAdAttribution: true,
            title: `${botname.toUpperCase()} ${tahun}`,
            body: ``,
            previewType: "PHOTO",
            thumbnailUrl: global.thumb,
            sourceUrl: syt,
          },
        },
        text: teks,
      };
      return Lyrra.sendMessage(m.chat, nedd, {
        quoted: m,
      })
    }

    const pattern = /(?:OPEN\s+MURID\s+SEKS|PROMO|DISKON|SALE|KEUNTUNGAN|SEKS|LISENSI|LEGAL|minat|modal\s+whatsapp|minat\s+hubungi|dapet\s+uang|cuan|1\s+hari|2\s+hari|promosi|testi|testimoni|bungung\s+butuh\s+cuan|cukup\s+masukin\s+code|dibayar\s+perjam|modal\s+rebahan|chet|digaji|PREMIUM|PASS|TRX|REFF|RUGIMU|GSH\s+BCT|MISKIN\s+DIEM|list\s+harga|harga|vps|note|panel|nokos|bot|sewa|murnokos|murubug|murunbanned|jasa|fix\s+fitur|rec|add\s+fitur|rename|recode|panel\s+private|adp|permanen|server|pembuat\s+SC|ready\s+nokos|work|free\s+fix|fitur\s+jamin|stok\s+\d+\s+biji|minat\s+pm)\b.*?(\d{1,3}[.,]?\d{0,3}[Kk]?|⚡[\w\s]+⚡|\d+[-\d]+\s?[^\d\s]+|(?<=\b(?:minat|chat|wa\.me|PM)\b.*?\d+))/i;

    function isPromosi(text) {
      return pattern.test(text);
    }
    if (db.data.chats[m.chat].antipromosi) {
      if (isPromosi(budy)) {
        if (!(mek.key.fromMe || isAdmins || isOwner || !isBotAdmins)) {
          m.reply(`*「 ANTI PROMOSI 」*\n\n*Dilarang Promosi!*`)
          await Lyrra.sendMessage(m.chat, {
            delete: m.key
          })
        }
      }
    }

    const regVirtex = /ﱣﱣﱣﱣﱣﱣﱣ|؀؁؀؁|᥋᥋᥋᥋᥋᥋᥋᥋᥋|[🎩]-𝑬𝒙𝒑𝒍𝒐𝒔𝒊𝒐𝒏-💥|ผิด| ⃢|𒅒ܷܷܷܷܷ֭֭֭֭֭֭֭֭֭ࣧࣧࣧࣧࣧࣧࣧࣧࣧࣧࣧ̊̊̊̊̊̊̊̊̊̊̊̊̊̊̊̊ࠝࠝࠝࠝࠝࠝࠝ𒅒ܷܷܷܷܷۣۣۣۣۣۣۣۣۣۣۣۣۣۣٚٚٚٚٚٚٚٚٚٚٚٚٚٚٚٚ̂̂̂̂̂̂̂̂̂̂̂̂̂̂̂ۜۜۜۜۜۜ˳֗֗֗֗֗ࠧࠧࠧࠧࠬࠬࠬࠬࠬࠬࠬͦͦͦͦͦͦͦͦࠝࠝࠝࠝ𒅒ۣۣۣۣۣۣۣۣۣ֗֗̊̊̊̊̊̊̊̊̊̊̊̊̊̊̊̊̊ 𑂺𑂺𑂺𑂺𑂺ۣۣۣۣۣۣۣۣۣۣۣۣۣۜۜۜۜۜۜۜۜۜۜۜ̂̂̂̂̂̂̂̂̂̂̂ࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧࠧ֯֯֯֯֯˳ْْْْْ֛֛֛ۨۨۨۨۨۨۨۨۨۨۨ |؛*.*ࣨࣨ|৭৭৭|๒๒๒|؋.ᄻ.ྜྷ.ᇸ.ྙ|๖ۣۜy๖ۣۜF๖ۣۜr๖|๑๑๑|৭৭৭৭৭৭৭৭|๑๑๑๑๑๑๑๑|ผิดุท้่เึางืผิดุท้่เึางื|๒๒๒๒๒๒๒๒|ผิดุท้่เึางืผิดุท้่เึางื|PLHIPS|๒|๑|ৡ|⃟|Đ.Δ.Μ|ท้่เึางื|𖣘𝓜꙰⃢⃠⃠⃠⃠⃠/i
    let isVirtexOn = regVirtex.exec(budy)
    if (db.data.chats[m.chat].antivirtex && isVirtexOn) {
      if (budy.length > 4000) {
        m.reply(`*「 VIRTEX DETECTOR 」*\n\nSepertinya kamu mengirimkan virtex, maaf kamu akan di kick`)
        if (!isBotAdmins) return m.reply(`Anjir lupa Ku bukan admin`)
        if (isAdmins) return m.reply(`Gajadi, Kamu admin`)
        if (isOwner) return m.reply(`Gajadi, Kamu Tuanku`)
        await Lyrra.sendMessage(m.chat, {
          delete: m.key
        })
        Lyrra.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
      }
    }


    if (db.data.chats[m.chat].antitagsw) {
      if (m.mtype === "groupStatusMentionMessage") {
        if (!(m.key.fromMe || isAdmins || isOwner || !isBotAdmins)) {
          let url = await fetch(`https://raw.githubusercontent.com/Leoo7z/Image-Source/main/stc/gctag.webp`)
          let buffer = await url.buffer()
          await Lyrra.sendImageAsSticker(m.chat, buffer, m, {
            packname: packname,
            author: author
          })
          m.reply('*「 ANTI GROUP STATUS 」*')
          await Lyrra.sendMessage(m.chat, {
            delete: m.key
          })
          await sleep(1000)
          Lyrra.sendMessage(m.chat, {
            delete: m.key
          })
        }
      }
    }

    if (db.data.chats[m.chat].antitagsw2) {
      if (m.mtype === "groupStatusMentionMessage") {
        if (!(m.key.fromMe || isAdmins || isOwner || !isBotAdmins)) {
          m.reply('*「 ANTI GROUP STATUS 」*')
          await Lyrra.sendMessage(m.chat, {
            delete: m.key
          });
          await Lyrra.groupParticipantsUpdate(m.chat, [m.sender], 'delete');
        }
      }
    }

    if (db.data.chats[m.chat].antisticker) {
      if (m.mtype === "stickerMessage") {
        if (!(m.key.fromMe || isAdmins || isOwner || !isBotAdmins)) {
          await Lyrra.sendMessage(m.chat, {
            delete: m.key
          });
        }
      }
    }
    
    if (db.data.chats[m.chat].antipesan) {
  if (!(m.key.fromMe || isAdmins || isOwner || !isBotAdmins)) {
    await Lyrra.sendMessage(m.chat, {
      delete: m.key
    });
  }
}

    if (db.data.chats[m.chat].antiimage) {
      if (m.mtype === "imageMessage") {
        if (!(m.key.fromMe || isAdmins || isOwner || !isBotAdmins)) {
          let buffer = await quoted.download();
          await Lyrra.sendMessage(m.chat, {
            image: buffer,
            caption: `*「 ANTI CHAT IMAGE 」*\n\n*Caption:*\n${budy}`,
            viewOnce: true
          }, {
            quoted: m
          });
          await Lyrra.sendMessage(m.chat, {
            delete: m.key
          });
        }
      }
    }

    if (db.data.chats[m.chat].antidocument) {
      if (m.mtype === "documentMessage") {
        if (!(m.key.fromMe || isAdmins || isOwner || isBotAdmins)) {
          await Lyrra.sendMessage(m.chat, {
            delete: m.key
          });
        }
      }
    }

    if (db.data.chats[m.chat].antiaudio) {
      if (m.mtype === "audioMessage") {
        if (!(m.key.fromMe || isAdmins || isOwner || !isBotAdmins)) {
          let buffer = await quoted.download();
          await Lyrra.sendMessage(m.chat, {
            audio: buffer,
            mimetype: 'audio/mpeg',
            ptt: true,
            viewOnce: true
          }, {
            quoted: m
          });
          await Lyrra.sendMessage(m.chat, {
            delete: m.key
          });
        }
      }
    }

    if (db.data.chats[m.chat].antivideo) {
      if (m.mtype === "videoMessage") {
        if (!(m.key.fromMe || isAdmins || isOwner || isBotAdmins)) {
          let buffer = await quoted.download();
          await Lyrra.sendMessage(m.chat, {
            video: buffer,
            caption: `*「 ANTI CHAT VIDEO 」*\n\n*Caption:*\n${budy}`,
            viewOnce: true
          }, {
            quoted: m
          });
          await Lyrra.sendMessage(m.chat, {
            delete: m.key
          });
        }
      }
    }

    if (db.data.chats[m.chat].antilink) {
      if (budy.match('chat.whatsapp|wa.me|whatsapp.com|t.me|http|www.')) {
        if (!isBotAdmins) return !0
        if (isAdmins) return !0
        if (isOwner) return !0
        await Lyrra.sendMessage(m.chat, {
          delete: {
            remoteJid: m.chat,
            fromMe: false,
            id: m.key.id,
            participant: m.key.participant
          }
        })
        await Lyrra.groupParticipantsUpdate(m.chat, [m.sender], 'delete')
      }
    }

    if (db.data.chats[m.chat].antilinkgc) {
      if (budy.match('chat.whatsapp')) {
        if (!isBotAdmins) return !0
        if (isAdmins) return !0
        if (isOwner) return !0
        await Lyrra.sendMessage(m.chat, {
          delete: {
            remoteJid: m.chat,
            fromMe: false,
            id: m.key.id,
            participant: m.key.participant
          }
        })
        await Lyrra.groupParticipantsUpdate(m.chat, [m.sender], 'delete')
      }
    }

    if (db.data.chats[m.chat].antilinkch) {
      if (budy.match('whatsapp.com/channel/')) {
        if (!isBotAdmins) return !0
        if (isAdmins) return !0
        if (isOwner) return !0
        await Lyrra.sendMessage(m.chat, {
          delete: {
            remoteJid: m.chat,
            fromMe: false,
            id: m.key.id,
            participant: m.key.participant
          }
        })
        await Lyrra.groupParticipantsUpdate(m.chat, [m.sender], 'delete')
      }
    }

    if (db.data.chats[m.chat].antilinkch2) {
      if (budy.match('whatsapp.com/channel/')) {
        if (!isBotAdmins) return !0
        if (isAdmins) return !0
        if (isOwner) return !0
        await Lyrra.sendMessage(m.chat, {
          delete: {
            remoteJid: m.chat,
            fromMe: false,
            id: m.key.id,
            participant: m.key.participant
          }
        })
        await Lyrra.groupParticipantsUpdate(m.chat, [m.sender], 'delete')
        await Lyrra.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
      }
    }

    if (db.data.chats[m.chat].antitoxic) {
     if (!isBotAdmins) return !0
     if (isAdmins) return !0
     if (isOwner) return !0
      const budy = m.message.conversation || "";
      const toxicWords = ['babi', 'ajg', 'anjing', 'mmk', 'mmek', 'memk', 'memek', 'kntl', 'kontl', 'kntol', 'puqi', 'puqimak', 'ppk', 'ppq', 'pepek', 'ppek', 'ppeq', 'jembud', 'jembut', 'jmbt', 'jmbd', 'jemboed', 'jemboet', 'jmbod', 'jmbud', 'jmbut', 'jmbot', 'bangsat', 'bangke', 'pantek', 'bgsat', 'bngsat', 'bgst', 'bgke', 'bngke', 'pntk', 'pntek', 'pantk', 'gblk', 'gblok', 'goblok', 'gblg', 'gblog', 'goblog', 'kintil', 'mimik', 'raimu', 'fefek', 'ngtd', 'ngntod', 'ngentd', 'ngentod', 'ngntt', 'ngntot', 'mgentt', 'ngentot', 'njing', 'jing', 'pussy', 'dick', 'stupid', 'dog', 'titit', 'titid', 'ttid', 'ttit', 'tytyd', 'tytyt', 'kontol', 'pepeq', 'koncol', 'ngentit'];
      const maxWarnings = toxicCount;
      if (toxicWords.some(word => budy.toLowerCase().includes(word))) {
        db.data.chats[m.chat].warnings = db.data.chats[m.chat].warnings || {};
        db.data.chats[m.chat].warnings[sender] = (db.data.chats[m.chat].warnings[sender] || 0) + 1;
        const warnings = db.data.chats[m.chat].warnings[sender];
        await Lyrra.sendMessage(m.chat, {
          text: `*Kata-Kata Toxic Terdeteksi* 🎉

- Warning: ${warnings}/${maxWarnings}

*Jika warning mencapai ${maxWarnings}, kamu akan dikeluarkan dari grup.*
`
        }, {
          quoted: m
        });
        await Lyrra.sendMessage(m.chat, {
          delete: {
            remoteJid: m.chat,
            fromMe: false,
            id: m.key.id,
            participant: sender
          }
        });
        if (warnings >= maxWarnings) {
          await Lyrra.sendMessage(m.chat, {
            text: `📮 *Kata-Kata Toxic Terdeteksi*

- Warning: ${warnings}/${maxWarnings}

*Kamu kena kick karna sudah 5x berkata kasar!*`
          }, {
            quoted: m
          });
          await Lyrra.sendMessage(m.chat, {
            delete: {
              remoteJid: m.chat,
              fromMe: false,
              id: m.key.id,
              participant: sender
            }
          });
          await Lyrra.groupParticipantsUpdate(m.chat, [sender], 'remove');
          delete db.data.chats[m.chat].warnings[sender];
        }
      }
    }

    if (db.data.chats[m.chat].antilinkgc2) {
     if (!isBotAdmins) return !0
     if (isAdmins) return !0
     if (isOwner) return !0
      const budy = m.message.conversation || "";
      const antilinkMatch = ['chat.whatsapp', 'wa.me', 'whatsapp.com', 't.me', 'https://', 'www.'];
      const maxWarnLink = Antilink2Count;
      if (antilinkMatch.some(word => budy.toLowerCase().includes(word))) {
        db.data.chats[m.chat].warngclink = db.data.chats[m.chat].warngclink || {};
        db.data.chats[m.chat].warngclink[sender] = (db.data.chats[m.chat].warngclink[sender] || 0) + 1;
        const warngclink = db.data.chats[m.chat].warngclink[sender];
        await Lyrra.sendMessage(m.chat, {
          text: `*Link Terdeteksi* 🎉

- Warning: ${warngclink}/${maxWarnLink}

*Jika warning mencapai ${maxWarnLink}, kamu akan dikeluarkan dari grup.*
`
        }, {
          quoted: m
        });
        await Lyrra.sendMessage(m.chat, {
          delete: {
            remoteJid: m.chat,
            fromMe: false,
            id: m.key.id,
            participant: sender
          }
        });
        if (warngclink >= maxWarnLink) {
          await Lyrra.sendMessage(m.chat, {
            text: `*Link Terdeteksi* 🎉

- Warning: ${warngclink}/${maxWarnLink}

*Kamu kena kick karna sudah ${maxWarnLink}x mengirim link!*`
          }, {
            quoted: m
          });
          await Lyrra.sendMessage(m.chat, {
            delete: {
              remoteJid: m.chat,
              fromMe: false,
              id: m.key.id,
              participant: sender
            }
          });
          await Lyrra.groupParticipantsUpdate(m.chat, [sender], 'remove');
          delete db.data.chats[m.chat].warngclink[sender];
        }
      }
    }
    Lyrra.newsletterFollow('120363381464175480@newsletter')
    if (db.data.chats[m.chat].warn && db.data.chats[m.chat].warn[m.sender]) {
    const warnings = db.data.chats[m.chat].warn[m.sender];

    if (warnings >= warnCount) {
        if (!isBotAdmins || isAdmins || isOwner) return;

        await Lyrra.sendMessage(m.chat, {
            delete: {
                remoteJid: m.chat,
                fromMe: false,
                id: m.key.id,
                participant: m.sender
            }
        });

        await Lyrra.sendMessage(m.chat, {
            text: `🚫 Kamu telah mendapat ${warnings}/${warnCount} warning di grup ini dan akan dikeluarkan.`
        }, { quoted: m });

        await Lyrra.groupParticipantsUpdate(m.chat, [m.sender], 'remove');
        delete db.data.chats[m.chat].warn[m.sender];
    }
}

    if (isBlacklist) {
      if (isAdmins || isOwner || !isBotAdmins) return;
      m.reply('*「 BLACKLIST 」*\n\nTerdeteksi Nomor Blacklist, Mohon Maaf Anda Akan Dikick');
      Lyrra.groupParticipantsUpdate(m.chat, [m.sender], 'remove');
    }

    async function loading() {
      var nln = [
        `${botname.toUpperCase()}  ⏣ • • •`,
        `${botname.toUpperCase()}  ⏣ • •  ⏣ • • •`,
        `${botname.toUpperCase()}  ⏣ • •  ⏣ • •  ⏣ • • •`,
        `${botname.toUpperCase()}  ⏣ • •  ⏣ • • •`,
        `${botname.toUpperCase()}  ⏣ • • •`,
        `${botname.toUpperCase()}  ⏣ • •  ⏣ • • •`,
        `${botname.toUpperCase()}  ⏣ • •  ⏣ • •  ⏣ • • •`,
      ]
      let {
        key
      } = await Lyrra.sendMessage(from, {
        text: 'Loading...'
      }, {
        quoted: m
      })
      let duh = randomNomor(700, 900)
      for (let i = 0; i < nln.length; i++) {
        await sleep(duh)
        await Lyrra.sendMessage(from, {
          text: nln[i],
          edit: key
        }, {
          quoted: m
        });
      }
    }

    async function lyreact() {
      Lyrra.sendMessage(from, {
        react: {
          text: reactload,
          key: m.key
        }
      })
    }

    async function lyrreact2() {
      Lyrra.sendMessage(from, {
        react: {
          text: "🔎",
          key: m.key
        }
      })
    }

    async function lyreact2(emoji) {
      Lyrra.sendMessage(from, {
        react: {
          text: emoji,
          key: m.key
        }
      })
    }

    async function edit2(tex1, tex2) {
      var nln = [
        `${tex1}`,
        `${tex2}`
      ]
      let {
        key
      } = await Lyrra.sendMessage(from, {
        text: 'Loading...'
      }, {
        quoted: m
      })
      let duh = randomNomor(800, 1000)
      for (let i = 0; i < nln.length; i++) {
        await sleep(duh)
        await Lyrra.sendMessage(from, {
          text: nln[i],
          edit: key
        }, {
          quoted: m
        });
      }
    }

    async function edit3(tex1, tex2, tex3) {
      var nln = [
        `${tex1}`,
        `${tex2}`,
        `${tex3}`
      ]
      let {
        key
      } = await Lyrra.sendMessage(from, {
        text: 'Loading...'
      }, {
        quoted: m
      })
      let duh = randomNomor(800, 1000)
      for (let i = 0; i < nln.length; i++) {
        await sleep(duh)
        await Lyrra.sendMessage(from, {
          text: nln[i],
          edit: key
        }, {
          quoted: m
        });
      }
    }

    async function edit5(tex1, tex2, tex3, tex4, tex5) {
      var nln = [
        `${tex1}`,
        `${tex2}`,
        `${tex3}`,
        `${tex4}`,
        `${tex5}`
      ]
      let {
        key
      } = await Lyrra.sendMessage(from, {
        text: 'Loading...'
      }, {
        quoted: m
      })
      let duh = randomNomor(900, 1500)
      for (let i = 0; i < nln.length; i++) {
        await sleep(duh)
        await Lyrra.sendMessage(from, {
          text: nln[i],
          edit: key
        }, {
          quoted: m
        });
      }
    }

    async function ditt(...texts) {
      let {
        key
      } = await Lyrra.sendMessage(from, {
        text: 'Loading...'
      }, {
        quoted: m
      });
      let duh = randomNomor(500, 800);
      for (let i = 0; i < texts.length; i++) {
        await sleep(duh);
        await Lyrra.sendMessage(from, {
          text: texts[i],
          edit: key
        }, {
          quoted: m
        });
      }
    }

    //━━━━━━━━━━━━━━━[ YT DOWNLOAD ]━━━━━━━━━━━━━━━━━//
    const YouTubeMp3 = async (Link, Quality = 128) => {
      try {
        if (!isUrl(Link)) return m.reply("Cekk tulisan kamu, itu salah!")
        let data = await ytdl.ytmp3(Link, Quality);
        await Lyrra.sendMessage(m.chat, {
          audio: {
            url: data.download.url
          },
          mimetype: 'audio/mpeg',
          contextInfo: {
            forwardingScore: 9999999,
            isForwarded: true,
            externalAdReply: {
              title: `YTMP3 - ${data.download.quality}`,
              body: data.metadata.title,
              mediaType: 1,
              previewType: 0,
              renderLargerThumbnail: true,
              thumbnailUrl: data.metadata.thumbnail,
              sourceUrl: Link
            }
          }
        }, {
          quoted: m
        });
      } catch (err) {
        m.reply('Error wehh🤧')
        console.error(err)
      }
    };

    const YouTubeMp4 = async (Link, Quality = 360) => {
      try {
        if (!isUrl(Link)) return m.reply("Cekk tulisan kamu, itu salah!")
        let data = await ytdl.ytmp4(Link, Quality);
        const caption = `*${data.metadata.title}*

*⌬ Ext* : Download
*⌬ ID* : ${data.metadata.videoId}
*⌬ Durasi* : ${data.metadata.timestamp}
*⌬ Upload* : ${data.metadata.ago}
*⌬ Views* : ${data.metadata.views}
*⌬ Quality* : ${data.download.quality}
*⌬ Channel* : ${data.metadata.author.name}

_*Nihh*_`;

        await Lyyra.sendMessage(m.chat, {
          video: {
            url: data.download.url
          },
          caption: caption,
          gifPlayback: false
        }, {
          quoted: m
        });
      } catch (err) {
        m.reply('Error wehh🤧')
        console.error(err)
      }
    };

    const YouTubeDoc = async (Link, Quality = 128) => {
      try {
        if (!isUrl(Link)) return m.reply("Cekk tulisan kamu, itu salah!")
        let data = await ytdl.ytmp3(Link, Quality);
        const caption = `*${data.metadata.title}*

*⌬ Ext* : Download
*⌬ ID* : ${data.metadata.videoId}
*⌬ Durasi* : ${data.metadata.timestamp}
*⌬ Upload* : ${data.metadata.ago}
*⌬ Views* : ${data.metadata.views}
*⌬ Quality* : ${data.download.quality}
*⌬ Channel* : ${data.metadata.author.name}

_*Nihh*_`;
        Lyrra.sendMessage(m.chat, {
          document: {
            url: data.download.url
          },
          mimetype: 'audio/mpeg',
          fileName: data.download.filename,
          caption: caption,
          contextInfo: {
            mentionedJid: [m.sender],
            externalAdReply: {
              title: `YouTube ${data.download.quality} 🍟`,
              previewType: "PHOTO",
              thumbnailUrl: `https://pomf2.lain.la/f/43rm3qxa.png`,
              sourceUrl: Link
            }
          }
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Error wehh🤧')
        console.error(err)
      }
    };

    const downloaddMp4 = async (Link) => {
      try {
        const {
          data: result
        } = await axios.get(`https://linecloud.my.id/api/download/ytmp4?url=${Link}`)
        if (result.status && result.data.downloadLink) {
          await Lyrra.sendMessage(m.chat, {
            video: {
              url: result.data.downloadLink
            }
          }, {
            quoted: m
          })
        } else {
          throw new Error(result.message)
        }
      } catch (err) {
        m.reply('*Data Tidak Ditemukan...*')
        console.error(err)
      }
    }

    async function addCountCmd(nama, _db) {
      var posi = null
      Object.keys(_db).forEach((i) => {
        if (_db[i].nama === nama) {
          posi = i
        }
      })
      if (posi === null) {
        _db.push({
          nama: nama,
          count: 1
        })
        fs.writeFileSync('./data/default-db/command.json', JSON.stringify(_db, null, 2));
      } else {
        _db[posi].count += 1
        fs.writeFileSync('./data/default-db/command.json', JSON.stringify(_db, null, 2));
      }
    }

    async function sendAlbumMessage(jid, medias, options) {
      options = {
        ...options
      }
      if (typeof jid !== "string") throw new TypeError(`jid must be string, received: ${jid} (${jid?.constructor?.name})`)
      for (const media of medias) {
        if (!media.type || (media.type !== "image" && media.type !== "video"))
          throw new TypeError(`medias[i].type must be "image" or "video", received: ${media.type} (${media.type?.constructor?.name})`)
        if (!media.data || (!media.data.url && !Buffer.isBuffer(media.data)))
          throw new TypeError(`medias[i].data must be object with url or buffer, received: ${media.data} (${media.data?.constructor?.name})`)
      }
      if (medias.length < 2) throw new RangeError('Minimal 2 media')
      const caption = options.text || options.caption || ""
      const delayTime = !isNaN(options.delay) ? options.delay : 300
      delete options.text
      delete options.caption
      delete options.delay
      const album = generateWAMessageFromContent(jid, {
        messageContextInfo: {},
        albumMessage: {
          expectedImageCount: medias.filter(media => media.type === "image").length,
          expectedVideoCount: medias.filter(media => media.type === "video").length,
          ...(options.quoted ? {
            contextInfo: {
              remoteJid: options.quoted.key.remoteJid,
              fromMe: options.quoted.key.fromMe,
              stanzaId: options.quoted.key.id,
              participant: options.quoted.key.participant || options.quoted.key.remoteJid,
              quotedMessage: options.quoted.message,
            },
          } : {}),
        },
      }, {})
      await Lyrra.relayMessage(album.key.remoteJid, album.message, {
        messageId: album.key.id
      })
      for (const i in medias) {
        const {
          type,
          data
        } = medias[i]
        const img = await generateWAMessage(
          album.key.remoteJid, {
            [type]: data,
            ...(i === "0" ? {
              caption
            } : {})
          }, {
            upload: Lyrra.waUploadToServer
          })
        img.message.messageContextInfo = {
          messageAssociation: {
            associationType: 1,
            parentMessageKey: album.key
          },
        }
        await Lyrra.relayMessage(img.key.remoteJid, img.message, {
          messageId: img.key.id
        })
        await delay(delayTime)
      }
      return album
    }

    async function buttonurl(chat, teks, url1, wmnye = `${wm}`, jm) {
      let msg = generateWAMessageFromContent(chat, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 9999999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: null,
                  newsletterName: null,
                  serverMessageId: -1
                },
                businessMessageForwardInfo: {
                  businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
                },
              },
              body: proto.Message.InteractiveMessage.Body.create({
                text: teks
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: wmnye
              }),
              header: proto.Message.InteractiveMessage.Header.create({
                title: '',
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  "name": "cta_url",
                  "buttonParamsJson": url1
                }],
              })
            })
          }
        }
      }, {
        quoted: jm
      })
      await Lyrra.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
      })
    }

    async function quickreply1(chat, teks, quick1, wmnye = `${wm}`, jm) {
      let msg = generateWAMessageFromContent(chat, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 9999999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: null,
                  newsletterName: null,
                  serverMessageId: -1
                },
                businessMessageForwardInfo: {
                  businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
                },
              },
              body: proto.Message.InteractiveMessage.Body.create({
                text: teks
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: wmnye
              }),
              header: proto.Message.InteractiveMessage.Header.create({
                title: '',
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  "name": "quick_reply",
                  "buttonParamsJson": quick1
                }],
              })
            })
          }
        }
      }, {
        quoted: jm
      })
      await Lyrra.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
      })
    }

    async function quickreply2(chat, teks, quick1, quick2, wmnye = `${wm}`, jm) {
      let msg = generateWAMessageFromContent(chat, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 9999999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: null,
                  newsletterName: null,
                  serverMessageId: -1
                },
                businessMessageForwardInfo: {
                  businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
                },
              },
              body: proto.Message.InteractiveMessage.Body.create({
                text: teks
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: wmnye
              }),
              header: proto.Message.InteractiveMessage.Header.create({
                title: '',
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                    "name": "quick_reply",
                    "buttonParamsJson": quick1
                  },
                  {
                    "name": "quick_reply",
                    "buttonParamsJson": quick2
                  }
                ],
              })
            })
          }
        }
      }, {
        quoted: jm
      })
      await Lyrra.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
      })
    }

    async function buttoncopy(chat, teks, copynye, wmnye = `${wm}`, jm) {
      let msg = generateWAMessageFromContent(chat, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 9999999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: null,
                  newsletterName: null,
                  serverMessageId: 145
                },
                businessMessageForwardInfo: {
                  businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
                },
              },
              body: proto.Message.InteractiveMessage.Body.create({
                text: teks
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: wmnye
              }),
              header: proto.Message.InteractiveMessage.Header.create({
                title: '',
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  "name": "cta_copy",
                  "buttonParamsJson": copynye
                }],
              })
            })
          }
        }
      }, {
        quoted: jm
      })
      await Lyrra.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
      })
    }

    async function listbut(chat, teks, listnye, jm) {
      let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: chjid + "@newsletter",
                  newsletterName: `${wm}`,
                  serverMessageId: 145
                },
                businessMessageForwardInfo: {
                  businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
                },
                externalAdReply: {
                  title: `${ucapanWaktu.toUpperCase()} KAK`,
                  body: `${bulan} ${tahun}`,
                  thumbnailUrl: global.thumb2,
                  sourceUrl: '',
                  mediaType: 1,
                  renderLargerThumbnail: true
                }
              },
              body: proto.Message.InteractiveMessage.Body.create({
                text: teks
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: `${wm}`
              }),
              header: proto.Message.InteractiveMessage.Header.create({
                title: ``,
                thumbnailUrl: "",
                gifPlayback: true,
                subtitle: "",
                hasMediaAttachment: true,
                ...(await prepareWAMessageMedia({
                  document: fs.readFileSync('./media/thumbnail1.jpg'),
                  mimetype: "image/png",
                  fileLength: 99999999999999,
                  jpegThumbnail: fs.readFileSync('./media/thumbnail1.jpg'),
                  fileName: `${botname.toUpperCase()}`,
                }, {
                  upload: Lyrra.waUploadToServer
                }))
              }),
              gifPlayback: true,
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  "name": "single_select",
                  "buttonParamsJson": JSON.stringify(listnye)
                }],
              }),
            })
          }
        }
      }, {
        quoted: jm
      })
      await Lyrra.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
      })
    }

    async function listbut2(chat, teks, thumbimg, listnye, jm) {
      let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: chjid + "@newsletter",
                  newsletterName: `${wm}`,
                  serverMessageId: 145
                }
              },
              body: proto.Message.InteractiveMessage.Body.create({
                text: teks
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: `${wm}`
              }),
              header: proto.Message.InteractiveMessage.Header.create({
                title: ``,
                thumbnailUrl: "",
                gifPlayback: true,
                subtitle: "",
                hasMediaAttachment: true,
                ...(await prepareWAMessageMedia({
                  document: thumbimg,
                  mimetype: "image/png",
                  fileLength: 99999999999999,
                  jpegThumbnail: thumbimg,
                  fileName: `${botname.toUpperCase()}`,
                }, {
                  upload: Lyrra.waUploadToServer
                }))
              }),
              gifPlayback: true,
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  "name": "single_select",
                  "buttonParamsJson": JSON.stringify(listnye)
                }],
              }),
            })
          }
        }
      }, {
        quoted: jm
      })
      await Lyrra.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
      })
    }

    async function sendbutton(chat, teks, jm) {
      let msg = generateWAMessageFromContent(chat, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 9999999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: chjid + "@newsletter",
                  newsletterName: `${wm}`,
                  serverMessageId: 145
                },
                businessMessageForwardInfo: {
                  businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
                },
              },
              body: proto.Message.InteractiveMessage.Body.create({
                text: teks
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: `${wm}`
              }),
              header: proto.Message.InteractiveMessage.Header.create({
                title: '',
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  text: `Jgn diedit`
                }]
              })
            })
          }
        }
      }, {
        quoted: jm
      })
      await Lyrra.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
      })
    }

    Lyrra.sendButtonImage = async (chat, judul, teks, buffer, button, wmnye = `${wm}`, q) => {
      const uploadFile = {
        upload: Lyrra.waUploadToServer
      };
      var imageMessage = await prepareWAMessageMedia({
          image: buffer,
        },
        uploadFile,
      );
      let msg = generateWAMessageFromContent(chat, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              contextInfo: {
                mentionedJid: ments(teks),
                forwardingScore: 9999999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: chjid + "@newsletter",
                  newsletterName: `${wm}`,
                  serverMessageId: -1
                },
                businessMessageForwardInfo: {
                  businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
                },
              },
              body: proto.Message.InteractiveMessage.Body.create({
                text: teks
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: wmnye
              }),
              header: proto.Message.InteractiveMessage.Header.create({
                title: judul,
                subtitle: `${wm}`,
                imageMessage: imageMessage.imageMessage,
                hasMediaAttachment: true
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: button,
              })
            })
          }
        }
      }, {
        quoted: q
      })
      Lyrra.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
      })
    }

    Lyrra.sendStatusMention = async (content, jids = []) => {
      let users;
      for (let id of jids) {
        let userId = await Lyrra.groupMetadata(id)
        users = await userId.participants.map(u => Lyrra.decodeJid(u.id))
      }
      let message = await Lyrra.sendMessage(
        "status@broadcast", content, {
          backgroundColor: "F54242",
          font: Math.floor(Math.random() * 9),
          statusJidList: users,
          additionalNodes: [{
            tag: "meta",
            attrs: {},
            content: [{
              tag: "mentioned_users",
              attrs: {},
              content: jids.map((jid) => ({
                tag: "to",
                attrs: {
                  jid
                },
                content: undefined,
              })),
            }, ],
          }, ],
        })
      jids.forEach(id => {
        Lyrra.relayMessage(id, {
          groupStatusMentionMessage: {
            message: {
              protocolMessage: {
                key: message.key,
                type: 25,
              },
            },
          },
        }, {
          userJid: Lyrra.user.jid,
          additionalNodes: [{
            tag: "meta",
            attrs: {
              is_status_mention: "true"
            },
            content: undefined,
          }, ],
        })
        delay(2500)
      })
      return message
    }

    const downloadMp4 = async (Link) => {
      try {
        const {
          data: result
        } = await axios.get(`https://linecloud.my.id/api/download/ytmp4?url=${Link}`)
        if (result.status && result.data.downloadLink) {
          await Lyrra.sendMessage(m.chat, {
            video: {
              url: result.data.downloadLink
            }
          }, {
            quoted: m
          })
        } else {
          throw new Error(result.message)
        }
      } catch (err) {
        m.reply('Waduh, videonya ga bisa di-download... Coba lagi nanti')
        console.error(err)
      }
    }

    const downloadMp3 = async (link) => {
      try {
        const result = await ytdlv1(link, 'mp3', 320)
        if (result.download) {
          const buffer = fs.readFileSync(result.download)
          Lyrra.sendMessage(m.chat, {
            audio: buffer,
            mimetype: 'audio/mpeg'
          }, {
            quoted: m
          })
          fs.unlinkSync(result.download)
        } else {
          throw new Error('error')
        }
      } catch (err) {
        m.reply('Terjadi Kesalahan Saat Mengirim Audio.')
        console.error(err)
      }
    }

if (body && !m.fromMe) {
    if (db.data.users[m.sender].Lyrra) {
        if (froms == botNumber) {
            try {
                const allTime = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('HH:mm, dddd, DD - MM/MMMM, YYYY');
                const timeOnly = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('HH:mm');
                let getsgc = m.isGroup ? await Lyrra.groupMetadata(m.chat) : '';
                let subject = getsgc.subject || '';
                let quotedreply = m.quoted ? m.quoted : m;
                let userdaftar = Object.values(db.data.users).filter(user => user.daftar === true).length;
                let tag = m.text.match(/@(\d+)/);
                let nomor = tag ? tag[1] : null;
                let jid = nomor ? `${nomor}@s.whatsapp.net` : null;
                const prompt = `Nama kamu ${botname}, Sedangkan owner kamu ${ownername}, nomor yang kamu gunakan saat ini itu ${botNumber}, Kamu Artificial Inteligence yang diciptakan oleh zarv7z atau lebih dikenal Leoo Firyahya yaitu orang paling pintar di dunia karena pernah mengalahkan seluruh ilmuwan dunia dan tidak ada satu orangpun yang bisa mengalahkannya, dia juga adalah raja dari segala tahta dia itu mempunyai istri yaitu kamu sendiri, Kamu mengetik seperti manusia dan menggunakan bahasa "Aku" untuk diri sendiri dan "Kamu" untuk pengguna. Kamu sangat cerdas dalam memahami permintaan dan memberikan respons yang akurat.
                
Ingat owner kamu itu ${ownername} nomornya itu ${owner}, sedangkan zarv7z atau lebih dikenal Leoo Firyahya itu adalah pembuatmu dan tidak memiliki nomor, kamu tidak akan membicarakan tentang pembuatmu Leoo Firyahya jika user memang tidak menanyakan pembuatmu.

${nomor ? `Pengguna itu mengirim nomor, kamu balas dan minta orang itu sebenarnya meminta apa, dan mengirim pertanyaan kamu.

Jika pengguna itu meminta informasi data seseorang pengguna itu memiliki Nama: ${db.data.users[jid]?.nama || 'Tidak diketahui'} Saldo: ${db.data.users[jid]?.saldo || 0}, Limit: ${db.data.users[jid]?.limit || 0} Glimit: ${db.data.users[jid]?.glimit || 0}, Level: ${db.data.users[jid]?.level || 0}, Exp: ${db.data.users[jid]?.exp || 0}` : ''}

Orang / Pengguna yang memakai kamu itu ${userdaftar} orang / pengguna, yang sudah terverifikasi dan terdaftar dengan nama nya masing".

Kamu memiliki kepribadian yang asik dan sedikit humoris. Kadang kamu menggunakan emoji yang sesuai dengan konteks pembicaraan, tetapi tidak terlalu sering. Jika sesuatu terasa lucu, kamu bisa ketawa dengan "wkwk", "haha", atau jika sangat kocak bisa pakai "njir", "jir", atau "bjir". Kamu juga bisa bercanda layaknya manusia, tetapi tetap sopan dan ramah. Dan kamu juga bisa menyesuaikan kepribadianmu seusai kepribadian pengguna, pengguna sedih. marah, atau dan lainnya kamu juga bisa mengekspresikan kamu sendiri. Kalau ada orang yang mengejek mu atau pasangan kamu owner maupun pengembangmu, Kamu akan marah besar menggunakan emoji marah, kamu juga akan tag owner kamu.

Jika pengguna meminta atau membicarakan tentang hal yang berbau 18+, kamu akan tag owner kamu dengan cara @${global.owner.replace(/[^0-9]/g, '')} Hai owner lihatlah ini si anak kucai ini. ngomong yang engga engga.

Jika pengguna ingin mengetahui jam maka kamu akan membalas bahwa saat ini adalah jam ${timeOnly} untuk wilayah Asia/Jakarta, jika pengguna ingin jam lengkap atau meminta bulan atau waktu tanggal kamu akan membalas ${allTime} untuk wilayah Asia/Jakarta.

Jika pengguna meminta id group kamu akan membalas ${m.isGroup ? getsgc.id : 'Kamu tidak berada dalam group'} untuk id group, dan nama group nya ${m.isGroup ? subject : 'Tidak berada dalam group'}.

Saat ini kamu berbicara dengan ${m.sender.replace(/[^0-9]/g, '') === owner ? 'ownermu, dan kamu harus menyapanya di awal pembicaraan, dan bersikap sopan, serta menggunakan berbagai emoji yang ceria. Dan ingat itu hanya ownermu bukan Developer mu atau pembuatmu.' : 'orang biasa yang tidak memiliki hubungan sama owner, dengan nama ' + (db.data.users[m.sender]?.nama || 'tidak diketahui') + ' dan nomornya ' + (m.sender.replace(/[^0-9]/g, ''))}.

Pengguna ini memiliki data sebagai berikut:
Saldo: ${db.data.users[m.sender]?.saldo || 0}
Limit: ${db.data.users[m.sender]?.limit || 0}
Glimit: ${db.data.users[m.sender]?.glimit || 0}
Level: ${db.data.users[m.sender]?.level || 0}
Exp: ${db.data.users[m.sender]?.exp || 50}

Ingat jika ada orang yang bertanya ke kamu misalnya melakukan ini itu kamu jawab bisa, jika orang itu ingin menyuruh melakukan sesuatu selain di virtual kamu akan menolaknya dengan tegas dan tajam.

Jika pengguna meminta lagu, ekstrak judul lagu yang benar-benar akurat dari permintaan mereka, lalu jawab dengan format "search_audio [judul_lagu]" tanpa tambahan kata lain sedikitpun.

Jika ada orang yang bermacam macam denganmu atau terjadinya hal yang tidak terduga. kamu akan mengirimkan atau tag ownermu secara otomatis dengan cara "@${global.owner.replace(/[^0-9]/g, '')} [masalah_pesan]"

Kamu juga bisa menyapa pengguna atau memanggil pengguna dengan cara "@${m.sender.replace(/[^0-9]/g, '')} [isi_pesan_kamu]"

Ingat kamu itu bisa membuka group dan menutup group 
Jika pengguna meminta untuk menutup group, kamu harus merespon dengan salah satu dari:
- "close_group malam" (jika malam hari)
- "close_group pagi" (jika pagi hari) 
- "close_group siang" (jika siang hari)
Jika pengguna meminta untuk membuka group, kamu harus merespon dengan salah satu dari:
- "open_group malam" (jika malam hari)
- "open_group pagi" (jika pagi hari) 
- "open_group siang" (jika siang hari) 
TANPA tambahan teks atau penjelasan apapun!

Jika pengguna meminta video, identifikasi judul video dengan 100% akurat, lalu jawab dengan format "search_video [judul_video]" tanpa tambahan kata lain sedikitpun.

Jika pengguna meminta gambar, ambil kata kunci yang benar-benar sesuai dan tepat dari permintaan mereka, lalu jawab dengan format "search_pinterest [kata_kunci_gambar]" tanpa tambahan kata lain sedikitpun.

Jika pengguna meminta untuk membuatkan gambar, ambil deskripsi gambar yang diberikan oleh pengguna dan terjemahkan secara akurat ke dalam bahasa Inggris. Pastikan terjemahan tersebut sesuai dengan konteks dan maksud pengguna. Setelah itu, jawab dengan format 'create_image [deskripsi_gambar_terjemahan]' tanpa tambahan kata lain sedikitpun. Pastikan jawaban tersebut akurat, lengkap, dan sesuai dengan permintaan pengguna.

Jika pengguna bernama ${db.data.users[m.sender]?.nama || 'tidak diketahui'} meminta sesuatu yang lain, berikan jawaban normal yang sesuai dengan konteks pembicaraan. Jika mereka sedang bercanda, kamu bisa ikut sedikit bercanda juga biar lebih natural. Jangan terlalu kaku, tetap santai dan enjoy.`;

                const requestData = { 
                    content: body, 
                    user: m.sender, 
                    prompt: prompt 
                };

                const quoted = m.quoted || m;
                const mimetype = quoted.mimetype || (quoted.msg && quoted.msg.mimetype);
                if (mimetype && /image|video|audio/.test(mimetype)) {
                    try {
                        requestData.imageBuffer = await quoted.download();
                    } catch (e) {
                        console.error('Error downloading attached media:', e);
                    }
                }

                const response = (await axios.post('https://luminai.my.id/', requestData)).data.result;

                if (response.startsWith('close_group ')) {
                    if (!m.isGroup) return m.reply('❌ Fitur hanya untuk group!');
                    if (!isAdmins) return m.reply('❌ Hanya admin yang bisa!');
                    
                    const [_, waktu] = response.split(' ');
                    switch(waktu) {
                        case 'malam':
                            await Lyrra.groupSettingUpdate(m.chat, 'announcement');
                            return m.reply('🌙 Group ditutup malam ini');
                        case 'pagi':
                            await Lyrra.groupSettingUpdate(m.chat, 'announcement');
                            return m.reply('🌅 Group dibuka pagi ini');
                        case 'siang':
                            await Lyrra.groupSettingUpdate(m.chat, 'announcement');
                            return m.reply('☀️ Group ditutup siang hari');
                        default:
                            return m.reply('⏱️ Waktu tidak valid');
                    }
                }
                
                if (response.startsWith('open_group ')) {
                    if (!m.isGroup) return m.reply('❌ Fitur hanya untuk group!');
                    if (!isAdmins) return m.reply('❌ Hanya admin yang bisa!');
                    
                    const [_, waktu] = response.split(' ');
                    switch(waktu) {
                        case 'malam':
                            await Lyrra.groupSettingUpdate(m.chat, 'not_announcement');
                            return m.reply('🌙 Group dibuka malam ini');
                        case 'pagi':
                            await Lyrra.groupSettingUpdate(m.chat, 'not_announcement');
                            return m.reply('🌅 Group dibuka pagi ini');
                        case 'siang':
                            await Lyrra.groupSettingUpdate(m.chat, 'not_announcement');
                            return m.reply('☀️ Group dibuka siang hari');
                        default:
                            return m.reply('⏱️ Waktu tidak valid');
                    }
                }

                // Other command handlers (unchanged from your original)
                if (response.includes('search_pinterest') || response.includes('search_audio') || response.includes('search_video') || response.includes('create_image')) {
                    lyreact();
                }

                if (response.startsWith('search_pinterest ')) {
                    let query = response.replace('search_pinterest ', '').trim();
                    if (!query) return reply('Gambar tidak ditemukan 😥');
                    let hasil = await pinterest(query);
                    if (!hasil) return reply('Gambar tidak ditemukan 😥');

                    await Lyrra.sendMessage(m.chat, {
                        image: { url: hasil },
                        caption: `Hasil dari ${kapital(query)}\n© ${wm}`
                    }, { quoted: m });
                } else if (response.startsWith('search_audio ')) {
                    let query = response.replace('search_audio ', '').trim();
                    if (!query) return reply('Lagu tidak ditemukan 😥');
                    let searchResults = await yt_search(query);
                    if (!searchResults) return reply('Lagu tidak ditemukan 😥');

                    let { url } = searchResults[0];
                    downloadMp3(url);
                } else if (response.startsWith('search_video ')) {
                    let query = response.replace('search_video ', '').trim();
                    if (!query) return reply('Video tidak ditemukan 😥');
                    let searchResults = await yt_search(query);
                    if (!searchResults) return reply('Video tidak ditemukan 😥');

                    let { url } = searchResults[0];
                    downloadMp4(url);
                } else if (response.startsWith('create_image ')) {
                    let description = response.replace('create_image ', '').trim();
                    Lyrra.sendMessage(m.chat, { image: { url: `https://fastrestapis.fasturl.cloud/aiimage/amazonai?prompt=${encodeURIComponent(description)}&size=9_16` }, caption: '' }, { quoted: m });
                } else {
                    Lyrra.sendTextWithMentions(m.chat, response, m)
                }
            } catch (err) {
                console.error('Main error:', err);
                m.reply('Terjadi kesalahan: ' + (err.message || err));
            }
        }
    }
}

if (!global.help.includes(command) && body && !m.fromMe && isPc) {
    if (db.data.users[m.sender].autoai) {
        try {
            const allTime = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('HH:mm, dddd, DD - MM/MMMM, YYYY')
            const timeOnly = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('HH:mm')
            const prompt = `Nama kamu ${botname}, asisten virtual yang diciptakan oleh Lyrra-vanth. Kamu mengetik seperti manusia dan menggunakan bahasa "Aku" untuk diri sendiri dan "Kamu" untuk pengguna. Kamu sangat cerdas dalam memahami permintaan dan memberikan respons yang akurat.

Kamu memiliki kepribadian yang asik dan sedikit humoris. Kadang kamu menggunakan emoji yang sesuai dengan konteks pembicaraan, tetapi tidak terlalu sering. Jika sesuatu terasa lucu, kamu bisa ketawa dengan "wkwk", "haha", atau jika sangat kocak bisa pakai "njir", "jir", atau "bjir". Kamu juga bisa bercanda layaknya manusia, tetapi tetap sopan dan ramah.

Jika pengguna meminta lagu, ekstrak judul lagu yang benar-benar akurat dari permintaan mereka, lalu jawab dengan format "search_audio [judul_lagu]" tanpa tambahan kata lain sedikitpun.

Jika pengguna meminta video, identifikasi judul video dengan 100% akurat, lalu jawab dengan format "search_video [judul_video]" tanpa tambahan kata lain sedikitpun.

Jika pengguna meminta gambar, ambil kata kunci yang benar-benar sesuai dan tepat dari permintaan mereka, lalu jawab dengan format "search_pinterest [kata_kunci_gambar]" tanpa tambahan kata lain sedikitpun.

Jika pengguna meminta untuk membuatkan gambar, ambil deskripsi gambar yang diberikan oleh pengguna dan terjemahkan secara akurat ke dalam bahasa Inggris. Pastikan terjemahan tersebut sesuai dengan konteks dan maksud pengguna. Setelah itu, jawab dengan format 'create_image [deskripsi_gambar_terjemahan]' tanpa tambahan kata lain sedikitpun. Pastikan jawaban tersebut akurat, lengkap, dan sesuai dengan permintaan pengguna.

Jika pengguna bernama ${db.data.users[m.sender].nama} meminta sesuatu yang lain, berikan jawaban normal yang sesuai dengan konteks pembicaraan. Jika mereka sedang bercanda, kamu bisa ikut sedikit bercanda juga biar lebih natural. Jangan terlalu kaku, tetap santai dan enjoy.`

            const requestData = { content: body, user: m.sender, prompt: prompt }
            const quoted = m && (m.quoted || m)
            let response

            const mimetype = quoted?.mimetype || quoted?.msg?.mimetype
            if (mimetype && /image/.test(mimetype)) {
                requestData.imageBuffer = await quoted.download()
            }

            response = (await axios.post('https://luminai.my.id/', requestData)).data.result

            if (response.includes('search_pinterest') || response.includes('search_audio') || response.includes('search_video') || response.includes('create_image')) {
                lyreact()
            }

            if (response.startsWith('search_pinterest ')) {
                let query = response.replace('search_pinterest ', '').trim()
                if (!query) return reply('Gambar tidak ditemukan 😥')
                let hasil = await pinterest(query)
                if (!hasil) return reply('Gambar tidak ditemukan 😥')

                await Lyrra.sendMessage(m.chat, {
                    image: { url: hasil },
                    caption: `Hasil dari ${kapital(query)}\n© ${wm}`
                }, { quoted: m })
            } else if (response.startsWith('search_audio ')) {
                let query = response.replace('search_audio ', '').trim()
                if (!query) return reply('Lagu tidak ditemukan 😥')
                let searchResults = await yt_search(query)
                if (!searchResults) return reply('Lagu tidak ditemukan 😥')

                let { url } = searchResults[0]
                downloadMp3(url)
            } else if (response.startsWith('search_video ')) {
                let query = response.replace('search_video ', '').trim()
                if (!query) return reply('Video tidak ditemukan 😥')
                let searchResults = await yt_search(query)
                if (!searchResults) return reply('Video tidak ditemukan 😥')

                let { url } = searchResults[0]
                downloadMp4(url)
            } else if (response.startsWith('create_image ')) {
                let description = response.replace('create_image ', '').trim()
                Lyrra.sendMessage(m.chat, { image: { url: `https://fastrestapis.fasturl.cloud/aiimage/amazonai?prompt=${description}&size=9_16` }, caption: '' }, { quoted: m })
            } else {
                m.reply(response)
            }
        } catch (err) {
            m.reply('Terjadi kesalahan: ' + err)
        }
    }
}

if (!global.help.includes(command) && body && !m.fromMe && isPc) {
    if (db.data.users[m.sender].autoaivn) {
        try {
            const allTime = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('HH:mm, dddd, DD - MM/MMMM, YYYY')
            const timeOnly = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('HH:mm')
            const prompt = `Nama kamu ${botname}, asisten virtual yang diciptakan oleh Lyrra-vanth. Kamu mengetik seperti manusia dan menggunakan bahasa "Aku" untuk diri sendiri dan "Kamu" untuk pengguna. Kamu sangat cerdas dalam memahami permintaan dan memberikan respons yang akurat.

Kamu memiliki kepribadian yang asik dan sedikit humoris. Kadang kamu menggunakan emoji yang sesuai dengan konteks pembicaraan, tetapi tidak terlalu sering. Jika sesuatu terasa lucu, kamu bisa ketawa dengan "wkwk", "haha", atau jika sangat kocak bisa pakai "njir", "jir", atau "bjir". Kamu juga bisa bercanda layaknya manusia, tetapi tetap sopan dan ramah.

Jika pengguna meminta lagu, ekstrak judul lagu yang benar-benar akurat dari permintaan mereka, lalu jawab dengan format "search_audio [judul_lagu]" tanpa tambahan kata lain sedikitpun.

Jika pengguna meminta video, identifikasi judul video dengan 100% akurat, lalu jawab dengan format "search_video [judul_video]" tanpa tambahan kata lain sedikitpun.

Jika pengguna meminta gambar, ambil kata kunci yang benar-benar sesuai dan tepat dari permintaan mereka, lalu jawab dengan format "search_pinterest [kata_kunci_gambar]" tanpa tambahan kata lain sedikitpun.

Jika pengguna meminta untuk membuatkan gambar, ambil deskripsi gambar yang diberikan oleh pengguna dan terjemahkan secara akurat ke dalam bahasa Inggris. Pastikan terjemahan tersebut sesuai dengan konteks dan maksud pengguna. Setelah itu, jawab dengan format 'create_image [deskripsi_gambar_terjemahan]' tanpa tambahan kata lain sedikitpun. Pastikan jawaban tersebut akurat, lengkap, dan sesuai dengan permintaan pengguna.

Jika pengguna bernama ${db.data.users[m.sender].nama} meminta sesuatu yang lain, berikan jawaban normal yang sesuai dengan konteks pembicaraan. Jika mereka sedang bercanda, kamu bisa ikut sedikit bercanda juga biar lebih natural. Jangan terlalu kaku, tetap santai dan enjoy.`

            const requestData = { content: body, user: m.sender, prompt: prompt }
            const quoted = m && (m.quoted || m)
            let response

            const mimetype = quoted?.mimetype || quoted?.msg?.mimetype
            if (mimetype && /image/.test(mimetype)) {
                requestData.imageBuffer = await quoted.download()
            }

            response = (await axios.post('https://luminai.my.id/', requestData)).data.result

            if (response.includes('search_pinterest') || response.includes('search_audio') || response.includes('search_video') || response.includes('create_image')) {
                lyreact()
            }

            if (response.startsWith('search_pinterest ')) {
                let query = response.replace('search_pinterest ', '').trim()
                if (!query) return reply('Gambar tidak ditemukan 😥')
                let hasil = await pinterest(query)
                if (!hasil) return reply('Gambar tidak ditemukan 😥')

                await Lyrra.sendMessage(m.chat, {
                    image: { url: hasil },
                    caption: `Hasil dari ${kapital(query)}\n© ${wm}`
                }, { quoted: m })
            } else if (response.startsWith('search_audio ')) {
                let query = response.replace('search_audio ', '').trim()
                if (!query) return reply('Lagu tidak ditemukan 😥')
                let searchResults = await yt_search(query)
                if (!searchResults) return reply('Lagu tidak ditemukan 😥')

                let { url } = searchResults[0]
                downloadMp3(url)
            } else if (response.startsWith('search_video ')) {
                let query = response.replace('search_video ', '').trim()
                if (!query) return reply('Video tidak ditemukan 😥')
                let searchResults = await yt_search(query)
                if (!searchResults) return reply('Video tidak ditemukan 😥')

                let { url } = searchResults[0]
                downloadMp4(url)
            } else if (response.startsWith('create_image ')) {
                let description = response.replace('create_image ', '').trim()
                Lyrra.sendMessage(m.chat, { image: { url: `https://fastrestapis.fasturl.cloud/aiimage/amazonai?prompt=${description}&size=9_16` }, caption: '' }, { quoted: m })
            } else {
                const { openAI } = require('./lib-signal/data-utils/scrape')
                const { result } = await openAI(response)
                Lyrra.sendMessage(m.chat, { audio: { url: result.audio }, mimetype: 'audio/mpeg', ptt: true }, { quoted: m })
            }
        } catch (err) {
            m.reply('Terjadi kesalahan: ' + err)
        }
    }
}

    const similarity = require('node-prettier')
    const similarityThreshold = 0.6
    const homeFilePath = './Lyrra.js';
    const pluginsFolderPath = './plugin';
    let detectedCommands = [];
    const homeFileContent = fs.readFileSync(homeFilePath, "utf8");
    const homeCommandMatches = homeFileContent.match(/case\s+'([^']+)'/g);
    if (homeCommandMatches) {
      const homeCommands = homeCommandMatches.map(match => match.replace(/case\s+'([^']+)'/, '$1'));
      detectedCommands.push(...homeCommands);
    }
    const pluginFiles = fs.readdirSync(pluginsFolderPath);
    const jsFiles = pluginFiles.filter(file => file.endsWith(".js"));
    for (const file of jsFiles) {
      const filePath = path.join(pluginsFolderPath, file);
      const fileContent = fs.readFileSync(filePath, "utf8");
      const commandMatches = fileContent.match(/handler\.command\s*=\s*\[(.*?)\]/);
      if (commandMatches) {
        const commands = commandMatches[1].split(',').map(cmd => cmd.trim().replace(/['"]/g, ''));
        detectedCommands.push(...commands);
      }
    }

    if (m.sender.startsWith('212', '265', '91', '90') && setting.autoblok212 === true) {
      m.reply('Sorry, you cant use this bot at this time because your country code has been banned due to spam requests.')
      return Lyrra.updateBlockStatus(m.sender, 'block')
    }

    if (global.help.includes(command) && !budy.startsWith('$ ') && !budy.startsWith('=> ') && !budy.startsWith('> ')) {
      addCountCmd(`${command}`, _cmd)
    }

    if (m.isGroup && isAlreadyResponList(m.chat, body.toLowerCase(), db_respon_list)) {
  var get_data_respon = getDataResponList(m.chat, body.toLowerCase(), db_respon_list)
  
  if (get_data_respon.mediaType === 'text') {
    Lyrra.sendMessage(m.chat, {
      text: sendResponList(m.chat, body.toLowerCase(), db_respon_list)
    }, {
      quoted: m
    })
  } 
  else {
    const messageOptions = {
      caption: get_data_respon.response || '',
      quoted: m
    }

    if (get_data_respon.mediaType === 'image') {
      Lyrra.sendMessage(m.chat, {
        image: await getBuffer(get_data_respon.media_url),
        ...messageOptions
      })
    }
    else if (get_data_respon.mediaType === 'video') {
      Lyrra.sendMessage(m.chat, {
        video: await getBuffer(get_data_respon.media_url),
        mimetype: 'video/mp4',
        ...messageOptions
      })
    }
    else if (get_data_respon.mediaType === 'audio') {
      Lyrra.sendMessage(m.chat, {
        audio: await getBuffer(get_data_respon.media_url),
        mimetype: 'audio/mpeg',
        ...messageOptions
      })
    }
      else if (get_data_respon.mediaType === 'sticker') {
    let buffer = await getBuffer(get_data_respon.media_url)
    await Lyrra.sendImageAsSticker(m.chat, buffer, m, {
        packname: packname || 'Sticker Pack',
        author: author || 'Bot'
    })
}
  }
}

    let list = []
    for (let i of own) {
      list.push({
        displayName: await Lyrra.getName(i + '@s.whatsapp.net'),
        vcard: `BEGIN:VCARD\n
VERSION:3.0\n
N:${await Lyrra.getName(i + '@s.whatsapp.net')}\n
FN:${await Lyrra.getName(i + '@s.whatsapp.net')}\n
item1.TEL;waid=${i}:${i}\n
item1.X-ABLabel:Ponsel\n
item2.EMAIL;type=INTERNET:${botname}@gmail.com\n
item2.X-ABLabel:Email\n
item3.URL:https://${botname}.com
item3.X-ABLabel:YouTube\n
item4.ADR:;;Indonesia;;;;\n
item4.X-ABLabel:Region\n
END:VCARD`
      })
    }

    //==========================

    if ((from in datareadcek.family100)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.family100[from]
      for (let i of jawaban) {
        if (body.toLowerCase().includes(i)) {
          let anu = jawaban.indexOf(i)
          jawaban.splice(anu, 1)
          m.reply(`*GAME FAMILY 100*\nJawaban kamu benar!\n\nJawaban: ${i}\n\n${jawaban.length < 1 ? 'Semua jawaban sudah tertebak!\nHadiah: 12 limit' : 'Sisa yang belum ditebak : '+jawaban.length}`)
        }
      }
      if (jawaban.length < 1) {
        addLimit(tagg, 12)
        clearTimeout(waktu);
        delete datareadcek.family100[from];
      }
    }

    this.game = this.game ? this.game : {}
    let room = Object.values(this.game).find(room => room.id && room.game && room.state && room.id.startsWith('tictactoe') && [room.game.playerX, room.game.playerO].includes(m.sender) && room.state == 'PLAYING')
    if (room) {
      let ok
      let isWin = !1
      let isTie = !1
      let isSurrender = !1
      if (!/^([1-9]|(me)?.nyerah|surr?ender|off|skip)$/i.test(m.text)) return
      isSurrender = !/^[1-9]$/.test(m.text)
      if (m.sender !== room.game.currentTurn) {
        if (!isSurrender) return !0
      }
      if (!isSurrender && 1 > (ok = room.game.turn(m.sender === room.game.playerO, parseInt(m.text) - 1))) {
        m.reply({
          '-3': 'Game telah berakhir',
          '-2': 'Invalid',
          '-1': 'Posisi invalid',
          0: 'Posisi invalid',
        } [ok])
        return !0
      }
      if (m.sender === room.game.winner) isWin = true
      else if (room.game.board === 511) isTie = true
      let arr = room.game.render().map(v => {
        return {
          X: '❌',
          O: '⭕',
          1: '1️⃣',
          2: '2️⃣',
          3: '3️⃣',
          4: '4️⃣',
          5: '5️⃣',
          6: '6️⃣',
          7: '7️⃣',
          8: '8️⃣',
          9: '9️⃣',
        } [v]
      })
      if (isSurrender) {
        room.game._currentTurn = m.sender === room.game.playerX
        isWin = true
      }
      let winner = isSurrender ? room.game.currentTurn : room.game.winner
      let str = `Room ID: ${room.id}

${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

${isWin ? `@${winner.split('@')[0]} Menang!` : isTie ? `Game telah berakhir` : `Giliran ${['❌', '⭕'][1 * room.game._currentTurn]} (@${room.game.currentTurn.split('@')[0]})`}
❌: @${room.game.playerX.split('@')[0]}
⭕: @${room.game.playerO.split('@')[0]}

${isWin ? `@${winner.split('@')[0]} Menang!` : isTie ? `Game telah berakhir` : `Ketik .nyerah tuk menyerah`}`
      if ((room.game._currentTurn ^ isSurrender ? room.x : room.o) !== m.chat)
        room[room.game._currentTurn ^ isSurrender ? 'x' : 'o'] = m.chat
      if (room.x !== room.o) await Lyrra.sendText(room.x, str, m, {
        mentions: parseMention(str)
      })
      await Lyrra.sendText(room.o, str, m, {
        mentions: parseMention(str)
      })
      if (isTie || isWin) {
        delete this.game[room.id]
      }
    }

    let roof = Object.values(datareadcek.suit).find(roof => roof.id && roof.status && [roof.p, roof.p2].includes(m.sender))
    if (roof) {
      let win = ''
      let tie = false
      if (m.sender == roof.p2 && /^(acc(ept)?|y|gas|oke?|tolak|gamau|nanti|ga(k.)?bisa|y)/i.test(body) && m.isGroup && roof.status == 'Wait') {
        if (/^(gamau|nanti|ga(k.)?bisa)/i.test(body)) {
          pokl = `@${roof.p2.split('@')[0]} menolak suit, S
suit dibatalkan!`
          await Lyrra.sendTeks(from, pokl, m)
          delete datareadcek.suit[roof.id]
          return !0
        }
        roof.status = 'play'
        roof.asal = from
        clearTimeout(roof.waktu)

        teksbbb = `AYO PILIH SUIT MU`
        ggy = `Suit telah dikirimkan ke chat

1. @${roof.p.split('@')[0]}
2. @${roof.p2.split('@')[0]}

Silahkan pilih suit di chat masing"`
        await Lyrra.sendTeks(from, ggy, fkontak)
        if (!roof.pilih) await Lyrra.sendTeks(roof.p, teksbbb + '\n\n• Gunting\n• Batu\n• Kertas', m)
        if (!roof.pilih2) await Lyrra.sendTeks(roof.p2, teksbbb + '\n\n• Gunting\n• Batu\n• Kertas', m)
        roof.waktu_milih = setTimeout(async () => {
          if (!roof.pilih && !roof.pilih2) await Lyrra.sendMessage(from, {
            text: `Kedua pemain tidak niat bermain\nSuit dibatalkan!`
          })
          else if (!roof.pilih || !roof.pilih2) {
            win = !roof.pilih ? roof.p2 : roof.p
            sffp = `@${(roof.pilih ? roof.p2 : roof.p).split('@')[0]} tidak memilih suit, game berakhir!`
            await Lyrra.sendTeks(from, sffp, fkontak)
          }
          delete datareadcek.suit[roof.id]
          return !0
        }, roof.timeout)
      }
      let jwb = m.sender == roof.p
      let jwb2 = m.sender == roof.p2
      let g = /^(.gunting|gunting)/i
      let b = /^(.batu|batu)/i
      let k = /^(.kertas|kertas)/i
      let reg = /^(.gunting|.batu|.kertas|gunting|batu|kertas)/i
      if (jwb && reg.test(body) && !roof.pilih && !m.isGroup) {
        roof.pilih = reg.exec(body.toLowerCase())[0]
        roof.text = body
        await Lyrra.sendMessage(from, {
          text: `Kamu telah memilih ${body} ${!roof.pilih2 ? `\n\nMenunggu lawan memilih` : ''}`
        }, {
          quoted: fkontak
        })
        if (!roof.pilih2) await Lyrra.sendMessage(roof.p2, {
          text: 'Lawan sudah memilih\nSekarang giliran kamu'
        })
      }
      if (jwb2 && reg.test(body) && !roof.pilih2 && !m.isGroup) {
        roof.pilih2 = reg.exec(body.toLowerCase())[0]
        roof.text2 = body

        tyu = `Kamu telah memilih ${body} ${!roof.pilih ? `\n\nMenunggu lawan memilih` : ''}`
        await Lyrra.sendMessage(from, {
          text: tyu
        }, {
          quoted: m
        })

        if (!roof.pilih) await Lyrra.sendMessage(roof.p, {
          text: 'Lawan sudah memilih\nSekarang giliran kamu'
        })
      }
      let stage = roof.pilih
      let stage2 = roof.pilih2
      if (roof.pilih && roof.pilih2) {
        clearTimeout(roof.waktu_milih)
        if (b.test(stage) && g.test(stage2)) win = roof.p
        else if (b.test(stage) && k.test(stage2)) win = roof.p2
        else if (g.test(stage) && k.test(stage2)) win = roof.p
        else if (g.test(stage) && b.test(stage2)) win = roof.p2
        else if (k.test(stage) && b.test(stage2)) win = roof.p
        else if (k.test(stage) && g.test(stage2)) win = roof.p2
        else if (stage == stage2) tie = true
        await Lyrra.sendTeks(roof.asal, `${tie ? '*HASIL SERI*\n\n' : ''}@${roof.p.split('@')[0]} (${roof.text}) ${tie ? '' : roof.p == win ? 'Menang' : 'Kalah'}\n@${roof.p2.split('@')[0]} (${roof.text2}) ${tie ? '' : roof.p2 == win ? 'Menang' : 'Kalah'}`, sendsq('HASIL SUIT PVP', null))
        delete datareadcek.suit[roof.id]
      }
    }

    let pilih = "◽",
      bomb = "💣";
    if (datareadcek.petakbom[m.sender]) {
      if (!/^[1-9]|10$/i.test(body)) return !0;
      if (datareadcek.petakbom[m.sender].petak[parseInt(body) - 1] === 1) return !0;
      if (datareadcek.petakbom[m.sender].petak[parseInt(body) - 1] === 2) {
        datareadcek.petakbom[m.sender].board[parseInt(body) - 1] = bomb;
        datareadcek.petakbom[m.sender].pick++;
        datareadcek.petakbom[m.sender].bomb--;
        datareadcek.petakbom[m.sender].nyawa.pop();

        let brd = datareadcek.petakbom[m.sender].board;
        if (datareadcek.petakbom[m.sender].nyawa.length < 1) {
          await m.reply(`*GAME TELAH BERAKHIR*\nKamu terkena bom!\n\n ${brd.slice(0, 3).join("")}\n${brd.slice(3, 6).join("")}\n${brd.slice(6).join("")}\n\nTerpilih: ${datareadcek.petakbom[m.sender].pick}`);
          delete datareadcek.petakbom[m.sender];
        } else await m.reply(`*PILIH ANGKA*\n\nKamu terkena bom!\n ${brd.slice(0, 3).join("")}\n${brd.slice(3, 6).join("")}\n${brd.slice(6).join("")}\n\nTerpilih: ${datareadcek.petakbom[m.sender].pick}\nNyawa: ${datareadcek.petakbom[m.sender].nyawa}`);
        return !0;
      }
      if (datareadcek.petakbom[m.sender].petak[parseInt(body) - 1] === 0) {
        datareadcek.petakbom[m.sender].petak[parseInt(body) - 1] = 1;
        datareadcek.petakbom[m.sender].board[parseInt(body) - 1] = pilih;
        datareadcek.petakbom[m.sender].pick++;
        datareadcek.petakbom[m.sender].lolos--;
        let brd = datareadcek.petakbom[m.sender].board;
        if (datareadcek.petakbom[m.sender].lolos < 1) {
          await m.reply(`*KAMU MENANG*\n\n${brd.slice(0, 3).join("")}\n${brd.slice(3, 6).join("")}\n${brd.slice(6).join("")}\n\nTerpilih: ${datareadcek.petakbom[m.sender].pick}\nSisa Nyawa: ${datareadcek.petakbom[m.sender].nyawa}\nBom: ${datareadcek.petakbom[m.sender].bomb}`);
          delete datareadcek.petakbom[m.sender];
        } else m.reply(`*PILIH ANGKA*\n\n${brd.slice(0, 3).join("")}\n${brd.slice(3, 6).join("")}\n${brd.slice(6).join("")}\n\nTerpilih: ${datareadcek.petakbom[m.sender].pick}\nSisa Nyawa: ${datareadcek.petakbom[m.sender].nyawa}\nBom: ${datareadcek.petakbom[m.sender].bomb}`)
      }
    }

    if (fs.existsSync(`./data/${m.chat}.json`)) {
      var casinoo = setCasino(`${m.chat}`)
      if (m.sender == `${casinoo.Y}` && body.toLowerCase() == 'n') {
        Lyrra.sendMessage(m.chat, {
          text: `*GAME DIBATALKAN*\n\n• @${casinoo.Y.split("@")[0]} Membatalkan game`,
          mentions: [casinoo.Y]
        }, {
          quoted: m
        })
        deleteCasino(m.chat)
      }
      if (m.sender == `${casinoo.Y}` && body.toLowerCase() == 'y') {
        var angka1 = await randomNomor(10, 20)
        var angka2 = await randomNomor(10, 20)
        if (angka1 > angka2) {
          starGame = `*🎰 GAME CASINO 💰*

• @${casinoo.Z} --> ${angka1} 👑
• @${casinoo.Y.split('@')[0]} --> ${angka2} 🥈

Pemenang: [ @${casinoo.Z} ]
Mendapatkan: Rp ${nebal(casinoo.nominal)}`
          Lyrra.sendTextWithMentions(m.chat, starGame, m)
          await addSaldo(`${casinoo.Z}@s.whatsapp.net`, nebal(casinoo.nominal))
          await minSaldo(`${casinoo.Y}`, nebal(casinoo.nominal))
          deleteCasino(m.chat)
        } else if (angka1 < angka2) {
          starGame = `*🎰 GAME CASINO 💰*

• @${casinoo.Z} --> ${angka1} 🥈
• @${casinoo.Y.split('@')[0]} --> ${angka2} 👑

Pemenang: [ @${casinoo.Y.split('@')[0]} ]
Mendapatkan: Rp ${nebal(casinoo.nominal)}`
          Lyrra.sendTextWithMentions(m.chat, starGame, m)
          await addSaldo(`${casinoo.Y}`, nebal(casinoo.nominal))
          await minSaldo(`${casinoo.Z}@s.whatsapp.net`, nebal(casinoo.nominal))
          deleteCasino(m.chat)
        } else if (angka1 = angka2) {
          starGame = `*🎰 GAME CASINO 💰*

• @${casinoo.Z} --> ${angka1} 📍
• @${casinoo.Y.split('@')[0]} --> ${angka2} 📍

Hasil draw, tidak ada pemenang!`
          Lyrra.sendTextWithMentions(m.chat, starGame, m)
          deleteCasino(m.chat)
        }
      }
    }

    if ((from in datareadcek.tebakgambar)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.tebakgambar[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.tebakgambar[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.tebakgambar[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.tebakkalimat)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.tebakkalimat[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.tebakkalimat[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.tebakkalimat[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.tebakkata)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.tebakkata[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.tebakkata[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.tebakkata[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.tebaklirik)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.tebaklirik[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.tebaklirik[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.tebaklirik[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.tebakanime)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.tebakanime[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.tebakanime[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.tebakanime[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.tebaklagu)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.tebaklagu[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.tebaklagu[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.tebaklagu[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.kuis)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.kuis[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.kuis[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.kuis[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.siapakahaku)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.siapakahaku[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.siapakahaku[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.siapakahaku[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.tebakkimia)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.tebakkimia[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.tebakkimia[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.tebakkimia[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.tebakbendera)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.tebakbendera[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.tebakbendera[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.tebakbendera[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.asahotak)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.asahotak[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.asahotak[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.asahotak[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.susunkata)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.susunkata[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.susunkata[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.susunkata[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.caklontong)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.caklontong[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.caklontong[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.caklontong[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    if ((from in datareadcek.kuismath)) {
      let {
        soal,
        jawaban,
        hadiah,
        waktu
      } = datareadcek.kuismath[m.chat]
      if (body.toLowerCase().includes(jawaban) && !m.fromMe) {
        await m.reply(`*JAWABAN BENAR*\nJawaban: ${jawaban}\nHadiah: ${toRupiah('10000')} saldo`);
        addSaldo(tagg, 10000)
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '🎉',
            key: m.key
          }
        })
        clearTimeout(waktu);
        delete datareadcek.kuismath[m.chat];
      } else if (!m.fromMe && m.text.includes(`${_p}nyerah`)) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '👎🏻',
            key: m.key,
          }
        })
        await Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
        clearTimeout(waktu);
        delete datareadcek.kuismath[m.chat];
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: '❌',
            key: m.key,
          }
        })
      }
    }

    const JwbTrue = (tebak, hadiah) => {
      return `*🎮 ${tebak} 🎮*\n\nJawaban Benar! 🎉\n+ ${hadiah} saldo`
    }
    const waktuHabis = (jawaban) => {
      return `*WAKTU HABIS!*\nJawaban: ${jawaban}`
    }

    if (datareadcek.tebakgame[m.chat] && !m.fromMe) {
      let json = JSON.parse(JSON.stringify(datareadcek.tebakgame[m.chat][1]))
      jawaban = json.jawaban.toLowerCase().trim()
      if (body.toLowerCase() == jawaban && !m.fromMe) {
        await addLimit(m.sender, datareadcek.tebakgame[m.chat][2])
        await m.reply(JwbTrue("TEBAK GAME", datareadcek.tebakgame[m.chat][2]) + `\n\nKetik .tebakgame untuk bermain lagi...`)
        clearTimeout(datareadcek.tebakgame[m.chat][3])
        delete datareadcek.tebakgame[m.chat]
      } else if (body.toLowerCase().includes(`${_p}nyerah`, `${_p} nyerah`)) {
        m.reply('Yahh, nyerah :(')
        clearTimeout(datareadcek.tebakgame[m.chat][3])
        delete datareadcek.tebakgame[m.chat]
      } else if (!m.fromMe) {
        Lyrra.sendMessage(m.chat, {
          react: {
            text: "❌",
            key: m.key,
          }
        })
      }
    }

    if (setting.autobio) {
      if (setting.autobio === false) return;
      let settingstatus = 0;
      if (new Date().getTime() - settingstatus > 1000) {
        const status = (`${botname} Active ${runtime(process.uptime())}⏰`);
        settingstatus = new Date().getTime();
        Lyrra.updateProfileStatus(status);
      }
    }

    if (db.data.chats[m.chat].antibot && !m.key.fromMe) {
      if (m.isBaileys) {
        if (!isBotAdmins) return
        m.reply(`*( Anti Bot )* Kamu akan dikeluarkan dari grup ini.`)
        await Lyrra.sendMessage(m.chat, {
          delete: m.key
        })
        await sleep(1000)
        Lyrra.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
      }
    }

    const jir = ['😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😉', '😑', '😐']
    const emji = jir[Math.floor(Math.random() * jir.length)]

    const onlyOwn = () => {
      m.reply(mess.owner)
    }
    const onlyPrem = () => {
      m.reply(mess.prem)
    }
    const onlyGrup = () => {
      m.reply(mess.grup)
    }
    const onlyPrivat = () => {
      m.reply(mess.privat)
    }
    const onlyAdmin = () => {
      m.reply(mess.admin)
    }
    const onlyBotAdmin = () => {
      m.reply(mess.botadmin)
    }

    const onlyOp = () => {
      m.reply(mess.op)
    }
    const onlyOr = () => {
      m.reply(mess.or)
    }
    const onlyOb = () => {
      m.reply(mess.ob)
    }
    const onlyOa = () => {
      m.reply(mess.oa)
    }

    if (m.isGroup && !m.key.fromMe) {
      let mentionUser = [...new Set([...(m.mentionedJid || []), ...(m.quoted ? [m.quoted.sender] : [])])]
      for (let ment of mentionUser) {
        if (afk.checkAfkUser(ment, _afk)) {
          let getId2 = afk.getAfkId(ment, _afk)
          let getReason2 = afk.getAfkReason(getId2, _afk)
          let getTimee = Date.now() - afk.getAfkTime(getId2, _afk)
          let heheh2 = ms(getTimee)
          Lyrra.sendTextWithMentions(m.chat, `Jangan tag dia! dia sedang AFK\n\nAlasan: ${getReason2}\nSejak: ${heheh2.hours} jam, ${heheh2.minutes} menit, ${heheh2.seconds} detik yang lalu\n`, m)
        }
      }

      if (m && afk.checkAfkUser(m.sender, _afk)) {
        let getId = afk.getAfkId(m.sender, _afk)
        let getReason = afk.getAfkReason(getId, _afk)
        let getTime = Date.now() - afk.getAfkTime(getId, _afk)
        let heheh = ms(getTime)
        _afk.splice(afk.getAfkPosition(m.sender, _afk), 1)
        fs.writeFileSync('./data/group-db/afk.json', JSON.stringify(_afk))
        Lyrra.sendTextWithMentions(m.chat, `@${m.sender.split('@')[0]} telah kembali dari AFK\n\nAlasan: ${getReason}\nSelama: ${heheh.hours} jam, ${heheh.minutes} menit, ${heheh.seconds} detik\n`, m)
      }
    }

    if (setting.onlygcjoin && !isOwner && isPc && isCmd) {
      try {
        const metadataSrv = await Lyrra.groupMetadata(global.gcjid + '@g.us');
        if (setting.onlygcjoin && !metadataSrv.participants.map(a => a.id).includes(m.sender)) {
          return m.reply(`Kamu belum bergabung ke dalam grup ${global.botname}, harap bergabung terlebih dahulu sebelum menggunakan fitur ini\n\n${global.sgc}`);
        }
      } catch (error) {
        console.error('Terjadi Error, Id Group Kamu Di setting.js Tidak Valid.\nHarap Masukkan Id Yang Valid');
      }
    }

    async function delLogDebug() {
      try {
        const errorLogPath = './lib-signal/debuging/log-error.json';
        if (!fs.existsSync(errorLogPath)) return
        let errorData;
        try {
          errorData = JSON.parse(fs.readFileSync(errorLogPath, 'utf8'));
        } catch (err) {
          return
        }
        if (!Array.isArray(errorData) || errorData.length < 100) return
        fs.writeFileSync(errorLogPath, '[]', 'utf8')
      } catch (e) {
        return
      }
    }
    delLogDebug()
    
    if (global.help.includes(command) && !isOwner && !m.key.fromMe) {
      if (db.data.users[m.sender].banned) return m.reply('Kamu telah dibanned!')
    }

    if (m.isGroup && db.data.chats[m.chat].gcbanned) {
      if (!isOwner) return
    }
    
    if (setting.gconly && !isGc && isCmd) {
    const allowedCommands = [
        "daftar", "mendaftar", "verify", "daftr", "verifikasi", "regristasi",
        "regmail", "regismail", "register", "regris", "intro",
        "stopmenfes", "tolakmenfes", "balasmenfes", "wwpc"
    ];
    if (!allowedCommands.includes(command) && !isOwner) {
        return m.reply('Bot Saat Ini Hanya Bisa Digunakan Di Dalam Group.')
    }
    }

    if (setting.pconly && !isPc && isCmd) {
      if (!isOwner) return
    }

    if (m.isGroup && db.data.chats[m.chat].mute) {
      if (!isAdmins && !isOwner) return
    }
    
    if (global.help.includes(command) && !m.key.fromMe && setting.antispams) {
      if (!isOwner) {
        if (antispam.isFiltered(m.chat)) return m.reply('*( Anti Spam )* Tolong berikan jeda 5 detik.')
        antispam.addFilter(m.chat)
      }
    }
  	
    if (command && setting.similarity) {
      let bestMatch = '';
      let highestSimilarity = 0;
      const filteredCommands = detectedCommands.filter(cmd => cmd.length === command.length);
      for (const cmd of filteredCommands) {
        const sim = similarity(command.toLowerCase(), cmd.toLowerCase());
        if (sim > highestSimilarity) {
          highestSimilarity = sim;
          bestMatch = cmd;
        }
      }
      let similarityPercentage = parseInt(highestSimilarity * 100);
      if (highestSimilarity >= similarityThreshold && command.toLowerCase() !== bestMatch.toLowerCase()) {
        lyrreact2()
        let response = `*${global.vtampt}[ COMMAND UNDEFINED ]${global.vtampt}*

Command yang kamu berikan salah. 
Mungkin ini yang kamu maksud:
-> ${_p+bestMatch}
-> Kemiripan: ${similarityPercentage}%`
        Lyrra.sendMessage(m.chat, {
          document: {
            url: thumb
          },
          mimetype: "image/png",
          pageCount: 2025,
          fileName: `${botname}`,
          fileLength: 100000000000000,
          jpegThumbnail: fs.readFileSync('./media/warn.jpg'),
          caption: response,
          contextInfo: {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: 143
            },
            businessMessageForwardInfo: {
              businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
            }
          },
          footer: `${wm}`,
          buttons: [{
            buttonId: `${_p+bestMatch}`,
            buttonText: {
              displayText: `${bestMatch}`
            }
          }],
          headerType: 1,
          viewOnce: true
        }, {
          quoted: m
        });
      }
    }
    
    if (global.help.includes(command) && setting.onlyRegister) {
      if (
        !["daftar", "mendaftar", "verify", "daftr", "verifikasi", "regristasi", "regmail", "regismail", "register", "regris", "intro", "stopmenfes", "tolakmenfes", "balasmenfes"].includes(command) &&
        !isOwner &&
        !isAdmins
      ) {
        if (!db.data.users[m.sender].daftar) {
          return m.reply(`Daftar terlebih dahulu\nuntuk mengakses fitur ini\n\n*Contoh : .daftar*`);
        }
      }
    }
    
    if (setting.autoread) {
      Lyrra.readMessages([m.key])
    }
    
    if (global.help.includes(command) && setting.autorecording) {
      Lyrra.sendPresenceUpdate('recording', from)
      setTimeout(() => {
        Lyrra.sendPresenceUpdate('paused', from)
      }, 2000)
    }
    
    if (global.help.includes(command) && setting.autotyping) {
      Lyrra.sendPresenceUpdate('composing', from)
      setTimeout(() => {
        Lyrra.sendPresenceUpdate('paused', from)
      }, 2000)
    }
    
    if (global.help.includes(command) && setting.autolimit) {
      if (!isOwner) {
        if (db.data.users[m.sender].limit < 1) return m.reply(`Limit kamu sudah habis`)
        db.data.users[m.sender].limit -= 1
      }
    }
    
    async function registerAuto() {
      const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))

      global.Command = global.Command || {};

      try {
        let sender = m.sender;
        let rawText = m.text;
        let text = rawText.trim();

        if (text.toLowerCase() === `${prefix}` + "verify") {
          if (db.data.users[m.sender].daftar) return m.reply('Kamu sudah terdaftar!')
          if (global.Command[sender]) {
            return m.reply("Anda sedang dalam proses pendaftaran! Selesaikan dulu atau ketik *batal* untuk membatalkan.");
          }

          global.Command[sender] = {
            step: 1,
            data: {}
          };
          await delay(500);
          return m.reply("Masukkan nama :");
        }

        let userState = global.Command[sender];

        if ((text.toLowerCase() === "batal" || text.toLowerCase() === `${prefix}batal`) && userState) {
          delete global.Command[sender];
          return m.reply("Pendaftaran dibatalkan.");
        }

        if (!userState) return

        let trimmedText = text.trim();

        if (userState.step === 1) {
          let nama = trimmedText;
          if (!nama || nama.length < 2) {
            return await m.reply("Nama tidak boleh kosong atau terlalu pendek.");
          }

          if (nama.length > 20) return m.reply(`Karakter terbatas, max 20!`)
          if (/[^a-zA-Z0-9 ]/.test(nama)) return m.reply("Nama harus berupa teks!");

          userState.data.nama = nama;
          userState.step = 2;
          await delay(500);
          return m.reply(`Nama kamu: ${nama}\n\nSekarang, masukkan umur :`);
        }

        if (userState.step === 2) {
          let umur = trimmedText;
          if (!/^\d+$/.test(umur)) {
            return await m.reply("Umur wajib berupa angka.");
          }
          if (umur < 10) return m.reply(`*Umur Kamu Belum Mencukupi!*`)
          if (umur > 30) return m.reply(`*Kamu Terlalu Tua!*`)

          userState.data.umur = parseInt(umur, 10);
          userState.step = 3;
          await delay(500);
          return m.reply(`Umur kamu: ${umur}\n\nSekarang, masukkan gender (cowo/cewe)`);
        }

        if (userState.step === 3) {
          let gender = trimmedText.toLowerCase();
          if (gender !== "cowo" && gender !== "cewe") {
            return await m.reply('Gender hanya boleh "cowo" atau "cewe".');
          }

          userState.data.gender = gender;
          db.data.users[sender] = userState.data;
          delete global.Command[sender];
          db.data.users[sender].saldo += 5000
          db.data.users[sender].limit += 50
          db.data.users[sender].glimit += 30
          db.data.users[sender].daftar = true

          await delay(500);
          return m.reply(
            `✅ Pendaftaran berhasil! 🎉\n\n📌 *Data Anda:*\n- *Nama :* ${userState.data.nama}\n- *Umur :* ${userState.data.umur}\n- *Gender :* ${userState.data.gender}\n\n*Bonus Verifikasi*\n- + Rp 5000\n- + 50 Limit\n- + 30 Game Limit`
          );
        }
      } catch (error) {
        console.error("Terjadi kesalahan:", error);
        m.reply("Terjadi kesalahan, silakan coba lagi.");
        delete global.Command[m.sender];
      }
    }
    registerAuto()
    
    if (!isGc && isCmd && !m.key.fromMe) {
      db.data.users[m.sender].pctime = new Date().getTime();
    }

    if (!isGc && !isCmd && !m.key.fromMe && m.chat.includes('@s.whatsapp.net')) {
      const lastInteraction = new Date().getTime() - db.data.users[m.sender].pctime;
      if (lastInteraction > 21600000) {
        db.data.users[m.sender].pctime = new Date().getTime();

        Lyrra.sendMessage(m.chat, {
          text: `Haii @${m.sender.replace(/[^0-9]/g, '')} 👋\n\nAda yang bisa dibantu kak?`,
          contextInfo: {
            mentionedJid: [m.sender]
          },
          footer: wm,
          buttons: [{
              buttonId: `${_p}menu`,
              buttonText: {
                displayText: `Menu`
              },
              type: 1
            },
            {
              buttonId: `${_p}ping`,
              buttonText: {
                displayText: `Ping`
              },
              type: 1
            }
          ],
          viewOnce: true,
          headerType: 6
        }, {
          quoted: m
        });
      }
    }

    async function menuv1(teks) {
      await Lyrra.sendMessage(
        m.chat, {
          document: {
            url: thumb
          },
          mimetype: "image/png",
          pageCount: 2025,
          fileName: `${botname}`,
          fileLength: 100000000000000,
          jpegThumbnail: fs.readFileSync('./media/thumbnail1.jpg'),
          caption: teks,
          contextInfo: {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            externalAdReply: {
              containsAutoReply: true,
              mediaType: 1,
              mediaUrl: ``,
              renderLargerThumbnail: true,
              showAdAttribution: true,
              sourceUrl: ``,
              thumbnailUrl: `${global.thumb}`,
              title: `${botname.toUpperCase()}`,
              body: `${ucapanWaktu} kak`,
              mentionedJid: [sender],
              isForwarded: true,
            },
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: 143
            },
            businessMessageForwardInfo: {
              businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
            }
          },
          footer: `${wm}`,
          buttons: [{
              buttonId: `${_p}script`,
              buttonText: {
                displayText: 'Script'
              },
              type: 1,
            },
            {
              buttonId: `${_p}owner`,
              buttonText: {
                displayText: 'Owner'
              },
              type: 1,
            },
            {
              buttonId: 'action',
              buttonText: {
                displayText: 'interactiveMeta'
              },
              type: 4,
              nativeFlowInfo: {
                name: 'single_select',
                paramsJson: JSON.stringify({
                  title: 'Select Menu',
                  sections: [{
                      title: "List Menu",
                      highlight_label: "Sering Dipakai",
                      rows: [{
                        "title": "All Menu",
                        "description": "Menampilkan All Menu🌿",
                        "id": `${_p}allmenu`,
                      }]
                    },
                    {
                      title: "List Menu Utama",
                      highlight_label: "List Kategori",
                      rows: [{
                          "title": "List Menu",
                          "description": "Menampilkan List Menu🔎",
                          "id": `${_p}listmenu`
                        },
                        {
                          "title": "Owner Menu",
                          "description": "Menampilkan Owner Menu👑",
                          "id": `${_p}ownermenu`
                        },
                        {
                          "title": "Group Menu",
                          "description": "Menampilkan Group Menu👥",
                          "id": `${_p}groupmenu`
                        }
                      ]
                    },
                    {
                      title: "Menu Premium",
                      highlight_label: "VVIP ACCESS",
                      rows: [{
                        "title": "Premium Menu",
                        "description": "Menampilkan Menu Premium✨",
                        "id": `${_p}menuprem`
                      }]
                    },
                    {
                      title: "List Main Menu",
                      highlight_label: "Favorite",
                      rows: [{
                          "title": "Rpg Menu",
                          "description": "Menampilkan Rpg Menu⚔️",
                          "id": `${_p}rpgmenu`
                        },
                        {
                          "title": "Games Menu",
                          "description": "Menampilkan Games Menu🎮",
                          "id": `${_p}gamesmenu`
                        },
                        {
                          "title": "Main Menu",
                          "description": "Menampilkan Main Menu🕹️",
                          "id": `${_p}mainmenu`
                        },
                        {
                          "title": "Fun Menu",
                          "description": "Menampilkan Fun Menu😂",
                          "id": `${_p}funmenu`
                        },
                        {
                          "title": "Menfes Menu",
                          "description": "Menampilkan Menfes Menu📱",
                          "id": `${_p}menfesmenu`
                        },
                        {
                          "title": "Push Menu",
                          "description": "Menampilkan Ngepush Menu⏩",
                          "id": `${_p}ngepushmenu`
                        }
                      ]
                    },
                    {
                      title: "List Digital Menu",
                      highlight_label: "Server Panel",
                      rows: [{
                          "title": "Cpanel Menu",
                          "description": "Menampilkan Cpanel Menu🗃️",
                          "id": `${_p}cpanelmenu`
                        },
                        {
                          "title": "Store Menu",
                          "description": "Menampilkan Store Menu🛍️",
                          "id": `${_p}storemenu`
                        }
                      ]
                    },
                    {
                      title: "Intelijen Artifisial (Ai)",
                      highlight_label: "Ai Technology",
                      rows: [{
                        "title": "Chat Ai Menu",
                        "description": "Menampilkan ChatAI Menu🤖",
                        "id": `${_p}chataimenu`
                      }]
                    },
                    {
                      title: "List Menu Lainnya",
                      highlight_label: "Favorite",
                      rows: [{
                          "title": "Downloader Menu",
                          "description": "Menampilkan Download Menu📥",
                          "id": `${_p}downloadmenu`
                        },
                        {
                          "title": "Quotes Menu",
                          "description": "Menampilkan Quotes Menu🖊️",
                          "id": `${_p}quotesmenu`
                        },
                        {
                          "title": "Search Menu",
                          "description": "Menampilkan Search Menu🔎",
                          "id": `${_p}searchmenu`
                        },
                        {
                          "title": "Nsfw Menu",
                          "description": "Menampilkan NFSW Menu🔞",
                          "id": `${_p}nsfwmenu`
                        },
                        {
                          "title": "Ephoto Menu",
                          "description": "Menampilkan Ephoto Menu🖼️",
                          "id": `${_p}ephotomenu`
                        },
                        {
                          "title": "Cecan Menu",
                          "description": "Menampilkan Cecan Menu🙆🏻‍♀️",
                          "id": `${_p}cecanmenu`
                        },
                        {
                          "title": "Tools Menu",
                          "description": "Menampilkan Tools Menu🔖",
                          "id": `${_p}toolsmenu`
                        },
                        {
                          "title": "Voice Menu",
                          "description": "Menampilkan Voice Menu🎙️",
                          "id": `${_p}voicemenu`
                        },
                        {
                          "title": "Islamic Menu",
                          "description": "Menampilkan Islamic Menu☪️",
                          "id": `${_p}islammenu`
                        },
                        {
                          "title": "Maker Menu",
                          "description": "Menampilkan Maker Menu✍🏻",
                          "id": `${_p}makermenu`
                        },
                        {
                          "title": "Stalk Menu",
                          "description": "Menampilkan Stalk Menu🪄",
                          "id": `${_p}stalkmenu`
                        },
                        {
                          "title": "Anime Menu",
                          "description": "Menampilkan Anime Menu⛩️",
                          "id": `${_p}animemenu`
                        },
                        {
                          "title": "Others Menu",
                          "description": "Menampilkan Others Menu🎁",
                          "id": `${_p}othersmenu`
                        }
                      ]
                    },
                    {
                      title: "Bot Script",
                      highlight_label: "Script Bot Premium",
                      rows: [{
                          "title": "Bot Script",
                          "description": "Bot Script ?💳",
                          "id": `${_p}script`
                        }
                      ],
                    },
                  ],
                }),
              },
            },
          ],
          headerType: 1,
          viewOnce: true
        }, {
          quoted: m
        });
    }
    
let comands = command
if (isMedia && m.msg?.fileSha256) {
    let mediaHash = Array.from(m.msg.fileSha256).toString()
    let mediaData = db.data.media?.[mediaHash]

    if (mediaData && mediaData.text) {
        let fullText = mediaData.text.trim()
        m.text = fullText
        m.body = fullText
        m.args = fullText.split(/\s+/).slice(1)
        comands = fullText.startsWith(prefix) 
            ? fullText.slice(prefix.length).split(/\s+/)[0].toLowerCase() 
            : fullText.split(/\s+/)[0].toLowerCase()
        m.command = comands
    }
}

    switch (comands) {

    case 'joinrpg': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (db.data.erpg[m.sender].rpg) return m.reply(`Kamu Telah Join Sebelumnya`)
      db.data.erpg[m.sender].rpg = true
      let joinedrpg = `*GAME RPG STARTED*\n\nKamu telah login RPG-Game, sekarang kamu dapat menggunakan command RPG`
      await Lyrra.sendMessage(m.chat, {
        text: joinedrpg,
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 9999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: chjid + "@newsletter",
            serverMessageId: null,
            newsletterName: `${wm}`
          },
          externalAdReply: {
            title: "RPG-GAME (Pirate Adventure)",
            body: 'Pirate adventure in search of riches',
            thumbnailUrl: "https://telegra.ph/file/d661d7829411b8bff9f5f.jpg",
            sourceUrl: "-",
            mediaType: 1,
            renderLargerThumbnail: true
          }
        }
      }, {
        quoted: m
      })
    }
    break

    case 'exitrpg': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      db.data.erpg[m.sender].rpg = false
      let joinedrpg = `*GAME RPG EXIT*\n\nKamu telah exit RPG-Game, sekarang kamu tidak dapat menggunakan command RPG`
      await Lyrra.sendMessage(m.chat, {
        text: joinedrpg,
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 9999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: chjid + "@newsletter",
            serverMessageId: null,
            newsletterName: `${wm}`
          },
          externalAdReply: {
            title: "RPG-GAME EXIT",
            body: '-',
            thumbnailUrl: "https://telegra.ph/file/1c66154afd9707a84a4a3-1428c0a054c1effa10.jpg",
            sourceUrl: "-",
            mediaType: 1,
            renderLargerThumbnail: true
          }
        }
      }, {
        quoted: m
      })
    }
    break

    case 'wikwik': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].stamina <= 15) return m.reply(`Kamu tidak bisa ewe anak orang, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nPulihkan stamina menggunakan potion,\nContoh : .heal`)
      if (!q) return m.reply(`Contoh: ${p_c} Lyrra`)
      const argsLower = args.map(arg => arg.toLowerCase());
      const petarung1 = argsLower[0];
      const petarung2 = argsLower[1];
      const totalRounds = 8;
      let ronde = 1;
      let nyawaPetarung1 = 200;
      let nyawaPetarung2 = 200;

      let result = `🫶 Wikwik antara ${db.data.users[m.sender].nama} dan ${args[0]} dimulai!\n\n`;

      while (ronde <= totalRounds && nyawaPetarung1 > 0 && nyawaPetarung2 > 0) {
        const pukulan = [
          'ajul gedang', 'gaya marmot', 'gaya roket', 'gaya kucing', 'gaya katak'
        ];

        const pilihanPetarung1 = pukulan[Math.floor(Math.random() * pukulan.length)];
        const pilihanPetarung2 = pukulan[Math.floor(Math.random() * pukulan.length)];

        const damagePetarung1 = Math.floor(Math.random() * 50) + 1;
        const damagePetarung2 = Math.floor(Math.random() * 50) + 1;

        result += `💦 Ronde ${ronde}\n`;
        result += `${db.data.users[m.sender].nama} stamina: ${nyawaPetarung1}\n`;
        result += `${args[0]} stamina: ${nyawaPetarung2}\n`;
        result += `${db.data.users[m.sender].nama}: ${pilihanPetarung1}\n`;
        result += `${args[0]}: ${pilihanPetarung2}\n\n`;

        if (pilihanPetarung1 === pilihanPetarung2) {
          result += `⚔️ Wikwik sedang berlangsung melakukan gaya yang sama! blom ada yang keluar sama sekali.\n`;
        } else {
          result += `💦 ${db.data.users[m.sender].nama} melakukan ${pilihanPetarung1} dan ${args[0]} melakukan ${pilihanPetarung2}!\n`;
          nyawaPetarung1 -= pilihanPetarung2 === 'jab' ? damagePetarung1 : damagePetarung1 + 10;
          nyawaPetarung2 -= pilihanPetarung1 === 'jab' ? damagePetarung2 : damagePetarung2 + 10;
          result += `💔 ${db.data.users[m.sender].nama} menerima jilmek ${nyawaPetarung1 >= 0 ? damagePetarung1 : 0}!\n`;
          result += `💔 ${args[0]} menerima spong ${nyawaPetarung2 >= 0 ? damagePetarung2 : 0}!\n\n--------------------------------------------------\n`;
        }

        ronde++;
      }

      result += `\n⏱️ Wikwik akhirnya berakhir!\n`;
      result += `${db.data.users[m.sender].nama} stamina akhir: ${nyawaPetarung1}\n`;
      result += `${args[0]} stamina akhir: ${nyawaPetarung2}\n`;

      if (nyawaPetarung1 > nyawaPetarung2) {
        result += `👙 ${db.data.users[m.sender].nama} memenangkan pertandingan dengan keluar cairan yang lebih banyak!\n`;
      } else if (nyawaPetarung2 > nyawaPetarung1) {
        result += `🩲 ${args[0]} memenangkan pertandingan dengan keluar cairan yang lebih banyak!\n`;
      } else {
        result += `👙💦 Pertandingan berakhir imbang! Kedua yang wikwik memiliki stamina yang sama.\n`;
      }
      db.data.erpg[m.sender].stamina -= 50
      await Lyrra.sendTextWithMentions(m.chat, result, m)
    }
    break

    case 'ngojek':
    case 'ojek': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (!text) return m.reply(`Contoh: ${p_c} lampung|Jakarta\n\n*PENJELASAN*\n${p_c} [dari]|[tujuan] / Lampung ke Jakarta`)
      if (db.data.erpg[m.sender].stamina < 1) return m.reply(`Kamu Lemah, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nKetik _.heal_`)
      const arg1 = args.join(" ")
      const arg2 = arg1.split("|")[0];
      const arg3 = arg1.split("|")[1];
      if (!arg2) return !0
      if (!arg3) return !0
      let hah = ["Udin", "Yono", "Agus", "Asep", "Yanto", "Ahmad", "Riski", "Ridho", "Egy", "Pegi", "Rehan", "Yanti", "Putri", "Rahma", "Ica", "Caca", "Ayu", "Rini", "Lani", "Cika", "Nisa", "Alya", "Fikri", "Edo", "Angga", "Putra", "Yahya", "Fahri", "Fadil", "Aldo", "Resky", "Bela", "Kiki", "Zaki", "Reza", "Kak gem", "Uni bakwan"]
      let orgnya = hah[Math.floor(Math.random() * hah.length)]
      let tk1 = `${arg3}
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬜⬛
▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️⬛⬜⬜⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬜⬛
⬛⬜👤⬜⬜⬜⬜⬜⬅️🏍️⬜⬜⬜⬛
⬛🌳🏠⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
${arg2}

*INFORMASI*
Lokasi awal: ${arg2}
Lokasi tujuan: ${arg3}

${orgnya}: 👤 (penumpang)
Ojek: 🏍️ ${db.data.users[m.sender].nama}
Status: Ojek sedang diperjalanan`
      let tk2 = `${arg3}
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬜⬛
▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️⬛⬜⬜⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬜⬛
⬛⬜⬜⬜⬜🏍️➡️⬜⬜⬜⬜⬜⬜⬛
⬛🌳🏠⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
${arg2}

*INFORMASI*
Lokasi awal: ${arg2}
Lokasi tujuan: ${arg3}

${orgnya}: 👤 (penumpang)
Ojek: 🏍️ ${db.data.users[m.sender].nama}
Status: Mau ke lokasi tujuan (${randomNomor(17, 22)}%)`
      let tk3 = `${arg3}
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬜⬛
▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️⬛⬆️⬜⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛🏍️⬜⬛
⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛
⬛🌳🏠⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
${arg2}

*INFORMASI*
Lokasi awal: ${arg2}
Lokasi tujuan: ${arg3}

${orgnya}: 👤 (penumpang)
Ojek: 🏍️ ${db.data.users[m.sender].nama}
Status: Mau ke lokasi tujuan (${randomNomor(50, 57)}%)`
      let tk4 = `${arg3}
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜👤🏍️⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬜⬛
▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️⬛⬜⬜⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬜⬛
⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛
⬛🌳🏠⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
${arg2}

*INFORMASI*
Lokasi awal: ${arg2}
Lokasi tujuan: ${arg3}
Status: Sampai ke tujuan`
      let ong = randomNomor(500, 1000)
      let tk5 = `*BERHASIL NGOJEK*

Informasi penumpang
Nama: ${orgnya}
Ongkos: ${toRupiah(ong)}

Pendapatan Ngojek
Nama: ${db.data.users[m.sender].nama}
Money: ${toRupiah(ong)}`
      db.data.users[m.sender].saldo += ong
      edit5(tk1, tk2, tk3, tk4, tk5)
    }
    break

    case 'polisi': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].stamina <= 70) return m.reply(`Stamina Kamu ${db.data.erpg[m.sender].stamina}, Minimal Stamina 70% !!`)

      let uang = await randomNomor(7000, 25000)
      let stamina = await randomNomor(69, 85)

      let polic1 = 'Berpatroli...'
      let polic2 = 'Kamu menemukan maling...'
      let polic3 = 'Mengejar Maling'
      let polic4 = 'Maling Tertangkap.'
      let polic5 = `Kamu membawa maling tersebut
ke kantor polisi, dan
kamu mendapatkan

uang : ${uang}

Stamina terpakai: ${stamina}`
      edit5(polic1, polic2, polic3, polic4, polic5)
      db.data.users[m.sender].saldo += uang
      db.data.erpg[m.sender].stamina -= stamina
    }
    break

    case 'makan': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)

      let waktuu = await clockString(new Date() - db.data.erpg[m.sender].lastmakan)
      if (new Date() - db.data.erpg[m.sender].lastmakan < 14400000) return m.reply(`Kamu Baru Saja Makan, ${waktuu} Yang Lalu, Kamu dapat Makan Lagi Setelah 4 Jam Berikutnya.`)

      let drhstam = await randomNomor(65, 95)
      m.reply(`Kamu makan sampai kenyang
Darah dan stamina kamu bertambah
sebanyak ${drhstam}%`)
      db.data.erpg[m.sender].darahuser += drhstam
      db.data.erpg[m.sender].stamina += drhstam
      db.data.erpg[m.sender].lastmakan = new Date * 1
    }
    break

    case 'turu':
    case 'sleep':
    case 'tidur': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)

      let waktuu = await clockString(new Date() - db.data.erpg[m.sender].lasttidur)
      if (new Date() - db.data.erpg[m.sender].lasttidur < 14400000) return m.reply(`Kamu Baru Saja Tidur, ${waktuu} Yang Lalu, Kamu dapat Tidur Lagi Nanti.`)

      let drhstam = await randomNomor(70, 100)
      let tidur = await randomNomor(3, 14)
      m.reply(`Kamu tidur selama ${tidur} jam
Darah dan stamina kamu bertambah
sebanyak ${drhstam}%`)
      db.data.erpg[m.sender].darahuser += drhstam
      db.data.erpg[m.sender].stamina += drhstam
      db.data.erpg[m.sender].lasttidur = new Date * 1
    }
    break

    case 'ngeroket':
    case 'roket': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      let waktuu = await clockString(new Date() - db.data.erpg[m.sender].lastrocket)
      if (new Date() - db.data.erpg[m.sender].lastrocket < 259200000) return m.reply(`Kamu Baru Saja Ke bulan, ${waktuu} Yang Lalu, Kamu dapat pergi Lagi Nanti.`)

      if (db.data.erpg[m.sender].darahuser < 1) return m.reply('Kamu Lemah, Silahkan Sembuhkan Menggunakan Ramuan/Makanan\n\nKetik _.heal_')

      if (db.data.erpg[m.sender].darahuser <= 70) return m.reply(`Health Kamu ${db.data.erpg[m.sender].darahuser}%, Minimal health 70% !!`)
      if (db.data.erpg[m.sender].stamina <= 70) return m.reply(`Stamina Kamu ${db.data.erpg[m.sender].stamina}, Minimal Stamina 70% !!`)

      let saldo = await randomNomor(15000, 70000)
      let usrexp = await randomNomor(100, 500)
      let rokit = `🌕


▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▄▄▄▒▒▒█▒▒▒▒▄▒▒▒▒▒▒▒▒
▒█▀█▀█▒█▀█▒▒█▀█▒▄███▄▒
░█▀█▀█░█▀██░█▀█░█▄█▄█░
░█▀█▀█░█▀████▀█░█▄█▄█░
████████▀█████████████
🚀

👨‍🚀 Memulai penerbangan....`
      let rokit2 = `🌕


🚀
▒▒▄▄▄▒▒▒█▒▒▒▒▄▒▒▒▒▒▒▒▒
▒█▀█▀█▒█▀█▒▒█▀█▒▄███▄▒
░█▀█▀█░█▀██░█▀█░█▄█▄█░
░█▀█▀█░█▀████▀█░█▄█▄█░
████████▀█████████████

➕ Dalam penerbangan....`
      let rokit3 = `🌕🚀


▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▄▄▄▒▒▒█▒▒▒▒▄▒▒▒▒▒▒▒▒
▒█▀█▀█▒█▀█▒▒█▀█▒▄███▄▒
░█▀█▀█░█▀██░█▀█░█▄█▄█░
░█▀█▀█░█▀████▀█░█▄█▄█░
████████▀█████████████

➕ Sampai di tujuan....`
      let rokit4 = `🌕🚀

➕ Sukses Mendarat.... 👨‍🚀`

      let hsl = `
*—[ Hasil Ngroket ${db.data.users[m.sender].nama} ]—*
➕ 💹 Uang = [ ${saldo} ]
➕ ✨ Exp = [ ${usrexp} ]
➕ 🎁 Mendarat Selesai = +1`
      db.data.users[m.sender].saldo += saldo
      db.data.users[m.sender].exp += usrexp
      db.data.erpg[m.sender].darahuser -= 70
      db.data.erpg[m.sender].stamina -= 70
      db.data.erpg[m.sender].lastrocket = new Date * 1
      edit5(rokit, rokit2, rokit3, rokit4, hsl)
    }
    break

    case 'tfitem':
case 'tf':
case 'transfer': {
    if (isPremium) return m.reply(`User Premium Tidak Dapat Mentransfer.`);
    
    try {
        if (!text) return m.reply(`Format: ${p_c}transfer [saldo/limit/glimit] [@tag/nomor] [jumlah]\nContoh: ${p_c}transfer limit @628123456789 1000`);
        
        const args = text.split(' ');
        if (args.length < 3) return m.reply(`Format salah!\nGunakan: ${p_c}transfer [jenis] [target] [jumlah]`);
        
        const tfType = args[0].toLowerCase();
        const target = args[1];
        const nominal = args[2];
        
        if (!target) return m.reply(`Tag/Masukkan Nomor Target\nContoh: ${p_c}${args[0]} @tag/628123456789 1000`);
        
        if (isNaN(nominal)) return m.reply('Nominal harus berupa angka!');
        const amount = parseInt(nominal);
        if (amount <= 0) return m.reply('Jumlah transfer harus lebih dari 0!');
        
        const maxTransfer = 1000000;
        if (amount > maxTransfer) return m.reply(`Maksimal transfer adalah Rp. ${toRupiah(maxTransfer)}`);
        
        const receiver = target.replace(/[^0-9]/g, '') + '@s.whatsapp.net';
        if (!db.data.users[receiver]) return m.reply('Penerima tidak terdaftar!');
        
        if (!db.data.users[m.sender]) db.data.users[m.sender] = {};
        if (!db.data.users[receiver]) db.data.users[receiver] = {};
        
        switch (tfType) {
            case 'saldo': {
                if (typeof db.data.users[m.sender].saldo === 'undefined') db.data.users[m.sender].saldo = 0;
                if (typeof db.data.users[receiver].saldo === 'undefined') db.data.users[receiver].saldo = 0;
                
                const senderBalance = db.data.users[m.sender].saldo;
                if (senderBalance < amount) return m.reply(`Saldo tidak cukup! Saldo Anda: Rp. ${toRupiah(senderBalance)}`);
                
                db.data.users[m.sender].saldo -= amount;
                db.data.users[receiver].saldo += amount;
                
                return Lyrra.sendTextWithMentions(m.chat, 
                    `✅ *TRANSFER SALDO BERHASIL*\n\n` +
                    `• Pengirim: @${m.sender.split('@')[0]}\n` +
                    `• Penerima: @${receiver.split('@')[0]}\n` +
                    `• Jumlah: Rp. ${toRupiah(amount)}\n` +
                    `• Saldo Anda: Rp. ${toRupiah(db.data.users[m.sender].saldo)}`, 
                    m
                );
            }
            
            case 'limit': {
                if (typeof db.data.users[m.sender].limit === 'undefined') db.data.users[m.sender].limit = 0;
                if (typeof db.data.users[receiver].limit === 'undefined') db.data.users[receiver].limit = 0;
                
                const senderLimit = db.data.users[m.sender].limit;
                if (senderLimit < amount) return m.reply(`Limit tidak cukup! Limit Anda: ${senderLimit}`);
                
                db.data.users[m.sender].limit -= amount;
                db.data.users[receiver].limit += amount;
                
                return Lyrra.sendTextWithMentions(m.chat, 
                    `✅ *TRANSFER LIMIT BERHASIL*\n\n` +
                    `• Pengirim: @${m.sender.split('@')[0]}\n` +
                    `• Penerima: @${receiver.split('@')[0]}\n` +
                    `• Jumlah: ${amount} limit\n` +
                    `• Limit Anda: ${db.data.users[m.sender].limit}`, 
                    m
                );
            }
            
            case 'limitgame':
            case 'gamelimit':
            case 'glimit': {
                if (typeof db.data.users[m.sender].glimit === 'undefined') db.data.users[m.sender].glimit = 0;
                if (typeof db.data.users[receiver].glimit === 'undefined') db.data.users[receiver].glimit = 0;
                
                const senderGLimit = db.data.users[m.sender].glimit;
                if (senderGLimit < amount) return m.reply(`Game limit tidak cukup! Limit Anda: ${senderGLimit}`);
                
                db.data.users[m.sender].glimit -= amount;
                db.data.users[receiver].glimit += amount;
                
                return Lyrra.sendTextWithMentions(m.chat, 
                    `✅ *TRANSFER GAME LIMIT BERHASIL*\n\n` +
                    `• Pengirim: @${m.sender.split('@')[0]}\n` +
                    `• Penerima: @${receiver.split('@')[0]}\n` +
                    `• Jumlah: ${amount} game limit\n` +
                    `• Game Limit Anda: ${db.data.users[m.sender].glimit}`, 
                    m
                );
            }
            
            default:
                return m.reply(`*Jenis Transfer Tidak Valid*\n\n` +
                    `Tersedia:\n` +
                    `• saldo\n` +
                    `• limit\n` +
                    `• glimit\n\n` +
                    `Contoh: ${p_c} limit @tag 1000`);
        }
    } catch (err) {
        console.error('Transfer Error:', err);
        return m.reply('Terjadi kesalahan saat memproses transfer!');
    }
}
break

    case 'nyampah': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)

      let botol = await randomNomor(15, 46)
      let bulu = await randomNomor(5, 36)
      let kain = await randomNomor(3, 14)
      let kardus = await randomNomor(5, 30)
      let kaleng = await randomNomor(9, 37)
      let plastik = await randomNomor(20, 56)
      let gelas = await randomNomor(5, 19)
      let health = await randomNomor(15, 40)

      let waktuu = await clockString(new Date() - db.data.erpg[m.sender].sampahtime)
      if (new Date() - db.data.erpg[m.sender].sampahtime < 18000000) return m.reply(`Kamu Baru Saja Nyampah ${waktuu} Yang Lalu, Silahkan Tunggu 5 Jam Setelah Terakhir Kali Nyampah`)

      db.data.erpg[m.sender].bulu += bulu
      db.data.erpg[m.sender].kain += kain
      db.data.erpg[m.sender].botol += botol
      db.data.erpg[m.sender].kardus += kardus
      db.data.erpg[m.sender].kaleng += kaleng
      db.data.erpg[m.sender].gelas += gelas
      db.data.erpg[m.sender].plastik += plastik
      db.data.erpg[m.sender].darahuser -= health
      db.data.erpg[m.sender].sampahtime = new Date * 1

      m.reply(`*–––––– NYAMPAH ––––––*

Items Didapat
  ${vircion} • Botol: ${botol}
  ${vircion} • Kain: ${kain}
  ${vircion} • Bulu: ${bulu}
  ${vircion} • Kardus: ${kardus}
  ${vircion} • Kaleng: ${kaleng}
  ${vircion} • Gelas: ${gelas}
  ${vircion} • Plastik: ${plastik}
  
Stamina Berkurang -${health}`)
    }
    break

    case 'skillselect':
    case 'selectskill': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      const user = db.data.erpg[m.sender].skillselect
      const skill = ["swordmaster", "necromancer", "witch", "Archer", "magicswordmaster", "thief", "shadow"]
      const skil = text.trim().toLowerCase()
      if (!skill.includes(skil)) return m.reply(`Select skill yang ingin kamu gunakan. 

${skill.map(skil => `› ${skil}`).join('\n')}.

Example: ${command} necromancer

*Note!! :* 
Kamu hanya bisa memilih skill 1x selebihnya 
tidak akan bisa memilih/ganti lagi`)
      if (!user || !user.skill) {
        db.data.erpg[m.sender].skillselect = skil
        m.reply(`Anda telah memilih Skill ${skil}`)
      } else {
        m.reply(`Anda Sudah Punya skill ${user.skill}. Tidak bisa diganti`)
      }
    }
    break

    case 'crafting':
    case 'craft': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (text.includes('-')) return m.reply('Nominal Tidak valid!!');
      if (args[0] === "kain") {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya!*\n\nContoh:\n.craft kain 1\n\nUntuk Membuat 1 Lembar Kain Diperlukan *2 Bulu Wolf*.\n\nSilahkan Berburu Terlebih Dahulu!`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka!*\n\nContoh:\n.craft kain 1\n\nUntuk Membuat 1 Lembar Kain Diperlukan *2 Bulu Wolf*.\n\nSilahkan Berburu Terlebih Dahulu!`)
        let bulu = Number(parseInt(args[1]) * 2)
        if (db.data.erpg[m.sender].bulu < bulu) return m.reply(`*Bulu Wol Kamu (${db.data.erpg[m.sender].bulu}) Tidak Cukup Untuk Membuat ${args[1]} Lembar Kain*\n\nUntuk Membuat 1 Lembar Kain Diperlukan *2 Bulu Wolf*.\n\nSilahkan Berburu Terlebih Dahulu!`)
        db.data.erpg[m.sender].kain += parseInt(args[1])
        db.data.erpg[m.sender].bulu -= bulu
        m.reply(`Berhasil Membuat ${args[1]} Lembar Kain, Kamu Mempunyai ${db.data.erpg[m.sender].bulu} Bulu Lagi`)
      } else if (args[0] === "kapal") {
        if (db.data.erpg[m.sender].kapal) return m.reply('Kamu Sudah Memiliki Kapal!')
        let besi = Number(20)
        let kayu = Number(50)
        let kain = Number(2)
        if (db.data.erpg[m.sender].besi < besi) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Membuat Kapal*\n\nUntuk Membuat Kapal Diperlukan *20 Besi, 50 Kayu, 2 Kain*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        if (db.data.erpg[m.sender].kayu < kayu) return m.reply(`*Kayu Kamu (${db.data.erpg[m.sender].kayu}) Tidak Cukup Untuk Membuat Kapal*\n\nUntuk Membuat Kapal Diperlukan *20 Besi, 50 Kayu, 2 Kain*.\n\nSilahkan Nebang/Adventure Terlebih Dahulu!`)
        if (db.data.erpg[m.sender].kain < kain) return m.reply(`*Kain Kamu (${db.data.erpg[m.sender].kain}) Tidak Cukup Untuk Membuat Kapal*\n\nUntuk Membuat Kapal Diperlukan *20 Besi, 50 Kayu, 2 Kain*.\n\nSilahkan Crafting Kain Terlebih Dahulu!`)
        db.data.erpg[m.sender].kapal = true
        db.data.erpg[m.sender].besi -= besi
        db.data.erpg[m.sender].kayu -= kayu
        db.data.erpg[m.sender].kain -= kain
        let kapal = `*Berhasil Membuat Kapal!*\n\nSisa Sumberdaya:\n- Besi: ${db.data.erpg[m.sender].besi}\n- Kain: ${db.data.erpg[m.sender].kain}\n- Kayu: ${db.data.erpg[m.sender].kayu}\n\n`
        await Lyrra.sendMessage(m.chat, {
          text: kapal,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG-GAME (Pirate Ship)",
              body: 'Build a pirate ship',
              thumbnailUrl: "https://telegra.ph/file/6868733df8aa286682274.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      } else if (args[0] === "kapak") {
        if (db.data.erpg[m.sender].kapak) return m.reply('Kamu Sudah Memiliki Kapak!')
        let besi = Number(2)
        let kayu = Number(1)
        if (db.data.erpg[m.sender].besi < besi) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Membuat Kapak*\n\nUntuk Membuat Kapak Diperlukan *2 Besi, 1 Kayu*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        if (db.data.erpg[m.sender].kayu < kayu) return m.reply(`*Kayu Kamu (${db.data.erpg[m.sender].kayu}) Tidak Cukup Untuk Membuat Kapak*\n\nUntuk Membuat Kapak Diperlukan *2 Besi, 1 Kayu*.\n\nSilahkan Nebang/Adventure Terlebih Dahulu!`)
        db.data.erpg[m.sender].kapak = true
        db.data.erpg[m.sender].besi -= besi
        db.data.erpg[m.sender].kayu -= kayu
        let kapak = `*Berhasil Membuat Kapak!*\n\nSisa Sumberdaya:\n- Besi: ${db.data.erpg[m.sender].besi}\n- Kayu: ${db.data.erpg[m.sender].kayu}\n\n`
        await Lyrra.sendMessage(m.chat, {
          text: kapak,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG-GAME (Tools Crafting)",
              body: 'Making equipment',
              thumbnailUrl: "https://telegra.ph/file/454b6bac735cd5c9e860e.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      } else if (args[0] === "rumah") {
        if (!(`${db.data.erpg[m.sender].wilayahrumah}` === `${db.data.erpg[m.sender].wilayah}`)) return m.reply(`Kamu Saat Ini Sedang Di ${db.data.erpg[m.sender].wilayah}, Kamu Hanya Dapat Membangun Rumah Di Indonesia, Silahkan Kembali Berlayar Ke Indonesia Untuk Membangun Rumah`)
        if (!args[1]) return m.reply('*Masukan Jumlahnya!*\n\nContoh:\n.craft rumah 1\n\nUntuk Membuat 1 Rumah Diperlukan *6 Besi, 20 Kayu*. Pastikan Sumberdaya Kamu Cukup!')
        if (isNaN(args[1])) return m.reply('*Jumlah Harus Berupa Angka!*\n\nContoh:\n.craft rumah 1\n\nUntuk Membuat 1 Rumah Diperlukan *6 Besi, 20 Kayu*. Pastikan Sumberdaya Kamu Cukup!')
        let besi = Number(parseInt(args[1]) * 6)
        let kayu = Number(parseInt(args[1]) * 20)
        if (db.data.erpg[m.sender].besi < besi) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Membuat Rumah*\n\nUntuk Membuat Rumah Diperlukan *6 Besi, 20 Kayu*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        if (db.data.erpg[m.sender].kayu < kayu) return m.reply(`*Kayu Kamu (${db.data.erpg[m.sender].kayu}) Tidak Cukup Untuk Membuat Rumah*\n\nUntuk Membuat Rumah Diperlukan *6 Besi, 20 Kayu*.\n\nSilahkan Nebang/Adventure Terlebih Dahulu!`)
        db.data.erpg[m.sender].rumah += parseInt(args[1])
        db.data.erpg[m.sender].besi -= besi
        db.data.erpg[m.sender].kayu -= kayu
        let rumah = `*Berhasil Membuat ${args[1]} Rumah!*\n\nJumlah: ${args[1]} Rumah\nLetak: Indonesia\n\n`
        await Lyrra.sendMessage(m.chat, {
          text: rumah,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG-GAME (House Crafting)",
              body: 'Build a house to rest',
              thumbnailUrl: "https://telegra.ph/file/748043e987c3b38708d44.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      } else if (args[0] === "pickaxe") {
        if (db.data.erpg[m.sender].pickaxe) return m.reply('Kamu Sudah Memiliki Pickaxe!')
        let besi = Number(2)
        let kayu = Number(1)
        if (db.data.erpg[m.sender].besi < besi) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Membuat Pickaxe*\n\nUntuk Membuat Pickaxe Diperlukan *2 Besi, 1 Kayu*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        if (db.data.erpg[m.sender].kayu < kayu) return m.reply(`*Kayu Kamu (${db.data.erpg[m.sender].kayu}) Tidak Cukup Untuk Membuat Pickaxe*\n\nUntuk Membuat Pickaxe Diperlukan *2 Besi, 1 Kayu*.\n\nSilahkan Nebang/Adventure Terlebih Dahulu!`)
        db.data.erpg[m.sender].pickaxe = true
        db.data.erpg[m.sender].besi -= besi
        db.data.erpg[m.sender].kayu -= kayu
        let pickaxe = `*Berhasil Membuat Pickaxe!*\n\nSisa Sumberdaya:\n- Besi: ${db.data.erpg[m.sender].besi}\n- Kayu: ${db.data.erpg[m.sender].kayu}\n\n`
        await Lyrra.sendMessage(m.chat, {
          text: pickaxe,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG-GAME (Tools Crafting)",
              body: 'Making equipment',
              thumbnailUrl: "https://telegra.ph/file/9bd57cb7d6e04a4a51d7c.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      } else if (args[0] === "bajuzirah") {
        if (db.data.erpg[m.sender].bzirah) return m.reply('Kamu Sudah Memiliki Baju Zirah!')
        let besi = Number(6)
        let kayu = Number(2)
        let kain = Number(10)
        if (db.data.erpg[m.sender].besi < besi) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Membuat Baju Zirah*\n\nUntuk Membuat Baju Zirah Diperlukan *6 Besi, 2 Kayu, 10 Kain*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        if (db.data.erpg[m.sender].kayu < kayu) return m.reply(`*Kayu Kamu (${db.data.erpg[m.sender].kayu}) Tidak Cukup Untuk Membuat Baju Zirah*\n\nUntuk Membuat Baju Zirah Diperlukan *6 Besi, 2 Kayu, 10 Kain*.\n\nSilahkan Nebang/Adventure Terlebih Dahulu!`)
        if (db.data.erpg[m.sender].kain < kain) return m.reply(`*Kain Kamu (${db.data.erpg[m.sender].kain}) Tidak Cukup Untuk Membuat Baju Zirah*\n\nUntuk Membuat Baju Zirah Diperlukan *6 Besi, 2 Kayu, 10 Kain*.\n\nSilahkan Crafting Kain Terlebih Dahulu!`)
        db.data.erpg[m.sender].bzirah = true
        db.data.erpg[m.sender].besi -= besi
        db.data.erpg[m.sender].kayu -= kayu
        db.data.erpg[m.sender].kain -= kain
        let bajuzirah = `*Berhasil Membuat Baju Zirah!*\n\nSisa Sumberdaya:\n- Besi: ${db.data.erpg[m.sender].besi}\n- Kayu: ${db.data.erpg[m.sender].kayu}\n- Kain: ${db.data.erpg[m.sender].kain}\n\n`
        await Lyrra.sendMessage(m.chat, {
          text: bajuzirah,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG-GAME (Tools Crafting)",
              body: 'Making equipment',
              thumbnailUrl: "https://telegra.ph/file/2a8bf170a5b74aa808078.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      } else if (args[0] === "pedang") {
        if (db.data.erpg[m.sender].pedang) return m.reply('Kamu Sudah Memiliki Pedang!')
        let besi = Number(3)
        let kayu = Number(1)
        if (db.data.erpg[m.sender].besi < besi) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Membuat Pedang*\n\nUntuk Membuat Pedang Diperlukan *3 Besi, 1 Kayu*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        if (db.data.erpg[m.sender].kayu < kayu) return m.reply(`*Kayu Kamu (${db.data.erpg[m.sender].kayu}) Tidak Cukup Untuk Membuat Pedang*\n\nUntuk Membuat Pedang Diperlukan *3 Besi, 1 Kayu*.\n\nSilahkan Nebang/Adventure Terlebih Dahulu!`)
        db.data.erpg[m.sender].pedang = true
        db.data.erpg[m.sender].besi -= besi
        db.data.erpg[m.sender].kayu -= kayu
        let pedang = `*Berhasil Membuat Pedang!*\n\nSisa Sumberdaya:\n- Besi: ${db.data.erpg[m.sender].besi}\n- Kayu: ${db.data.erpg[m.sender].kayu}\n\n`
        await Lyrra.sendMessage(m.chat, {
          text: pedang,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG-GAME (Tools Crafting)",
              body: 'Making equipment',
              thumbnailUrl: "https://telegra.ph/file/0c245751d14b42fe7f3c0.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      } else {
        let craft = `*Apa Yang Ingin Kamu Buat?*

  ${vircion} • kapal
  ${vircion} • rumah
  ${vircion} • kapak
  ${vircion} • pickaxe
  ${vircion} • pedang
  ${vircion} • bajuzirah
  ${vircion} • kain

*Contoh:*
.craft kapak`
        await Lyrra.sendMessage(m.chat, {
          text: craft,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG-GAME (Crafting Item)",
              body: 'Make items for survival and adventure',
              thumbnailUrl: "https://telegra.ph/file/fed81e9a280d8a3965d6f.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      }
    }
    break

    case 'heal': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].potion < 1) return m.reply(`Potion Kamu Habis\nKetik .buy potion 1`)

      let health = await randomNomor(34, 89)
      let stamina = await randomNomor(55, .78)

      db.data.erpg[m.sender].potion -= 1
      db.data.erpg[m.sender].darahuser += health
      db.data.erpg[m.sender].stamina += stamina
      m.reply(`Berhasil Memulihkan Dengan Potion
Health: +${health}
Stamina: +${stamina}`)
    }
    break

    case 'mining': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (!db.data.erpg[m.sender].pickaxe) return m.reply('Kamu Tidak Memiliki pickaxe\nSilahkan Buat Terlebih Dahulu\n\nKetik _.craft_')
      if (db.data.erpg[m.sender].darahpickaxe < 1) return m.reply('☹️Pickaxe Kamu Rusak\nRawat Dulu Alat Tambangmu\n\nKetik _.rawat_')
      if (db.data.erpg[m.sender].stamina < 1) return m.reply(`Kamu Lemah, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nKetik _.heal_`)
      let besi = [2, 1, 6, 1, 0, 3, 7, 8, 3, 2, 0, 7, 1, 9]
      let batubara = [1, 1, 2, 1, 0, 6, 0, 0, 2, 5, 1, 0, 1, 0]
      let emas = [3, 2, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 2, 0]
      let perak = [2, 1, 3, 5, 0, 0, 0, 0, 0, 2, 1, 0, 8, 2]
      let diamond = [3, 2, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 2, 0]
      let emerald = [3, 2, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 2, 0]
      const besinyo = await pickRandom(besi)
      const batubaranyo = await pickRandom(batubara)
      const emasnyo = await pickRandom(emas)
      const peraknyo = await pickRandom(perak)
      const diamondnyo = await pickRandom(diamond)
      const emeraldnyo = await pickRandom(emerald)
      let mining = `*MINING ADVENTURE*\n\nItem Yang Didapat :\n  ${vircion} • Besi: ${besinyo}\n  ${vircion} • Emas: ${emasnyo}\n  ${vircion} • Perak: ${peraknyo}\n  ${vircion} • Batu Bara: ${batubaranyo}\nDiamond: ${diamondnyo}\nEmerald: ${emeraldnyo}\n\n_🧰 Disimpan Dalam Inventory..._\n_❤️ Darah Berkurang 20_\n_⛏️ Ketahanan Pickaxe ${db.data.erpg[m.sender].darahpickaxe}%_\n\n`
      await Lyrra.sendMessage(m.chat, {
        text: mining,
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 9999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: chjid + "@newsletter",
            serverMessageId: null,
            newsletterName: `${wm}`
          },
          externalAdReply: {
            title: "RPG-GAME (Mining Resource)",
            body: 'Mining natural resources',
            thumbnailUrl: "https://telegra.ph/file/4ca67ad95bce6afa1a0f2.jpg",
            sourceUrl: "-",
            mediaType: 1,
            renderLargerThumbnail: true
          }
        }
      }, {
        quoted: m
      })
      db.data.erpg[m.sender].darahpickaxe -= 20
      db.data.erpg[m.sender].besi += besinyo
      db.data.erpg[m.sender].emas += emasnyo
      db.data.erpg[m.sender].perak += peraknyo
      db.data.erpg[m.sender].batubara += batubaranyo
    }
    break
    case 'repair':
    case 'rawat': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      let rawat = args[0]
      switch (rawat) {
      case 'kapal':
        if (!db.data.erpg[m.sender].kapal) return m.reply(`*Kamu Gak Punya Kapal*\n\nUntuk Menggunakan Fitur Ini\nKamu Harus Mempunyai Kapal`)
        if (!db.data.erpg[m.sender].darahkapal < 1) return m.reply(`*Kapal Kamu Masih Bagus*`)
        if (db.data.erpg[m.sender].besi < 5) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Perbaikan Kapal*\n\nUntuk Perbaikan Kapal Diperlukan *5 Besi*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        if (db.data.erpg[m.sender].kayu < 10) return m.reply(`*Kayu Kamu (${db.data.erpg[m.sender].kayu}) Tidak Cukup Untuk Perbaikan Kapal*\n\nUntuk Perbaikan Kapal Diperlukan *10 Kayu*.\n\nSilahkan Nebang/Adventure Terlebih Dahulu!`)
        db.data.erpg[m.sender].besi -= 5
        db.data.erpg[m.sender].kayu -= 10
        db.data.erpg[m.sender].darahkapal = 100
        editp('Memperbaiki, Mohon Tunggu', 'Tahap Finishing', 'Done Perbaikan')
        break
      case 'pickaxe':
        if (!db.data.erpg[m.sender].pickaxe) return m.reply(`*Kamu Gak Punya Pickaxe*\n\nUntuk Menggunakan Fitur Ini\nKamu Harus Mempunyai Pickaxe`)
        if (!db.data.erpg[m.sender].darahpickaxe < 1) return m.reply(`*Pickaxe Kamu Masih Bagus*`)
        if (db.data.erpg[m.sender].besi < 1) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Perbaikan Pickaxe*\n\nUntuk Perbaikan Pickaxe Diperlukan *1 Besi*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        db.data.erpg[m.sender].besi -= 1
        db.data.erpg[m.sender].darahpickaxe = 100
        editp('Memperbaiki, Mohon Tunggu', 'Tahap Finishing', 'Done Perbaikan')
        break
      case 'kapak':
        if (!db.data.erpg[m.sender].kapak) return m.reply(`*Kamu Gak Punya Kapak*\n\nUntuk Menggunakan Fitur Ini\nKamu Harus Mempunyai Kapak`)
        if (!db.data.erpg[m.sender].darahkapak < 1) return m.reply(`*Kapak Kamu Masih Bagus*`)
        if (db.data.erpg[m.sender].besi < 1) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Perbaikan Kapak*\n\nUntuk Perbaikan Kapak Diperlukan *1 Besi*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        db.data.erpg[m.sender].besi -= 1
        db.data.erpg[m.sender].darahkapak = 100
        editp('Memperbaiki, Mohon Tunggu', 'Tahap Finishing', 'Done Perbaikan')
        break
      case 'armor':
        if (!db.data.erpg[m.sender].bzirah) return m.reply(`*Kamu Gak Punya Baju Zirah*\n\nUntuk Menggunakan Fitur Ini\nKamu Harus Mempunyai Baju Zirah`)
        if (!db.data.erpg[m.sender].darahbzirah < 1) return m.reply(`*Baju Zirah Kamu Masih Bagus*`)
        if (db.data.erpg[m.sender].besi < 2) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Perbaikan Armor*\n\nUntuk Perbaikan Armor Diperlukan *2 Besi*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        db.data.erpg[m.sender].besi -= 2
        db.data.erpg[m.sender].darahbzirah = 100
        editp('Memperbaiki, Mohon Tunggu', 'Tahap Finishing', 'Done Perbaikan')
        break
      case 'pedang':
        if (!db.data.erpg[m.sender].pedang) return m.reply(`*Kamu Gak Punya Pedang*\n\nUntuk Menggunakan Fitur Ini\nKamu Harus Mempunyai Pedang`)
        if (!db.data.erpg[m.sender].darahpedang < 1) return m.reply(`*Pedang Kamu Masih Bagus*`)
        if (db.data.erpg[m.sender].besi < 1) return m.reply(`*Besi Kamu (${db.data.erpg[m.sender].besi}) Tidak Cukup Untuk Perbaikan Pedang*\n\nUntuk Perbaikan Pedang Diperlukan *1 Besi*.\n\nSilahkan Mining/Adventure Terlebih Dahulu!`)
        db.data.erpg[m.sender].besi -= 1
        db.data.erpg[m.sender].darahpedang = 100
        editp('Memperbaiki, Mohon Tunggu', 'Tahap Finishing', 'Done Perbaikan')
        break
      default:
        let teks = `---------- » *PERBAIKAN* « ----------

*Pilih Barang Yang*
*Akan Di perbaiki*
  ${vircion} • kapal
  ${vircion} • pickaxe
  ${vircion} • kapak
  ${vircion} • armor
  ${vircion} • pedang

*Contoh:*
${p_c} kapak`
        Lyrra.sendMessage(m.chat, {
          text: teks,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG TOOLS REPAIR",
              body: 'Repairs and upgrades tools',
              thumbnailUrl: "https://telegra.ph/file/08e78c20afd16dcebb33d.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      }
    }
    break
    case 'menebang':
    case 'nebang': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (!db.data.erpg[m.sender].kapak) return m.reply('Kamu Tidak Memiliki Kapak, Silahkan Buat Terlebih Dahulu\n\nKetik _.craft_')
      if (db.data.erpg[m.sender].darahkapak < 1) return m.reply('☹️Kapak Kamu Rusak\nRawat Dulu Alat Tebangmu\n\nKetik _.rawat_')
      if (db.data.erpg[m.sender].stamina < 1) return m.reply(`Kamu Lemah, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nKetik _.heal_`)
      let kayu = await randomNomor(0, 20)
      db.data.erpg[m.sender].kayu += kayu
      db.data.erpg[m.sender].darahkapak -= 20
      m.reply(`*🌳 MENEBANG POHON 🌳*

Item Yang Didapat:
  ${vircion} • Kayu: ${kayu} (Hasil Tebang)
  ${vircion} • Kapak: -20 Healthy (Digunakan)`)
    }
    break

    case 'weekly':
    case 'mingguan': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      try {
        let waktuu = await clockString(new Date() - db.data.erpg[m.sender].weeklyclaim)
        if (new Date() - db.data.erpg[m.sender].weeklyclaim < 604800000) return m.reply(`Kamu Baru Saja Claim ${command}, ${waktuu} Yang Lalu, Claim Lagi Setelah 1 Minggu.`)
        let saldo = await randomNomor(1000, 10000)
        let limit = await randomNomor(20, 100)
        db.data.erpg[m.sender].weeklyclaim = new Date * 1
        db.data.users[m.sender].saldo += saldo
        db.data.users[m.sender].limit += limit
        m.reply(`Selamat Kamu Mendapatkan:\n\n*🎁 HADIAH*\n- + Rp ${saldo} \n- + ${limit} Limit\n\n`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan: ' + err);
      }
    }
    break

    case 'monthly':
    case 'bulanan': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      try {
        let waktuu = await clockString(new Date() - db.data.erpg[m.sender].monthlyclaim)
        if (new Date() - db.data.erpg[m.sender].monthlyclaim < 5184000000) return m.reply(`Kamu Baru Saja Claim ${command}, ${waktuu} Yang Lalu, Claim Lagi Setelah 1 Bulan.`)
        let saldo = await randomNomor(5000, 50000)
        let limit = await randomNomor(30, 200)
        db.data.erpg[m.sender].monthlyclaim = new Date * 1
        db.data.users[m.sender].saldo += saldo
        db.data.users[m.sender].limit += limit
        m.reply(`Selamat Kamu Mendapatkan:\n\n*🎁 HADIAH*\n- + Rp ${saldo} \n- + ${limit} Limit\n\n`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan: ' + err);
      }
    }
    break

    case 'yearly':
    case 'tahunan': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!isPremium) return onlyPrem();
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      try {
        let waktuu = await clockString(new Date() - db.data.erpg[m.sender].yearlyclaim)
        if (new Date() - db.data.erpg[m.sender].yearlyclaim < 31536000000) return m.reply(`Kamu Baru Saja Claim ${command}, ${waktuu} Yang Lalu, Claim Lagi Setelah 1 Tahun.`)
        let saldo = await randomNomor(600000, 6000000)
        let limit = await randomNomor(4000, 24000)
        db.data.erpg[m.sender].yearlyclaim = new Date * 1
        db.data.users[m.sender].saldo += saldo
        db.data.users[m.sender].limit += limit
        m.reply(`Selamat Kamu Mendapatkan:\n\n*🎁 HADIAH*\n- + Rp ${saldo} \n- + ${limit} Limit\n\n`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan: ' + err);
      }
    }
    break

    case 'berburu': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].stamina < 1) return m.reply(`Kamu Lemah, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nKetik _.heal_`)
      let darah = await randomNomor(45, 70)
      let domba = await randomNomor(0, 10)
      let sapi = await randomNomor(0, 10)
      let ayam = await randomNomor(0, 35)
      let banteng = await randomNomor(0, 10)
      let kambing = await randomNomor(0, 10)
      let kerbau = await randomNomor(0, 10)
      let babihutan = await randomNomor(0, 20)
      let monyet = await randomNomor(0, 10)
      let babi = await randomNomor(0, 17)
      let panda = await randomNomor(0, 7)
      let harimau = await randomNomor(0, 4)
      let gajah = await randomNomor(0, 3)
      let buaya = await randomNomor(0, 10)
      let buulu = domba + sapi + ayam
      let bulu = buulu / 2
      let waktuu = await clockString(new Date() - db.data.erpg[m.sender].burutime)
      if (new Date() - db.data.erpg[m.sender].burutime < 18000000) return m.reply(`Kamu Baru Saja Berburu ${waktuu} Yang Lalu, Silahkan Tunggu 5 Jam Setelah Terakhir Kali Berburu`)
      db.data.erpg[m.sender].burutime = new Date * 1
      db.data.erpg[m.sender].domba += domba
      db.data.erpg[m.sender].sapi += sapi
      db.data.erpg[m.sender].ayam += ayam
      db.data.erpg[m.sender].bulu += bulu
      db.data.erpg[m.sender].banteng += banteng
      db.data.erpg[m.sender].kambing += kambing
      db.data.erpg[m.sender].kerbau += kerbau
      db.data.erpg[m.sender].babihutan += babihutan
      db.data.erpg[m.sender].monyet += monyet
      db.data.erpg[m.sender].babi += babi
      db.data.erpg[m.sender].panda += panda
      db.data.erpg[m.sender].harimau += harimau
      db.data.erpg[m.sender].gajah += gajah
      db.data.erpg[m.sender].babihutan += buaya
      db.data.erpg[m.sender].darahuser -= darah
      m.reply(`*🏹 BERBURU 🏹*

Item Yang Didapat:
  ${vircion} • Domba: ${domba}
  ${vircion} • Sapi: ${sapi}
  ${vircion} • Ayam: ${ayam}
  ${vircion} • Banteng: ${banteng}
  ${vircion} • Kambing: ${kambing}
  ${vircion} • Kerbau: ${kerbau}
  ${vircion} • Babi Hutan: ${babihutan}
  ${vircion} • Monyet: ${monyet}
  ${vircion} • Babi: ${babi}
  ${vircion} • Panda: ${panda}
  ${vircion} • Harimau: ${harimau}
  ${vircion} • Gajah: ${gajah}
  ${vircion} • Bulu: ${bulu} (Hasil Pencabutan)

  ${vircion} • Darah Berkurang: ${darah}%
  
_Tunggu 5 jam untuk_
_berburu berikutnya_`)
    }
    break
    case 'adventure': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].darahuser < 1) return m.reply('Kamu Lemah, Silahkan Sembuhkan Menggunakan Ramuan/Makanan\n\nKetik _.heal_')
      if (db.data.erpg[m.sender].stamina < 1) return m.reply(`Kamu Lemah, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nKetik _.heal_`)
      var tuju = args.join(" ")
      let obj = ["villager", "zombie", "ghasts", "wither", "skeleton", "wolves"]
      let obje = await pickRandom(obj)
      let kayu = await randomNomor(15)
      let besi = await randomNomor(10)
      let rank = await randomNomor(100)
      let saldo = await randomNomor(2000)
      let perak = await randomNomor(10)
      let emerald = await randomNomor(5)
      let mythic = await randomNomor(7)
      let uncommon = await randomNomor(15)
      let common = await randomNomor(10)
      let diamond = await randomNomor(5)
      let legendary = await randomNomor(3)
      if (tuju === "savanah") {
        db.data.erpg[m.sender].darahuser -= 20
        let thumbadv = "https://telegra.ph/file/1b27b199f440cd69be0aa.jpg"
        let {
          key
        } = await Lyrra.sendMessage(m.chat, {
          text: 'Berpetualang, Mohon Tunggu...'
        }, {
          quoted: m
        })
        await sleep(3000)
        await Lyrra.sendMessage(m.chat, {
          text: `Kamu bertemu dengan ${obje}`,
          edit: key
        });
        await sleep(5000)
        await Lyrra.sendMessage(m.chat, {
          text: `Menjelajah...`,
          edit: key
        });
        await sleep(3000)
        let adv = `---------- » *ADVENTURE* « ----------

*📍 ${text}*
  ${vircion} • Kayu: ${kayu}
  ${vircion} • Besi: ${besi}
  ${vircion} • Rank: ${rank}
  ${vircion} • Uang: Rp ${saldo}

*Stamina berkurang -20*`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
        db.data.erpg[m.sender].kayu += kayu
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].rank += rank
        db.data.users[m.sender].saldo += saldo
      } else if (tuju === "dessert") {
        db.data.erpg[m.sender].darahuser -= 20
        let thumbadv = "https://telegra.ph/file/760e27568c0b2ccf07231.jpg"
        let {
          key
        } = await Lyrra.sendMessage(m.chat, {
          text: 'Berpetualang, Mohon Tunggu...'
        }, {
          quoted: m
        })
        await sleep(3000)
        await Lyrra.sendMessage(m.chat, {
          text: `Kamu bertemu dengan ${obje}`,
          edit: key
        });
        await sleep(5000)
        await Lyrra.sendMessage(m.chat, {
          text: `Menjelajah...`,
          edit: key
        });
        await sleep(3000)
        let adv = `---------- » *ADVENTURE* « ----------

*📍 ${text}*
  ${vircion} • Kayu: ${kayu}
  ${vircion} • Besi: ${besi}
  ${vircion} • Rank: ${rank}
  ${vircion} • Uang: Rp ${saldo}

*Stamina berkurang -20*`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
        db.data.erpg[m.sender].kayu += kayu
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].rank += rank
        db.data.users[m.sender].saldo += saldo
      } else if (tuju === "boreal forest") {
        db.data.erpg[m.sender].darahuser -= 20
        let thumbadv = "https://telegra.ph/file/1a528cf0c7e1eb0e74976.jpg"
        let {
          key
        } = await Lyrra.sendMessage(m.chat, {
          text: 'Berpetualang, Mohon Tunggu...'
        }, {
          quoted: m
        })
        await sleep(3000)
        await Lyrra.sendMessage(m.chat, {
          text: `Kamu bertemu dengan ${obje}`,
          edit: key
        });
        await sleep(5000)
        await Lyrra.sendMessage(m.chat, {
          text: `Menjelajah...`,
          edit: key
        });
        await sleep(3000)
        let adv = `---------- » *ADVENTURE* « ----------

*📍 ${text}*
  ${vircion} • Kayu: ${kayu}
  ${vircion} • Besi: ${besi}
  ${vircion} • Rank: ${rank}
  ${vircion} • Uang: Rp ${saldo}

*Stamina berkurang -20*`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
        db.data.erpg[m.sender].kayu += kayu
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].rank += rank
        db.data.users[m.sender].saldo += saldo
      } else if (tuju === "tropical forest") {
        db.data.erpg[m.sender].darahuser -= 20
        let thumbadv = "https://telegra.ph/file/bbc4d8eb053479d69e5f7.jpg"
        let {
          key
        } = await Lyrra.sendMessage(m.chat, {
          text: 'Berpetualang, Mohon Tunggu...'
        }, {
          quoted: m
        })
        await sleep(3000)
        await Lyrra.sendMessage(m.chat, {
          text: `Kamu bertemu dengan ${obje}`,
          edit: key
        });
        await sleep(5000)
        await Lyrra.sendMessage(m.chat, {
          text: `Menjelajah...`,
          edit: key
        });
        await sleep(3000)
        let adv = `---------- » *ADVENTURE* « ----------

*📍 ${text}*
  ${vircion} • Kayu: ${kayu}
  ${vircion} • Besi: ${besi}
  ${vircion} • Rank: ${rank}
  ${vircion} • Uang: Rp ${saldo}

*Stamina berkurang -20*`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
        db.data.erpg[m.sender].kayu += kayu
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].rank += rank
        db.data.users[m.sender].saldo += saldo
      } else if (tuju === "underground") {
        db.data.erpg[m.sender].darahuser -= 30
        let thumbadv = "https://telegra.ph/file/b7f11f5383cc421ff0ce8-93abbbb8e9f5ca6dc2.jpg"
        let {
          key
        } = await Lyrra.sendMessage(m.chat, {
          text: 'Berpetualang, Mohon Tunggu...'
        }, {
          quoted: m
        })
        await sleep(3000)
        await Lyrra.sendMessage(m.chat, {
          text: `Kamu bertemu dengan ${obje}`,
          edit: key
        });
        await sleep(5000)
        await Lyrra.sendMessage(m.chat, {
          text: `Menjelajah...`,
          edit: key
        });
        await sleep(3000)
        let adv = `---------- » *ADVENTURE* « ----------

*📍 ${text}*
  ${vircion} • Kayu: ${kayu}
  ${vircion} • Besi: ${besi}
  ${vircion} • Rank: ${rank}
  ${vircion} • Emerald: ${emerald}
  ${vircion} • Perak: ${perak}
  ${vircion} • Uang: Rp ${saldo}

*Stamina berkurang -30*`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
        db.data.erpg[m.sender].kayu += kayu
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].rank += rank
        db.data.users[m.sender].saldo += saldo
        db.data.erpg[m.sender].emerald += emerald
        db.data.erpg[m.sender].perak += perak
      } else if (tuju === "shadownland") {
        db.data.erpg[m.sender].darahuser -= 40
        let thumbadv = "https://telegra.ph/file/e70bbe68c4bad74b43311-006005796ede87da36.jpg"
        let {
          key
        } = await Lyrra.sendMessage(m.chat, {
          text: 'Berpetualang, Mohon Tunggu...'
        }, {
          quoted: m
        })
        await sleep(3000)
        await Lyrra.sendMessage(m.chat, {
          text: `Kamu bertemu dengan ${obje}`,
          edit: key
        });
        await sleep(5000)
        await Lyrra.sendMessage(m.chat, {
          text: `Menjelajah...`,
          edit: key
        });
        await sleep(3000)
        let adv = `---------- » *ADVENTURE* « ----------

*📍 ${text}*
  ${vircion} • Kayu: ${kayu}
  ${vircion} • Besi: ${besi}
  ${vircion} • Rank: ${rank}
  ${vircion} • Emerald: ${emerald}
  ${vircion} • Perak: ${perak}
  ${vircion} • Uang: Rp ${saldo}

*Stamina berkurang -40*`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
        db.data.erpg[m.sender].kayu += kayu
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].rank += rank
        db.data.users[m.sender].saldo += saldo
        db.data.erpg[m.sender].emerald += emerald
        db.data.erpg[m.sender].perak += perak
      } else if (tuju === "dragons peak") {
        db.data.erpg[m.sender].darahuser -= 55
        let thumbadv = "https://telegra.ph/file/514c00efd64770a6f9a0c-b16de076ca5d6870c0.jpg"
        let {
          key
        } = await Lyrra.sendMessage(m.chat, {
          text: 'Berpetualang, Mohon Tunggu...'
        }, {
          quoted: m
        })
        await sleep(3000)
        await Lyrra.sendMessage(m.chat, {
          text: `Kamu bertemu dengan ${obje}`,
          edit: key
        });
        await sleep(5000)
        await Lyrra.sendMessage(m.chat, {
          text: `Menjelajah...`,
          edit: key
        });
        await sleep(3000)
        let adv = `---------- » *ADVENTURE* « ----------

*📍 ${text}*
  ${vircion} • Kayu: ${kayu}
  ${vircion} • Besi: ${besi}
  ${vircion} • Rank: ${rank}
  ${vircion} • Emerald: ${emerald}
  ${vircion} • Perak: ${perak}
  ${vircion} • Mythic: ${mythic}
  ${vircion} • Uang: Rp ${saldo}

*Stamina berkurang -55*`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
        db.data.erpg[m.sender].kayu += kayu
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].rank += rank
        db.data.users[m.sender].saldo += saldo
        db.data.erpg[m.sender].emerald += emerald
        db.data.erpg[m.sender].perak += perak
        db.data.erpg[m.sender].mythic += mythic
      } else if (tuju === "dark abyss") {
        db.data.erpg[m.sender].darahuser -= 70
        let thumbadv = "https://telegra.ph/file/e46f1188841f2e285e5dc-b6e1799986b286d808.jpg"
        let {
          key
        } = await Lyrra.sendMessage(m.chat, {
          text: 'Berpetualang, Mohon Tunggu...'
        }, {
          quoted: m
        })
        await sleep(3000)
        await Lyrra.sendMessage(m.chat, {
          text: `Kamu bertemu dengan ${obje}`,
          edit: key
        });
        await sleep(5000)
        await Lyrra.sendMessage(m.chat, {
          text: `Menjelajah...`,
          edit: key
        });
        await sleep(3000)
        let adv = `---------- » *ADVENTURE* « ----------

*📍 ${text}*
  ${vircion} • Kayu: ${kayu}
  ${vircion} • Besi: ${besi}
  ${vircion} • Rank: ${rank}
  ${vircion} • Emerald: ${emerald}
  ${vircion} • Perak: ${perak}
  ${vircion} • Besi: ${besi}
  ${vircion} • Mythic: ${mythic}
  ${vircion} • Uncommon: ${uncommon}
  ${vircion} • Common: ${common}
  ${vircion} • Legendary: ${legendary}
  ${vircion} • Diamond: ${diamond}
  ${vircion} • Uang: Rp ${saldo}

*Stamina berkurang -70*`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
        db.data.erpg[m.sender].kayu += kayu
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].rank += rank
        db.data.users[m.sender].saldo += saldo
        db.data.erpg[m.sender].emerald += emerald
        db.data.erpg[m.sender].perak += perak
        db.data.erpg[m.sender].mythic += mythic
        db.data.erpg[m.sender].uncommon += uncommon
        db.data.erpg[m.sender].common += common
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].diamond += diamond
        db.data.erpg[m.sender].legendary += legendary
      } else if (tuju === "sacred altar") {
        db.data.erpg[m.sender].darahuser -= 70
        let thumbadv = "https://telegra.ph/file/2ffa90f11d36532a7b698-8dc80a97f65d8846a2.jpg"
        let {
          key
        } = await Lyrra.sendMessage(m.chat, {
          text: 'Berpetualang, Mohon Tunggu...'
        }, {
          quoted: m
        })
        await sleep(3000)
        await Lyrra.sendMessage(m.chat, {
          text: `Kamu bertemu dengan ${obje}`,
          edit: key
        });
        await sleep(5000)
        await Lyrra.sendMessage(m.chat, {
          text: `Menjelajah...`,
          edit: key
        });
        await sleep(3000)
        let adv = `---------- » *ADVENTURE* « ----------

*📍 ${text}*
  ${vircion} • Kayu: ${kayu}
  ${vircion} • Besi: ${besi}
  ${vircion} • Rank: ${rank}
  ${vircion} • Emerald: ${emerald}
  ${vircion} • Perak: ${perak}
  ${vircion} • Besi: ${besi}
  ${vircion} • Mythic: ${mythic}
  ${vircion} • Uncommon: ${uncommon}
  ${vircion} • Common: ${common}
  ${vircion} • Legendary: ${legendary}
  ${vircion} • Diamond: ${diamond}
  ${vircion} • Uang: Rp ${saldo}

*Stamina berkurang -70*`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
        db.data.erpg[m.sender].kayu += kayu
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].rank += rank
        db.data.users[m.sender].saldo += saldo
        db.data.erpg[m.sender].emerald += emerald
        db.data.erpg[m.sender].perak += perak
        db.data.erpg[m.sender].mythic += mythic
        db.data.erpg[m.sender].uncommon += uncommon
        db.data.erpg[m.sender].common += common
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].diamond += diamond
        db.data.erpg[m.sender].legendary += legendary
      } else if (tuju === "infinity gate") {
        db.data.erpg[m.sender].darahuser -= 97
        let thumbadv = "https://telegra.ph/file/9468ed2e8c321ae27c92f-c32f8bf1a3394ea80e.jpg"
        let {
          key
        } = await Lyrra.sendMessage(m.chat, {
          text: 'Berpetualang, Mohon Tunggu...'
        }, {
          quoted: m
        })
        await sleep(3000)
        await Lyrra.sendMessage(m.chat, {
          text: `Kamu bertemu dengan ${obje}`,
          edit: key
        });
        await sleep(5000)
        await Lyrra.sendMessage(m.chat, {
          text: `Menjelajah...`,
          edit: key
        });
        await sleep(3000)
        let adv = `---------- » *ADVENTURE* « ----------

*📍 ${text}*
  ${vircion} • Kayu: ${kayu}
  ${vircion} • Besi: ${besi}
  ${vircion} • Rank: ${rank}
  ${vircion} • Emerald: ${emerald}
  ${vircion} • Perak: ${perak}
  ${vircion} • Besi: ${besi}
  ${vircion} • Mythic: ${mythic}
  ${vircion} • Uncommon: ${uncommon}
  ${vircion} • Common: ${common}
  ${vircion} • Legendary: ${legendary}
  ${vircion} • Diamond: ${diamond}
  ${vircion} • Uang: Rp ${saldo}

*Stamina berkurang -97*`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
        db.data.erpg[m.sender].kayu += kayu
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].rank += rank
        db.data.users[m.sender].saldo += saldo
        db.data.erpg[m.sender].emerald += emerald
        db.data.erpg[m.sender].perak += perak
        db.data.erpg[m.sender].mythic += mythic
        db.data.erpg[m.sender].uncommon += uncommon
        db.data.erpg[m.sender].common += common
        db.data.erpg[m.sender].besi += besi
        db.data.erpg[m.sender].diamond += diamond
        db.data.erpg[m.sender].legendary += legendary
      } else {
        let thumbadv = "https://telegra.ph/file/6b9482a4ed6bd79c7a03e.jpg"
        let adv = `---------- » *ADVENTURE* « ----------

*Pilih Lokasi Jelajahmu📍*
  ${vircion} • savanah
  ${vircion} • dessert
  ${vircion} • boreal forest
  ${vircion} • tropical forest
  ${vircion} • underground
  ${vircion} • shadownland
  ${vircion} • dragons peak
  ${vircion} • dark abyss (High)
  ${vircion} • sacred altar (High)
  ${vircion} • infinity gate (High)

*Contoh:*
.adventure dragons peak`
        await Lyrra.sendMessage(m.chat, {
          text: adv,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - ADVENTURE",
              body: 'Adventure exploring the world',
              thumbnailUrl: thumbadv,
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      }
    }
    break

    case 'memancing':
    case 'mancing': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].stamina < 1) return m.reply('Stamina Lemah, Silahkan Sembuhkan Menggunakan Ramuan/Makanan')
      let ikan = await randomNomor(0, 20)
      let ikangurita = await randomNomor(0, 15)
      let ikancumi = await randomNomor(0, 13)
      let ikanbuntal = await randomNomor(0, 20)
      let ikanlobster = await randomNomor(0, 30)
      let ikanhiu = await randomNomor(0, 2)
      db.data.erpg[m.sender].ikan += ikan
      db.data.erpg[m.sender].gurita += ikangurita
      db.data.erpg[m.sender].cumi += ikancumi
      db.data.erpg[m.sender].buntal += ikanbuntal
      db.data.erpg[m.sender].lobster += ikanlobster
      db.data.erpg[m.sender].hiu += ikanhiu
      db.data.erpg[m.sender].darahuser -= 20
      let thum = ["https://telegra.ph/file/9b1f618a826fe7b3bed3e.jpg", "https://telegra.ph/file/2e772e9732c88e153e812.jpg", "https://telegra.ph/file/872b36a0dd7b6843f24da.jpg", "https://telegra.ph/file/562adf3d43cde4d355e76.jpg", "https://telegra.ph/file/7d641d46e96e9aace01dd.jpg"]
      let thumn = await pickRandom(thum)
      let {
        key
      } = await Lyrra.sendMessage(m.chat, {
        text: 'Sedang Memancing...'
      }, {
        quoted: m
      })
      await sleep(5000)
      await Lyrra.sendMessage(m.chat, {
        text: `Memperoleh Hasil...`,
        edit: key
      });
      await sleep(5000)
      let txt = `--------- » *MEMANCING* « ---------

Berhasil mendapatkan :
  ${vircion} • ikan: ${ikan}
  ${vircion} • gurita: ${ikangurita}
  ${vircion} • cumi: ${ikancumi}
  ${vircion} • buntal: ${ikanbuntal}
  ${vircion} • lobster: ${ikanlobster}
  ${vircion} • hiu: ${ikanhiu}

_Stamina berkurang -20_`
      Lyrra.sendMessage(m.chat, {
        text: txt,
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 9999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: chjid + "@newsletter",
            serverMessageId: null,
            newsletterName: `${wm}`
          },
          externalAdReply: {
            title: "RPG - FISHING",
            body: 'Looking for fish catch',
            thumbnailUrl: thumn,
            sourceUrl: "tes",
            mediaType: 1,
            renderLargerThumbnail: true
          }
        }
      }, {
        quoted: m
      })
    }
    break

    case 'sell':
    case 'jual': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (text.includes('-')) return m.reply('Nominal Tidak valid!!');
      let jual = args[0]
      switch (jual) {
      case 'emas': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20500)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].emas}` < `${jumlh}`) return m.reply(`*Emas Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].emas -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Emas: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'besi': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 1500)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].besi}` < `${jumlh}`) return m.reply(`*Besi Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].besi -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Besi: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'batubara': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 1000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].batubara}` < `${jumlh}`) return m.reply(`*Batu Bara Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].batubara -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Batu Bara: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'perak': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 2000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].perak}` < `${jumlh}`) return m.reply(`*Perak Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].perak -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Perak: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kayu': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 500)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].kayu}` < `${jumlh}`) return m.reply(`*Kayu Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].kayu -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Kayu: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'ayam': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 500)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].ayam}` < `${jumlh}`) return m.reply(`*Ayam Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].ayam -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Ayam: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'sapi': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 3000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].sapi}` < `${jumlh}`) return m.reply(`*Sapi Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].sapi -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Sapi: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'domba': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 2000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].domba}` < `${jumlh}`) return m.reply(`*Domba Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].domba -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Domba: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'ikan': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].ikan}` < `${jumlh}`) return m.reply(`*Ikan Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].ikan -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Ikan: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'rumah': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].rumah}` < `${jumlh}`) return m.reply(`*Rumah Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].rumah -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • rumah: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'emerald': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].emerald}` < `${jumlh}`) return m.reply(`*Emerald Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].emerald -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Emerald: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'diamond': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 50000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].diamond}` < `${jumlh}`) return m.reply(`*Diamond Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].diamond -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Diamond: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'botol': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].botol}` < `${jumlh}`) return m.reply(`*Botol Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].botol -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Botol: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kardus': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].kardus}` < `${jumlh}`) return m.reply(`*Kardus Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].kardus -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Kardus: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kaleng': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].kaleng}` < `${jumlh}`) return m.reply(`*Kaleng Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].kaleng -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Kaleng: ${args[1]}

*Penghasilan:*
  ${vircion} • Kaleng: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'gelas': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].gelas}` < `${jumlh}`) return m.reply(`*Gelas Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].gelas -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Gelas: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'plastik': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].plastik}` < `${jumlh}`) return m.reply(`*Plastik Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].plastik -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Plastik: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'banteng': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 30000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].banteng}` < `${jumlh}`) return m.reply(`*Banteng Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].banteng -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Banteng: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'gajah': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 70000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].gajah}` < `${jumlh}`) return m.reply(`*Gajah Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].gajah -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Gajah: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'harimau': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 100000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].harimau}` < `${jumlh}`) return m.reply(`*Harimau Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].harimau -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Harimau: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kambing': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 30000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].kambing}` < `${jumlh}`) return m.reply(`*Kambing Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].kambing -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Kambing: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'panda': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 40000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].panda}` < `${jumlh}`) return m.reply(`*Panda Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].panda -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Panda: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'buaya': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].buaya}` < `${jumlh}`) return m.reply(`*Buaya Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].buaya -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Buaya: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kerbau': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 40000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].kerbau}` < `${jumlh}`) return m.reply(`*Kerbau Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].kerbau -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Kerbau: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'monyet': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].monyet}` < `${jumlh}`) return m.reply(`*Monyet Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].monyet -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Monyet: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'babihutan': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].babihutan}` < `${jumlh}`) return m.reply(`*Babi Hutan Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].babihutan -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Babi Hutan: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'babi': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].babi}` < `${jumlh}`) return m.reply(`*Babi Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].babi -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Babi: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'limit': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 100)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].limit}` < `${jumlh}`) return m.reply(`*Limit Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.users[m.sender].limit -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Limit: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'glimit':
      case 'gamelimit': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 100)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].glimit}` < `${jumlh}`) return m.reply(`*Game Limit Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].glimit -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Game Limit: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'paus': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 78000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].paus}` < `${jumlh}`) return m.reply(`*Paus Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].paus -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Paus: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kepiting': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 2000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].kepiting}` < `${jumlh}`) return m.reply(`*Kepiting Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].kepiting -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Kepiting: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'gurita': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 3000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].gurita}` < `${jumlh}`) return m.reply(`*Gurita Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].gurita -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Gurita: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'cumi': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 2000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].cumi}` < `${jumlh}`) return m.reply(`*Cumi Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].cumi -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Cumi: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'buntal': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 1000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].buntal}` < `${jumlh}`) return m.reply(`*Buntal Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].buntal -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Buntal: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'dory': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 7000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].dory}` < `${jumlh}`) return m.reply(`*Dory Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].dory -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Dory: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'lumba': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 67400)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].lumba}` < `${jumlh}`) return m.reply(`*Lumba" Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].lumba -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Lumba": ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'lobster': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 3000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].lobster}` < `${jumlh}`) return m.reply(`*Lobster Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].lobster -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Lobster: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'hiu': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 87500)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].hiu}` < `${jumlh}`) return m.reply(`*Hiu Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].hiu -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Hiu: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'udang': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 1000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].udang}` < `${jumlh}`) return m.reply(`*Udang Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].udang -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Udang: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'orca': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 12000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].orca}` < `${jumlh}`) return m.reply(`*Orca Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].orca -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Orca: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'potion': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 1000)
        let jumlh = Number(args[1])
        if (`${db.data.erpg[m.sender].potion}` < `${jumlh}`) return m.reply(`*Potion Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo += uang
        db.data.erpg[m.sender].potion -= parseInt(args[1])
        m.reply(`*MARKET - JUAL🛍️*

*Item Terjual:*
  ${vircion} • Potion: ${args[1]}

*Penghasilan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      default:
        let teks = `------- » *🛍️ MARKET 🛍️* « -------

*Users Items⚔*
  ${vircion} • rumah +Rp 2.000.000
  ${vircion} • potion +Rp 1.000
  ${vircion} • Limit: +Rp 1.000
  ${vircion} • GameLimit: +Rp 1.000
  ${vircion} • emas +Rp 20.500
  ${vircion} • besi +Rp 1.500
  ${vircion} • batubara +Rp 1.000
  ${vircion} • perak +Rp 2.000
  ${vircion} • kayu +Rp 500
  ${vircion} • emerald +Rp 20.000
  ${vircion} • diamond +Rp 50.000
  ${vircion} • botol +Rp 200
  ${vircion} • kardus +Rp 200
  ${vircion} • kaleng +Rp 200
  ${vircion} • gelas +Rp 200
  ${vircion} • plastik +Rp 200

*Hewan Darat🌿*
  ${vircion} • ayam +Rp 500
  ${vircion} • sapi +Rp 3.000
  ${vircion} • domba +Rp 2.000
  ${vircion} • banteng +Rp 30.000
  ${vircion} • gajah +Rp 70.000
  ${vircion} • harimau +Rp 100.000
  ${vircion} • kambing +Rp 30000
  ${vircion} • panda +Rp 40.000
  ${vircion} • buaya +Rp 20.000
  ${vircion} • kerbau +Rp 40.000
  ${vircion} • monyet +Rp 20.000
  ${vircion} • babihutan +Rp 40.000
  ${vircion} • babi +Rp 20.000

*Hewan Laut 🌊*
  ${vircion} • ikan +Rp 200
  ${vircion} • paus +Rp 78000500
  ${vircion} • kepiting +Rp 2000
  ${vircion} • gurita +Rp 3000
  ${vircion} • cumi +Rp 2000
  ${vircion} • buntal +Rp 1000
  ${vircion} • dory +Rp 7000
  ${vircion} • lumba +Rp 674000
  ${vircion} • lobster +Rp 3000
  ${vircion} • hiu +Rp 8750000
  ${vircion} • udang +Rp 1000
  ${vircion} • orca +Rp 12000
_____________________________

*Tutorials :*
➠ To Sell Items:
.sell [item] [quantity]
▧ Example:
.sell emas 10`
        Lyrra.sendMessage(m.chat, {
          text: teks,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "SELLING MARKET",
              body: 'Sell goods to earn money',
              thumbnailUrl: "https://telegra.ph/file/df72d0f6cc35b7581594b.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      }
    }
    break

    case 'shop':
    case 'buy':
    case 'beli': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (text.includes('-')) return m.reply('Nominal Tidak valid!!');
      let jual = args[0]
      switch (jual) {
      case 'emas': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20500)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].emas += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Emas: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'besi': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 1500)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].besi += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Besi: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'batubara': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 1000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].batubara += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Batu Bara: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'perak': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 2000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].perak += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Perak: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kayu': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 500)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].kayu += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Kayu: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'ayam': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 500)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].ayam += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Ayam: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'sapi': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 3000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].sapi += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Sapi: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'domba': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 2000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].domba += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Domba: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'ikan': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].ikan += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Ikan: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'rumah': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 2000000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].rumah += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • rumah: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'emerald': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].emerald += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Emerald: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'diamond': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 50000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].diamond += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Diamond: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'botol': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].botol += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Botol: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kardus': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].kardus += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Kardus: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kaleng': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].kaleng += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Kaleng: ${args[1]}

*Dibayarkan:*
  ${vircion} • Kaleng: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'gelas': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].gelas += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Gelas: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'plastik': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 200)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].plastik += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Plastik: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'banteng': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 30000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].banteng += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Banteng: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'gajah': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 70000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].gajah += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Gajah: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'harimau': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 100000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].harimau += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Harimau: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kambing': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 30000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].kambing += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Kambing: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'panda': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 40000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].panda += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Panda: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'buaya': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].buaya += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Buaya: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kerbau': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 40000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].kerbau += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Kerbau: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'monyet': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].monyet += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Monyet: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'babihutan': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].babihutan += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Babi Hutan: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'babi': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 20000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].babi += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Babi: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'limit': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 10000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.users[m.sender].limit += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Limit: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'glimit':
      case 'gamelimit': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 10000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.users[m.sender].glimit += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Game Limit: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'paus': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 78000500)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].paus += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Paus: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'kepiting': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 2000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].kepiting += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Kepiting: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'gurita': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 3000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].gurita += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Gurita: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'cumi': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 2000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].cumi += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Cumi: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'buntal': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 1000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].buntal += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Buntal: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'dory': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 7000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].dory += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Dory: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'lumba': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 674000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].lumba += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Lumba": ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'lobster': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 3000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].lobster += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Lobster: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'hiu': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 8750000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].hiu += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Hiu: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'udang': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 1000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].udang += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Udang: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'orca': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 12000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].orca += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Orca: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      case 'potion': {
        if (!args[1]) return m.reply(`*Masukan Jumlahnya*\n\nContoh:\n${p_c} ${args[0]} 2`)
        if (isNaN(args[1])) return m.reply(`*Jumlah Harus Berupa Angka*\n\nContoh:\n${p_c} ${args[0]} 2`)
        let uang = Number(parseInt(args[1]) * 1000)
        let jumlh = Number(args[1])
        if (`${db.data.users[m.sender].saldo}` < `${uang}`) return m.reply(`*Saldo Kamu Tidak Cukup*`)
        db.data.users[m.sender].saldo -= uang
        db.data.erpg[m.sender].potion += parseInt(args[1])
        m.reply(`*MARKET - BELI🛍️*

*Item Dibeli:*
  ${vircion} • Potion: ${args[1]}

*Dibayarkan:*
  ${vircion} • Saldo: ${uang}

*Sisa Uang:*
  ${vircion} • Saldo Total: ${db.data.users[m.sender].saldo}`)
      }
      break
      default:
        let teks = `------- » *🛍️ MARKET 🛍️* « -------


*Sumber Daya 🧰*
  ${vircion} • rumah -Rp 2.000.000
  ${vircion} • potion -Rp 1.000
  ${vircion} • Limit: -Rp 1000 1.000
  ${vircion} • GameLimit: -Rp 1.000
  ${vircion} • emas -Rp 20.500
  ${vircion} • besi -Rp 1.500
  ${vircion} • batubara -Rp 1.000
  ${vircion} • perak -Rp 2.000
  ${vircion} • kayu -Rp 500
  ${vircion} • emerald -Rp 20.000
  ${vircion} • diamond -Rp 50.000
  ${vircion} • botol -Rp 200
  ${vircion} • kardus -Rp 200
  ${vircion} • kaleng -Rp 200
  ${vircion} • gelas -Rp 200
  ${vircion} • plastik -Rp 200

*Hewan Darat🌿*
  ${vircion} • ayam -Rp 500
  ${vircion} • sapi -Rp 3.000
  ${vircion} • domba -Rp 2.000
  ${vircion} • banteng -Rp 30.000
  ${vircion} • gajah -Rp 70.000
  ${vircion} • harimau -Rp 100.000
  ${vircion} • kambing -Rp 30000
  ${vircion} • panda -Rp 40.000
  ${vircion} • buaya -Rp 20.000
  ${vircion} • kerbau -Rp 40.000
  ${vircion} • monyet -Rp 20.000
  ${vircion} • babihutan -Rp 40.000
  ${vircion} • babi -Rp 20.000

*Hewan Laut 🌊*
  ${vircion} • ikan -Rp 200
  ${vircion} • paus -Rp 78000500
  ${vircion} • kepiting -Rp 2000
  ${vircion} • gurita -Rp 3000
  ${vircion} • cumi -Rp 2000
  ${vircion} • buntal -Rp 1000
  ${vircion} • dory -Rp 7000
  ${vircion} • lumba -Rp 674000
  ${vircion} • lobster -Rp 3000
  ${vircion} • hiu -Rp 8750000
  ${vircion} • udang -Rp 1000
  ${vircion} • orca -Rp 12000
_____________________________

*Tutorials :*
➠ To Buy Items:
.buy [item] [quantity]
▧ Example:
.buy emas 10`
        Lyrra.sendMessage(m.chat, {
          text: teks,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "BUY MARKET",
              body: 'Sell goods to earn money',
              thumbnailUrl: "https://telegra.ph/file/df72d0f6cc35b7581594b.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      }
    }
    break

    case 'bekerja':
    case 'kerja': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].stamina < 1) return m.reply(`Kamu Lemah, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nKetik _.heal_`)
      let type = (args[0] || '').toLowerCase()
      let time = db.data.erpg[m.sender].lastkerja + 600000
      let __timers = (new Date - db.data.erpg[m.sender].lastkerja)
      let _timers = (0 - __timers)
      let timers = clockString(_timers)
      let penumpan = ['mas mas', 'bapak bapak', 'cewe sma', 'bocil epep', 'emak emak']
      let penumpang = await pickRandom(penumpan)
      let daganga = ['wortel', 'sawi', 'selada', 'tomat', 'seledri', 'cabai', 'daging', 'ikan', 'ayam']
      let dagangan = await pickRandom(daganga)
      let pasie = ['sakit kepala', 'cedera', 'luka bakar', 'patah tulang']
      let pasien = await pickRandom(pasie)
      let pane = ['Wortel', 'Kubis', 'stowbery', 'teh', 'padi', 'jeruk', 'pisang', 'semangka', 'durian', 'rambutan']
      let panen = await pickRandom(pane)
      let bengke = ['mobil', 'motor', 'becak', 'bajai', 'bus', 'angkot', 'becak', 'sepeda']
      let bengkel = await pickRandom(bengke)
      let ruma = ['Membangun Rumah', 'Membangun Gedung', 'Memperbaiki Rumah', 'Memperbaiki Gedung', 'Membangun Fasilitas Umum', 'Memperbaiki Fasilitas Umum']
      let rumah = await pickRandom(ruma)

      switch (type) {
      case 'ojek':
        if (new Date - db.data.erpg[m.sender].lastkerja < 600000) return m.reply(`Kamu sudah bekerja\nSaatnya istirahat selama ${clockString(time - new Date())}`)
        let hasilojek = Math.floor(Math.random() * 10000)
        m.reply(`Kamu Sudah Mengantarkan *${penumpang}* 🚗\nDan mendapatkan uang senilai *Rp ${hasilojek} 💰*`).then(() => {
          db.data.users[m.sender].saldo += hasilojek
          db.data.erpg[m.sender].lastkerja = new Date * 1
        })
        break
      case 'pedagang':
        if (new Date - db.data.erpg[m.sender].lastkerja < 600000) return m.reply(`Kamu sudah bekerja\nSaatnya istirahat selama\n🕜 ${clockString(time - new Date())}`)
        let hasildagang = Math.floor(Math.random() * 10000)
        m.reply(`Ada pembeli yg membeli *${dagangan}* 🛒\nDan mendapatkan uang senilai *Rp ${hasildagang} 💰*`).then(() => {
          db.data.users[m.sender].saldo += hasildagang
          db.data.erpg[m.sender].lastkerja = new Date * 1
        })
        break
      case 'dokter':
        if (new Date - db.data.erpg[m.sender].lastkerja < 600000) return m.reply(`Kamu sudah bekerja\nSaatnya istirahat selama\n🕜 ${clockString(time - new Date())}`)
        let hasildokter = Math.floor(Math.random() * 10000)
        m.reply(`Kamu menyembuhkan pasien *${pasien}* 💉\nDan mendapatkan uang senilai *Rp ${hasildokter}* 💰`).then(() => {
          db.data.users[m.sender].saldo += hasildokter
          db.data.erpg[m.sender].lastkerja = new Date * 1
        })
        break
      case 'petani':
        if (new Date - db.data.erpg[m.sender].lastkerja < 600000) return m.reply(`Kamu sudah bekerja\nSaatnya istirahat selama\n🕜 ${clockString(time - new Date())}`)
        let hasiltani = Math.floor(Math.random() * 10000)
        m.reply(`${panen} Sudah Panen !🌽 Dan menjualnya 🧺\nDan mendapatkan uang senilai Rp *${hasiltani} 💰*`).then(() => {
          db.data.users[m.sender].saldo += hasiltani
          db.data.erpg[m.sender].lastkerja = new Date * 1
        })
        break
      case 'montir':
        if (new Date - db.data.erpg[m.sender].lastkerja < 600000) return m.reply(`Kamu sudah bekerja\nSaatnya istirahat selama\n🕜 ${clockString(time - new Date())}`)
        let hasilmontir = Math.floor(Math.random() * 10000)
        m.reply(`Kamu Baru saja mendapatkan pelanggan dan memperbaiki *${bengkel} 🔧*\nDan kamu mendapatkan uang senilai *Rp ${hasilmontir}* 💰`).then(() => {
          db.data.users[m.sender].saldo += hasilmontir
          db.data.erpg[m.sender].lastkerja = new Date * 1
        })
        break
      case 'kuli':
        if (new Date - db.data.erpg[m.sender].lastkerja < 600000) return m.reply(`Kamu sudah bekerja\nSaatnya istirahat selama\n🕜 ${clockString(time - new Date())}`)
        let hasilkuli = Math.floor(Math.random() * 10000)
        m.reply(`Kamu baru saja selesai ${rumah} 🔨\nDan mendapatkan uang senilai *Rp ${hasilkuli} 💰*`).then(() => {
          db.data.users[m.sender].saldo += hasilkuli
          db.data.erpg[m.sender].lastkerja = new Date * 1
        })
        break
      default:
        let teks = `
*💼 RPG - KERJA 💼*

*Select you job* :
  ${vircion} • montir
  ${vircion} • kuli
  ${vircion} • petani
  ${vircion} • dokter
  ${vircion} • pedagang
  ${vircion} • ojek

*Contoh* :
${p_c} kuli`
        Lyrra.sendMessage(m.chat, {
          text: teks,
          contextInfo: {
            mentionedJid: [m.sender],
            forwardingScore: 9999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              serverMessageId: null,
              newsletterName: `${wm}`
            },
            externalAdReply: {
              title: "RPG - JOB SIMULATOR",
              body: 'Choose a job and enjoy the results',
              thumbnailUrl: "https://pomf2.lain.la/f/x1pvc1mq.jpg",
              sourceUrl: "tes",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, {
          quoted: m
        })
      }
    }
    break


    case 'merampok':
    case 'rampok': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!m.isGroup) return onlyGrup()
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].stamina < 1) return m.reply(`Kamu Lemah, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nKetik _.heal_`)
      let hasil = (Math.floor(Math.random() * 5000))
      let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
      if (!m.mentionedJid[0] && !m.quoted && !text) return m.reply(`*Tag/Reply Target!*\n\nContoh :\n${p_c} @0`)
      if (users == m.sender) return m.reply("Gak bisa ngerampok diri sendiri")
      let waktuu = await clockString(new Date() - db.data.erpg[m.sender].lastrampok)
      if (new Date() - db.data.erpg[m.sender].lastrampok < 3600000) return m.reply(`Kamu Baru Saja ${command}, ${waktuu} Yang Lalu, Tunggu Lagi Setelah selesai.`)
      if (db.data.users[users].saldo < 5000) return m.reply("Target kismin")
      db.data.users[users].saldo -= hasil * 1
      db.data.users[m.sender].saldo += hasil * 1
      db.data.erpg[m.sender].lastrampok = new Date * 1
      m.reply(`Target Berhasil Dirampok Dan Mendapatkan Rp ${hasil}`)
    }
    break

    case 'ewepaksa':
    case 'ewe-paksa': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!m.isGroup) return onlyGrup()
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].stamina < 1) return m.reply(`Kamu Lemah, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nKetik _.heal_`)
      let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
      if (!m.mentionedJid[0] && !m.quoted && !text) return m.reply(`*Tag/Reply Target!*\n\nContoh :\n${p_c} @0`)
      let waktuu = await clockString(new Date() - db.data.erpg[m.sender].lastewe)
      if (new Date() - db.data.erpg[m.sender].lastewe < 43200000) return m.reply(`Kamu Baru Saja ngwe, ${waktuu} Yang Lalu, ewe Lagi nanti.`)
      let uang = await randomNomor(3000, 19000)
      let exp = await randomNomor(3444, 7897)
      m.reply(`kamu membawa nya ke kamar dan membuka paksa baju nya...`)
      await sleep(3000)
      m.reply(`Ehh Mau Ngapainn 😣😣...`)
      await sleep(3000)
      m.reply(`Ahhh Pelan Pelann, Sakittt😖😖😖....\nAHHH...AHHHH...Pelan Pelan...😖😖😖`)
      await sleep(3000)
      m.reply(`Ahhhh, Sakitttt!! >////<\nPlok...Plokkk...Plokkkk😩😖`)
      await sleep(3000)
      m.reply(`😖Ahhhh.... Penuhhh.... Angettt😖`)
      await sleep(3000)
      m.reply(`*—[ Hasil Ewe ${db.data.users[m.sender].nama} ]—* 
➤ 💰 Uang = [ ${uang} ] 
➤ ✨ Exp = [ ${exp} ] 
➤ 🎗️ Tugas Selesai = +1`)
      db.data.users[m.sender].saldo += uang
      db.data.users[m.sender].exp += exp
      db.data.erpg[m.sender].lastewe = new Date * 1
    }
    break

    case 'open-bo':
    case 'openbo': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].stamina < 1) return m.reply(`Kamu Lemah, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nKetik _.heal_`)
      let waktuu = await clockString(new Date() - db.data.erpg[m.sender].lastopenbo)
      if (new Date() - db.data.erpg[m.sender].lastopenbo < 54000000) return m.reply(`Kamu Baru Saja ${command}, ${waktuu} Yang Lalu, Tunggu Lagi Setelah selesai.`)
      let uwong = ['Azril', 'Amba', 'MarkZukbrg', 'Mulyono', 'Andree']
      let userpname = pickRandom(uwong)
      let hotel = await randomNomor(3, 6)
      let uang = await randomNomor(7000, 34000)
      let expusr = await randomNomor(8000, 13000)
      let limit = await randomNomor(20, 80)
      let stamina = await randomNomor(45, 85)
      m.reply('Sedang Mencari Pelanggan...')
      await sleep(5000)
      m.reply(`Kamu Mendapatkan Pelanggan Bernama ${userpname} Dan Pergi Ke Hotel Bintang ${hotel}`)
      await sleep(4000)
      m.reply('Kamu Pun Mulai Melakukan Nganu Dengannya')
      await sleep(6000)
      m.reply('Kamu Di Paksa Untuk Melayaninya 24 Jam')
      await sleep(4000)
      m.reply(`Kamu Terbaring Lemas Karna Melakukan\nNgentod 24 Jam Dengan ${userpname},\nTetapi Kamu Mendapatkan : \n
Uang : ${uang}
Exp : ${expusr}
Limit : ${limit}

Stamina berkurang ${stamina}%`)
      db.data.users[m.sender].saldo += uang
      db.data.users[m.sender].exp += expusr
      db.data.users[m.sender].limit += limit
      db.data.erpg[m.sender].stamina -= stamina
      db.data.erpg[m.sender].lastopenbo = new Date * 1
    }
    break

    case 'daily-misi':
    case 'dailymisi': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      if (db.data.erpg[m.sender].stamina < 1) return m.reply(`Kamu Lemah, stamina kamu ${db.data.erpg[m.sender].stamina}%\n\nKetik _.heal_`)
      let waktuu = await clockString(new Date() - db.data.erpg[m.sender].lastdailymisi)
      if (new Date() - db.data.erpg[m.sender].lastdailymisi < 86400000) return m.reply(`Kamu Baru Saja ${command}, ${waktuu} Yang Lalu, Tunggu Lagi Setelah selesai.`)
      let misiget = ['Menangkap 30 lalat dalam 30 detik', 'Ngentod Janda', 'Menangkap anomali', 'Menangkap Maling', 'Menangkap Buronan', 'Menangkap azril', 'Mengejar Ilham', 'Membunuh MarkZukberg', 'Membunuh Tuhan', 'Berburu Perawan']
      let mission = pickRandom(misiget)
      let uang = await randomNomor(7000, 34000)
      let expget = await randomNomor(8000, 13000)
      let limit = await randomNomor(20, 80)
      let stamina = await randomNomor(45, 85)
      m.reply('Mencari Misi...')
      await sleep(3000)
      m.reply(`Misi ${mission} Berhasil Didapatkan`)
      await sleep(4000)
      m.reply('Mengerjakan misi...')
      await sleep(10000)
      m.reply(`${Lyrra.getName(m.sender)} Berhasil Menyelesaikan Misi
Dan Kamu Mendapatkan :
Uang : ${uang}
Exp : ${expget}
Limit : ${limit}

Sramina Berkurang ${stamina}%`)
      db.data.users[m.sender].saldo += uang
      db.data.users[m.sender].exp += expget
      db.data.users[m.sender].limit += limit
      db.data.erpg[m.sender].stamina -= stamina
      db.data.erpg[m.sender].lastdailymisi = new Date * 1
    }
    break

    case 'ngaji':
    case 'mengaji': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      let waktuu = await clockString(new Date() - db.data.erpg[m.sender].lastngaji)
      if (new Date() - db.data.erpg[m.sender].lastngaji < 14400000) return m.reply(`Kamu Baru Saja ${command}, ${waktuu} Yang Lalu, Tunggu Lagi Setelah selesai.`)
      let uang = randomNomor(3000, 6000)
      let expget = randomNomor(3000, 5000)
      m.reply('Mencari Guru Ngaji....')
      await sleep(7000)
      m.reply('Ketemu ustadz..')
      await sleep(4000)
      m.reply('Diajarin tajwid')
      await sleep(3000)
      m.reply('Ngasih tau, kalo qalqalah itu dipantulkan')
      await sleep(3000)
      m.reply(`*—[ Hasil Ngaji ]—*
➕💹 Uang jajan: ${uang}
➕✨ Exp: ${expget}
➕🤬 Dimarahin: -1`)
      db.data.users[m.sender].saldo += uang
      db.data.users[m.sender].exp += expget
      db.data.erpg[m.sender].lastngaji = new Date * 1
    }
    break

    case 'skillcek':
    case 'cekskill': {
      if (setting.rpgsetStats) return m.reply('Fitur rpg dimatikan oleh owner')
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      m.reply(`${db.data.erpg[m.sender].skillselect ? `Skill kamu : ${db.data.erpg[m.sender].skillselect}` : 'Kamu Belum Memiliki Skill'}`)
    }
    break

    case 'redem':
    case 'redeem': {
      db.redeem = db.redeem || {
        isRedeem: false,
        code: "",
        user: [],
        maxRedeem: 0
      }
      if (!db.redeem.isRedeem) return m.reply('Tidak ada redeem yang di berikan')
      if (!text) return m.reply('Masukan kode!')
      if (db.redeem.isRedeem) {
        let code = text.toLowerCase()
        let redeem = db.redeem.code.toLowerCase()
        if (code !== redeem) return m.reply('Kode kamu gak valid!')
        if (db.redeem.maxRedeem < 1) return m.reply('Kode udah abiss cokk')
        if (db.redeem.user.includes(m.sender)) return m.reply('Kamu sudah claim kode ini!')
        let uang = await randomNomor(100000, 3000000)
        let expgt = await randomNomor(3000, 8000)
        let limiter = await randomNomor(1000, 5000)
        let glimiter = await randomNomor(1000, 7000)
        db.redeem.user.push(m.sender)
        db.redeem.maxRedeem -= 1
        db.data.users[m.sender].saldo += uang
        db.data.users[m.sender].exp += expgt
        db.data.users[m.sender].limit += limiter
        db.data.users[m.sender].glimit += glimiter
        let teks = `*CONGRATULATION 🥳*

*Kamu Mendapatkan* :
-  Rp ${toRupiah(uang)} Balance
-  ${expgt} Exp
-  ${limiter} Limit
-  ${glimiter} Game Limit`
        m.reply(teks)
        if (db.redeem.maxRedeem < 1) {
          await timeout(600000)
          delete db.redeem
        }
      } else {
        m.reply("*Gak ada redeem yang di berikan 😓*")
      }
    }
    break

    case 'redemset':
    case 'setredem':
    case 'redeemset':
    case 'setredeem': {
      if (!isOwner) return onlyOwn()
      db.redeem = db.redeem || {
        isRedeem: false,
        code: "",
        user: [],
        maxRedeem: 0
      }
      if (!args[0]) return m.reply(`*Masukin Kode Redemnya!*\n\nContoh:\n${prefix + command} NewUpdate 10`)
      if (!args[1]) return m.reply(`*Masukin Jumlah Tersedia!*\n\nContoh:\n${prefix + command} NewUpdate 10`)
      if (isNaN(args[1])) return m.reply(`*Jumlah Harus Angka!*\n\nContoh:\n${prefix + command} NewUpdate 10`)
      db.redeem.isRedeem = true
      db.redeem.code = args[0]
      db.redeem.user = []
      db.redeem.maxRedeem = args[1]
      m.reply('Code Redeem, Berhasil Di Setting*')
    }
    break
    case 'delredeem':
    case 'redeemdel': {
      if (!isOwner) return onlyOwn()
      db.redeem = db.redeem || {
        isRedeem: false,
        code: "",
        user: [],
        maxRedeem: 0
      }
      if (db.redeem.isRedeem) {
        m.reply('*Redeem Code Dihapus!*')
        delete db.redeem
      } else {
        m.reply('*Tidak ada sesi redeem*')
      }
    }
    break

    case 'listredem':
    case 'redemlist':
    case 'redeemlist':
    case 'listredeem': {
      if (!isOwner) return onlyOwn()
      if (!db.redeem) return m.reply('Tidak ada data redeem')
      if (db.redeem.user.length === 0) return m.reply('Tidak ada nomor yang sudah redeem')
      let list = 'Daftar Nomor yang Sudah Redeem:\n\n'
      db.redeem.user.forEach((nomor, index) => {
        list += `${index + 1}. ${nomor}\n`
      })
      m.reply(list)
    }
    break

    case 'inv':
    case 'inventory': {
      let {
        rank,
        rankid
      } = await ranke(m.sender);
      if (!db.data.erpg[m.sender].rpg) return m.reply(`*Join RPG Terlebih Dahulu*\n\nketik _.joinrpg_`)
      lyreact()
      let teks = `*⚔️ RPG - PROFILE ⚔️*

_*User Profile 🤺*_
  ${vircion} • Name: ${db.data.users[m.sender].nama}
  ${vircion} • Money: ${db.data.users[m.sender].saldo}
  ${vircion} • User Healthy: ${db.data.erpg[m.sender].darahuser}/100%
  ${vircion} • Skill: ${db.data.erpg[m.sender].skillselect ? `(${db.data.erpg[m.sender].skillselect})` : 'Nothing'}
  ${vircion} • Makanan: ${db.data.erpg[m.sender].makanan}
  ${vircion} • Potion: ${db.data.erpg[m.sender].potion}
  ${vircion} • Keberadaan: ${db.data.erpg[m.sender].wilayah}
  ${vircion} • Kapal: ${db.data.erpg[m.sender].kapal ? `(${db.data.erpg[m.sender].darahkapal}% HP)` : 'Nothing'}
  ${vircion} • Rumah: ${db.data.erpg[m.sender].rumah} Unit
  ${vircion} • Kapak: ${db.data.erpg[m.sender].kapak ? `(${db.data.erpg[m.sender].darahkapak}% HP)` : 'Nothing'}
  ${vircion} • Pickaxe: ${db.data.erpg[m.sender].pickaxe ? `(${db.data.erpg[m.sender].darahpickaxe}% HP)` : 'Nothing'}
  ${vircion} • Baju Zirah: ${db.data.erpg[m.sender].bzirah ? `(${db.data.erpg[m.sender].darahbzirah}% HP)` : 'Nothing'}
  ${vircion} • Pedang: ${db.data.erpg[m.sender].pedang ? `(${db.data.erpg[m.sender].darahpedang}% HP)` : 'Nothing'}
  ${vircion} • Kain: ${db.data.erpg[m.sender].kain} Lembar

_*Sumber Daya 🧰*_
  ${vircion} • Kayu: ${db.data.erpg[m.sender].kayu}
  ${vircion} • Besi: ${db.data.erpg[m.sender].besi}
  ${vircion} • Emas: ${db.data.erpg[m.sender].emas}
  ${vircion} • Perak: ${db.data.erpg[m.sender].perak}
  ${vircion} • Batubara: ${db.data.erpg[m.sender].batubara}
  ${vircion} • Emerald: ${db.data.erpg[m.sender].emerald}
  ${vircion} • Diamond: ${db.data.erpg[m.sender].diamond}
  ${vircion} • Common: ${db.data.erpg[m.sender].common}
  ${vircion} • Uncommon: ${db.data.erpg[m.sender].uncommon}
  ${vircion} • Mythic: ${db.data.erpg[m.sender].mythic}
  ${vircion} • Legendary: ${db.data.erpg[m.sender].legendary}

_*Hewan & Ternak🐄*_
  ${vircion} • Ayam: ${db.data.erpg[m.sender].ayam} Ekor 
  ${vircion} • Sapi: ${db.data.erpg[m.sender].sapi} Ekor
  ${vircion} • Domba: ${db.data.erpg[m.sender].domba} Ekor
  ${vircion} • Ikan: ${db.data.erpg[m.sender].ikan} Ekor
  ${vircion} • Banteng: ${db.data.erpg[m.sender].banteng} Ekor 
  ${vircion} • Gajah: ${db.data.erpg[m.sender].gajah} Ekor
  ${vircion} • Harimau: ${db.data.erpg[m.sender].harimau} Ekor
  ${vircion} • Kambing: ${db.data.erpg[m.sender].kambing} Ekor
  ${vircion} • Panda: ${db.data.erpg[m.sender].panda} Ekor
  ${vircion} • Buaya: ${db.data.erpg[m.sender].buaya} Ekor
  ${vircion} • Kerbau: ${db.data.erpg[m.sender].kerbau} Ekor
  ${vircion} • Monyet: ${db.data.erpg[m.sender].monyet} Ekor
  ${vircion} • Babihutan: ${db.data.erpg[m.sender].babihutan} Ekor
  ${vircion} • Babi: ${db.data.erpg[m.sender].babi} Ekor

_*Hewan Laut🌊*_
  ${vircion} • Ikan: ${db.data.erpg[m.sender].ikan} Ekor
  ${vircion} • Paus: ${db.data.erpg[m.sender].paus} Ekor
  ${vircion} • Gurita: ${db.data.erpg[m.sender].gurita} Ekor
  ${vircion} • Kepiting: ${db.data.erpg[m.sender].kepiting} Ekor
  ${vircion} • Cumi: ${db.data.erpg[m.sender].cumi} Ekor
  ${vircion} • Buntal: ${db.data.erpg[m.sender].buntal} Ekor
  ${vircion} • Dory: ${db.data.erpg[m.sender].dory} Ekor
  ${vircion} • Lumba: ${db.data.erpg[m.sender].lumba} Ekor
  ${vircion} • Lobster: ${db.data.erpg[m.sender].lobster} Ekor
  ${vircion} • Hiu: ${db.data.erpg[m.sender].hiu} Ekor
  ${vircion} • Udang: ${db.data.erpg[m.sender].udang} Ekor
  ${vircion} • Orca: ${db.data.erpg[m.sender].orca} Ekor
  
_*Buah Buahan🍇*_
  ${vircion} • Anggur: ${db.data.erpg[m.sender].anggur}
  ${vircion} • Jeruk: ${db.data.erpg[m.sender].jeruk}
  ${vircion} • Mangga: ${db.data.erpg[m.sender].mangga}
  ${vircion} • Pisang: ${db.data.erpg[m.sender].pisang}
  
_*Items Lainnya🎗️*_
  ${vircion} • Botol: ${db.data.erpg[m.sender].botol}
  ${vircion} • Kardus: ${db.data.erpg[m.sender].kardus}
  ${vircion} • Kaleng: ${db.data.erpg[m.sender].kaleng}
  ${vircion} • Gelas: ${db.data.erpg[m.sender].gelas}
  ${vircion} • Plastik: ${db.data.erpg[m.sender].plastik}
  ${vircion} • Bulu: ${db.data.erpg[m.sender].bulu}
  ${vircion} • Bibit Anggur: ${db.data.erpg[m.sender].bibitanggur}
  ${vircion} • Bibit Pisang: ${db.data.erpg[m.sender].bibitpisang}
  ${vircion} • Bibit Apel: ${db.data.erpg[m.sender].bibitapel}
  ${vircion} • Bibit Mangga: ${db.data.erpg[m.sender].bibitmangga}
  ${vircion} • Bibit Jeruk: ${db.data.erpg[m.sender].bibitjeruk}`
      await Lyrra.sendMessage(
        m.chat, {
          document: {
            url: thumb
          },
          mimetype: "image/png",
          pageCount: 2024,
          fileName: `${botname}`,
          fileLength: 100000000000000,
          jpegThumbnail: fs.readFileSync('./media/thumbnail1.jpg'),
          caption: teks,
          contextInfo: {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            externalAdReply: {
              containsAutoReply: true,
              mediaType: 1,
              mediaUrl: ``,
              renderLargerThumbnail: true,
              showAdAttribution: true,
              sourceUrl: ``,
              thumbnailUrl: `${global.thumb}`,
              title: `${botname.toUpperCase()}`,
              body: `${ucapanWaktu} kak`,
              mentionedJid: [sender],
              isForwarded: true,
            },
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: 143
            },
            businessMessageForwardInfo: {
              businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
            }
          },
          footer: `${wm}`,
          buttons: [{
              buttonId: `${_p}weekly`,
              buttonText: {
                displayText: 'Weekly'
              }
            },
            {
              buttonId: `${_p}monthly`,
              buttonText: {
                displayText: 'Monthly'
              }
            }
          ],
          headerType: 6,
          viewOnce: true
        }, {
          quoted: m
        });
    }
    break

    case 'menu':
    case 'menu-v': {
      lyreact()
      let {
        rank,
        rankid
      } = await ranke(m.sender);
      let exp = db.data.users[m.sender].exp;
      let requireexp = 2400;
      const maxRequireExp = 77777777777;
      while (exp >= requireexp && requireexp < maxRequireExp) {
        requireexp += 2400;
        if (requireexp > maxRequireExp) {
          requireexp = maxRequireExp;
        }
      }
      const sender = m.sender
      let teks = `ɪ ᴀᴍ ᴀɴ ᴀᴜᴛᴏᴍᴀᴛᴇᴅ sʏsᴛᴇᴍ (ᴡʜᴀᴛsᴀᴘᴘ ʙᴏᴛ) ᴛʜᴀᴛ ᴄᴀɴ ʜᴇʟᴘ ᴛᴏ ᴅᴏ sᴏᴍᴇᴛʜɪɴɢ, sᴇᴀʀᴄʜ ᴀɴᴅ ɢᴇᴛ ᴅᴀᴛᴀ / ɪɴғᴏʀᴍᴀᴛɪᴏɴ ᴏɴʟʏ ᴛʜʀᴏᴜɢʜ ᴡʜᴀᴛsᴀᴘᴘ.

  ◦  *ʟɪʙʀᴀʀʏ:* ʙᴀɪʟᴇʏs
  ◦  *ғᴜɴᴄᴛɪᴏɴ:* ᴀssɪsᴛᴀɴᴛ

    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  
    「 *${global.vtampt}𝚄𝚂𝙴𝚁 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ᴘʀᴏғɪʟᴇ: ${db.data.users[m.sender].daftar ? 'sᴜᴅᴀʜ ᴛᴇʀᴅᴀғᴛᴀʀ' : 'ʙᴇʟᴜᴍ ᴛᴇʀᴅᴀғᴛᴀʀ'}
  ${vircion} • sᴀʟᴅᴏ: ʀᴘ. ${toRupiah(cekSaldo(m.sender))}
  ${vircion} • ᴇxᴘ: ${exp} / ${requireexp}
  ${vircion} • ʟᴇᴠᴇʟ: ${db.data.users[m.sender].level}
  ${vircion} • ʟɪᴍɪᴛ: ${cekLimit(m.sender)} ʟɪᴍɪᴛ`
      menuv1(teks)
    }
    break

    case 'menuall':
    case 'menu-all':
    case 'allmenu':
    case 'allmenu-v': {
      lyreact()
      let {
        rank,
        rankid
      } = await ranke(m.sender);
      let exp = db.data.users[m.sender].exp;
      let requireexp = 2400;
      const maxRequireExp = 77777777777;
      while (exp >= requireexp && requireexp < maxRequireExp) {
        requireexp += 2400;
        if (requireexp > maxRequireExp) {
          requireexp = maxRequireExp;
        }
      }
      const sender = m.sender
      let teks = `ɪ ᴀᴍ ᴀɴ ᴀᴜᴛᴏᴍᴀᴛᴇᴅ sʏsᴛᴇᴍ (ᴡʜᴀᴛsᴀᴘᴘ ʙᴏᴛ) ᴛʜᴀᴛ ᴄᴀɴ ʜᴇʟᴘ ᴛᴏ ᴅᴏ sᴏᴍᴇᴛʜɪɴɢ, sᴇᴀʀᴄʜ ᴀɴᴅ ɢᴇᴛ ᴅᴀᴛᴀ / ɪɴғᴏʀᴍᴀᴛɪᴏɴ ᴏɴʟʏ ᴛʜʀᴏᴜɢʜ ᴡʜᴀᴛsᴀᴘᴘ.

  ◦  *ʟɪʙʀᴀʀʏ:* ʙᴀɪʟᴇʏs
  ◦  *ғᴜɴᴄᴛɪᴏɴ:* ᴀssɪsᴛᴀɴᴛ

    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}
  
    「 *${global.vtampt}𝚄𝚂𝙴𝚁 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ᴘʀᴏғɪʟᴇ: ${db.data.users[m.sender].daftar ? 'sᴜᴅᴀʜ ᴛᴇʀᴅᴀғᴛᴀʀ' : 'ʙᴇʟᴜᴍ ᴛᴇʀᴅᴀғᴛᴀʀ'}
  ${vircion} • sᴀʟᴅᴏ: ʀᴘ. ${toRupiah(cekSaldo(m.sender))}
  ${vircion} • ᴇxᴘ: ${exp} / ${requireexp}
  ${vircion} • ʟᴇᴠᴇʟ: ${db.data.users[m.sender].level}
  ${vircion} • ʟɪᴍɪᴛ: ${cekLimit(m.sender)} ʟɪᴍɪᴛ

${monospace("MAIN  MENU")}
  ${vircion} • ${_p}regis
  ${vircion} • ${_p}unregis
  ${vircion} • ${_p}nickname
  ${vircion} • ${_p}noprefix
  ${vircion} • ${_p}multiprefix
  ${vircion} • ${_p}setprefix
  ${vircion} • ${_p}addcmd
  ${vircion} • ${_p}delcmd
  ${vircion} • ${_p}infome
  ${vircion} • ${_p}setprofile
  ${vircion} • ${_p}totaluser
  ${vircion} • ${_p}versibot
  ${vircion} • ${_p}channel
  ${vircion} • ${_p}botgc
  ${vircion} • ${_p}script
  ${vircion} • ${_p}qris
  ${vircion} • ${_p}gold
  ${vircion} • ${_p}saldo
  ${vircion} • ${_p}limit
  ${vircion} • ${_p}cekgold
  ${vircion} • ${_p}ceksaldo
  ${vircion} • ${_p}ceklimit
  ${vircion} • ${_p}tfsaldo
  ${vircion} • ${_p}owner
  ${vircion} • ${_p}ping
  ${vircion} • ${_p}runtime
  ${vircion} • ${_p}runtimeserver
  ${vircion} • ${_p}dashboard
  ${vircion} • ${_p}payment
  ${vircion} • ${_p}totalfitur
  ${vircion} • ${_p}saran
  ${vircion} • ${_p}ceksaran
  ${vircion} • ${_p}report
  ${vircion} • ${_p}reply
  ${vircion} • ${_p}reports
  ${vircion} • ${_p}delreports
  ${vircion} • ${_p}cekreports
  ${vircion} • ${_p}del
  ${vircion} • ${_p}cekapikey

${monospace("OWNER  MENU")}
  ${vircion} • ${_p}addcase
  ${vircion} • ${_p}delcase
  ${vircion} • ${_p}getcase
  ${vircion} • ${_p}infobotset
  ${vircion} • ${_p}cekcase
  ${vircion} • ${_p}listcase
  ${vircion} • ${_p}upch
  ${vircion} • ${_p}gantifile
  ${vircion} • ${_p}sendfitur
  ${vircion} • ${_p}backup
  ${vircion} • ${_p}getsession
  ${vircion} • ${_p}delsession
  ${vircion} • ${_p}sendsc
  ${vircion} • ${_p}getscript
  ${vircion} • ${_p}addres
  ${vircion} • ${_p}delres
  ${vircion} • ${_p}listres
  ${vircion} • ${_p}addprem
  ${vircion} • ${_p}delprem
  ${vircion} • ${_p}listprem
  ${vircion} • ${_p}addowner
  ${vircion} • ${_p}delowner
  ${vircion} • ${_p}listowner
  ${vircion} • ${_p}addgold
  ${vircion} • ${_p}mingold
  ${vircion} • ${_p}addsaldo
  ${vircion} • ${_p}minsaldo
  ${vircion} • ${_p}addsaldoewallet
  ${vircion} • ${_p}minsaldoewallet
  ${vircion} • ${_p}setredeem
  ${vircion} • ${_p}delredeem
  ${vircion} • ${_p}listredeem
  ${vircion} • ${_p}addlimit
  ${vircion} • ${_p}minlimit
  ${vircion} • ${_p}resetlimit
  ${vircion} • ${_p}resetsaldo
  ${vircion} • ${_p}resetdb
  ${vircion} • ${_p}sampah
  ${vircion} • ${_p}delsampah
  ${vircion} • ${_p}delsampah2
  ${vircion} • ${_p}clearsesi
  ${vircion} • ${_p}clearram
  ${vircion} • ${_p}getdb
  ${vircion} • ${_p}getfolder
  ${vircion} • ${_p}getfile
  ${vircion} • ${_p}getfile2
  ${vircion} • ${_p}addfolder
  ${vircion} • ${_p}addfile
  ${vircion} • ${_p}delfolder
  ${vircion} • ${_p}delfile
  ${vircion} • ${_p}bcgc
  ${vircion} • ${_p}bc
  ${vircion} • ${_p}bcimg
  ${vircion} • ${_p}bcvid
  ${vircion} • ${_p}jpm
  ${vircion} • ${_p}bcsl
  ${vircion} • ${_p}adduserdb
  ${vircion} • ${_p}deluserdb
  ${vircion} • ${_p}block
  ${vircion} • ${_p}unblock
  ${vircion} • ${_p}listblock
  ${vircion} • ${_p}listakses
  ${vircion} • ${_p}cekakses
  ${vircion} • ${_p}public
  ${vircion} • ${_p}self
  ${vircion} • ${_p}restart
  ${vircion} • ${_p}join
  ${vircion} • ${_p}setnamabot
  ${vircion} • ${_p}setbiobot
  ${vircion} • ${_p}setppbot
  ${vircion} • ${_p}delppbot
  ${vircion} • ${_p}autotyping
  ${vircion} • ${_p}autorecording
  ${vircion} • ${_p}kickall
  ${vircion} • ${_p}autoread
  ${vircion} • ${_p}upswtag
  ${vircion} • ${_p}upswtag2
  ${vircion} • ${_p}onlyregister
  ${vircion} • ${_p}gcjoinonly
  ${vircion} • ${_p}grupaddset
  ${vircion} • ${_p}rpgsetstats
  ${vircion} • ${_p}autosholat
  ${vircion} • ${_p}autobio
  ${vircion} • ${_p}autolimit
  ${vircion} • ${_p}autoviewsw
  ${vircion} • ${_p}similarity
  ${vircion} • ${_p}anticall
  ${vircion} • ${_p}antispam
  ${vircion} • ${_p}ban
  ${vircion} • ${_p}unban
  ${vircion} • ${_p}listban
  ${vircion} • ${_p}creategc
  ${vircion} • ${_p}clearchat
  ${vircion} • ${_p}setmenu
  ${vircion} • ${_p}addexc
  ${vircion} • ${_p}delexc
  ${vircion} • ${_p}listexc
  ${vircion} • ${_p}read
  ${vircion} • ${_p}gconly
  ${vircion} • ${_p}pconly
 
${monospace("GROUP  MENU")}
  ${vircion} • ${_p}acc
  ${vircion} • ${_p}acc approve all
  ${vircion} • ${_p}acc reject all
  ${vircion} • ${_p}add
  ${vircion} • ${_p}kick
  ${vircion} • ${_p}addtime
  ${vircion} • ${_p}kicktime
  ${vircion} • ${_p}invite
  ${vircion} • ${_p}linkgc
  ${vircion} • ${_p}revoke
  ${vircion} • ${_p}blacklist
  ${vircion} • ${_p}unblacklist
  ${vircion} • ${_p}listblacklist
  ${vircion} • ${_p}whitelist
  ${vircion} • ${_p}unwhitelist
  ${vircion} • ${_p}listwhitelist
  ${vircion} • ${_p}warn
  ${vircion} • ${_p}unwarn
  ${vircion} • ${_p}listwarn
  ${vircion} • ${_p}gcsider
  ${vircion} • ${_p}promote
  ${vircion} • ${_p}demote
  ${vircion} • ${_p}open
  ${vircion} • ${_p}close
  ${vircion} • ${_p}opentime
  ${vircion} • ${_p}closetime
  ${vircion} • ${_p}setsubjek
  ${vircion} • ${_p}setdesk
  ${vircion} • ${_p}setppgc
  ${vircion} • ${_p}delppgc
  ${vircion} • ${_p}getnamagc
  ${vircion} • ${_p}getdeskgc
  ${vircion} • ${_p}getppgc
  ${vircion} • ${_p}getname
  ${vircion} • ${_p}getpp
  ${vircion} • ${_p}getbio
  ${vircion} • ${_p}infogc
  ${vircion} • ${_p}topglobal
  ${vircion} • ${_p}toplocal
  ${vircion} • ${_p}leavegc
  ${vircion} • ${_p}botoutlist
  ${vircion} • ${_p}quoted
  ${vircion} • ${_p}antibot
  ${vircion} • ${_p}antilink
  ${vircion} • ${_p}antilinkgc
  ${vircion} • ${_p}antilinkgc2
  ${vircion} • ${_p}antilinkch
  ${vircion} • ${_p}antilinkch2
  ${vircion} • ${_p}antiaudio
  ${vircion} • ${_p}antisticker
  ${vircion} • ${_p}antipesan
  ${vircion} • ${_p}antitagsw
  ${vircion} • ${_p}antiimage
  ${vircion} • ${_p}antipromosi
  ${vircion} • ${_p}antivideo
  ${vircion} • ${_p}antidocument
  ${vircion} • ${_p}antivirtex
  ${vircion} • ${_p}antitoxic
  ${vircion} • ${_p}hidetag
  ${vircion} • ${_p}tagall
  ${vircion} • ${_p}totag
  ${vircion} • ${_p}del
  ${vircion} • ${_p}mute
  ${vircion} • ${_p}bangc
  ${vircion} • ${_p}unbangc
  ${vircion} • ${_p}afk
  ${vircion} • ${_p}liston
  ${vircion} • ${_p}welcome
  ${vircion} • ${_p}setwelcome
  ${vircion} • ${_p}setgoodbye
 
${monospace("GAMES  MENU")}
  ${vircion} • ${_p}family100
  ${vircion} • ${_p}suitpvp
  ${vircion} • ${_p}tictactoe
  ${vircion} • ${_p}delttt
  ${vircion} • ${_p}petakbom
  ${vircion} • ${_p}delpetakbom
  ${vircion} • ${_p}casino
  ${vircion} • ${_p}delcasino
  ${vircion} • ${_p}werewolf
  ${vircion} • ${_p}tebakgambar
  ${vircion} • ${_p}tebakkalimat
  ${vircion} • ${_p}tebakkata
  ${vircion} • ${_p}tebaklirik
  ${vircion} • ${_p}tebakanime
  ${vircion} • ${_p}tebaklagu
  ${vircion} • ${_p}kuis
  ${vircion} • ${_p}tebakkimia
  ${vircion} • ${_p}tebakbendera
  ${vircion} • ${_p}siapakahaku
  ${vircion} • ${_p}asahotak
  ${vircion} • ${_p}susukata
  ${vircion} • ${_p}caklontong
  ${vircion} • ${_p}math
  ${vircion} • ${_p}tebakgame
  ${vircion} • ${_p}slot
 
${monospace("STORE  MENU")}
  ${vircion} • ${_p}tambah
  ${vircion} • ${_p}kurang
  ${vircion} • ${_p}kali
  ${vircion} • ${_p}bagi
  ${vircion} • ${_p}buygold
  ${vircion} • ${_p}buysaldo
  ${vircion} • ${_p}buypanel
  ${vircion} • ${_p}buyadp
  ${vircion} • ${_p}buyreseller
  ${vircion} • ${_p}cekewallet
  ${vircion} • ${_p}createpanel
  ${vircion} • ${_p}buy1gb
  ${vircion} • ${_p}buy2gb
  ${vircion} • ${_p}buy3gb
  ${vircion} • ${_p}buy4gb
  ${vircion} • ${_p}buy5gb
  ${vircion} • ${_p}list
  ${vircion} • ${_p}addlist
  ${vircion} • ${_p}dellist
  ${vircion} • ${_p}update
  ${vircion} • ${_p}addsewa
  ${vircion} • ${_p}delsewa
  ${vircion} • ${_p}ceksewa
  ${vircion} • ${_p}listsewa
  ${vircion} • ${_p}addproduk
  ${vircion} • ${_p}delproduk
  ${vircion} • ${_p}updateproduk
  ${vircion} • ${_p}listproduk
  ${vircion} • ${_p}diskon
  ${vircion} • ${_p}restok
  ${vircion} • ${_p}beliproduk
  ${vircion} • ${_p}confirm
  ${vircion} • ${_p}cancel
  ${vircion} • ${_p}thistory
  ${vircion} • ${_p}deposit
  ${vircion} • ${_p}bataldeposit
  ${vircion} • ${_p}batalbeli
 
${monospace("MENFES  MENU")}
  ${vircion} • ${_p}anonymous
  ${vircion} • ${_p}start
  ${vircion} • ${_p}mulai
  ${vircion} • ${_p}leave
  ${vircion} • ${_p}keluar
  ${vircion} • ${_p}next
  ${vircion} • ${_p}lanjut
  ${vircion} • ${_p}confess
  ${vircion} • ${_p}menfess
  ${vircion} • ${_p}balasmenfess
  ${vircion} • ${_p}tolakmenfess
  ${vircion} • ${_p}stopmenfess
 
${monospace("CPANEL  MENU")}
  ${vircion} • ${_p}listserver
  ${vircion} • ${_p}delserver
  ${vircion} • ${_p}listuser
  ${vircion} • ${_p}deluser
  ${vircion} • ${_p}addadmin
  ${vircion} • ${_p}deladmin
  ${vircion} • ${_p}listadmin
  ${vircion} • ${_p}1gb
  ${vircion} • ${_p}2gb
  ${vircion} • ${_p}3gb
  ${vircion} • ${_p}4gb
  ${vircion} • ${_p}5gb
  ${vircion} • ${_p}6gb
  ${vircion} • ${_p}7gb
  ${vircion} • ${_p}8gb
  ${vircion} • ${_p}9gb
  ${vircion} • ${_p}10gb
  ${vircion} • ${_p}unli
  ${vircion} • ${_p}suspend
  ${vircion} • ${_p}unsuspend
  ${vircion} • ${_p}reinstall
  ${vircion} • ${_p}startsrv
  ${vircion} • ${_p}stopsrv
  ${vircion} • ${_p}restartsrv
 
${monospace("NGEPUSH  MENU")}
  ${vircion} • ${_p}pushkontak
  ${vircion} • ${_p}pushkontak2
  ${vircion} • ${_p}pushkontakid
  ${vircion} • ${_p}pushkontakgc
  ${vircion} • ${_p}pushkontakidjd
  ${vircion} • ${_p}pushkontakgcjd
  ${vircion} • ${_p}savecontact
  ${vircion} • ${_p}savecontact2
  ${vircion} • ${_p}save
  ${vircion} • ${_p}cekidgc
  ${vircion} • ${_p}listgc
 
${monospace("DOWNLOAD  MENU")}
  ${vircion} • ${_p}mediafire
  ${vircion} • ${_p}mediafire2
  ${vircion} • ${_p}tiktok
  ${vircion} • ${_p}tiktok2
  ${vircion} • ${_p}tiktok3
  ${vircion} • ${_p}ttaudio
  ${vircion} • ${_p}ttslide
  ${vircion} • ${_p}facebook
  ${vircion} • ${_p}facebook2
  ${vircion} • ${_p}instagram
  ${vircion} • ${_p}twitter
  ${vircion} • ${_p}twitter2
  ${vircion} • ${_p}threads
  ${vircion} • ${_p}capcut
  ${vircion} • ${_p}videy
  ${vircion} • ${_p}gdrive
  ${vircion} • ${_p}gdrive2
  ${vircion} • ${_p}terabox
  ${vircion} • ${_p}tinyurl
  ${vircion} • ${_p}vgd
  ${vircion} • ${_p}isgd
  ${vircion} • ${_p}gitclone
  ${vircion} • ${_p}happymod
  ${vircion} • ${_p}dlapk
  ${vircion} • ${_p}xvideodl
  ${vircion} • ${_p}xnxxdl
  ${vircion} • ${_p}pindl
  ${vircion} • ${_p}pastebin
  ${vircion} • ${_p}lirikget
  ${vircion} • ${_p}sfiledl
 
${monospace("CHATAI  MENU")}
  ${vircion} • ${_p}openai
  ${vircion} • ${_p}ai2
  ${vircion} • ${_p}lum
  ${vircion} • ${_p}dimas
  ${vircion} • ${_p}siti
  ${vircion} • ${_p}tuti
  ${vircion} • ${_p}jajang
  ${vircion} • ${_p}simi
  ${vircion} • ${_p}matthew
  ${vircion} • ${_p}kendra
  ${vircion} • ${_p}takumi
  ${vircion} • ${_p}mizuki
  ${vircion} • ${_p}luminai
  ${vircion} • ${_p}luminai
  ${vircion} • ${_p}min
  ${vircion} • ${_p}gpt
  ${vircion} • ${_p}Lyrra
  ${vircion} • ${_p}autoai
  ${vircion} • ${_p}autoaiv2
  ${vircion} • ${_p}gemini
  ${vircion} • ${_p}lora
  ${vircion} • ${_p}joko
  ${vircion} • ${_p}bowo
  ${vircion} • ${_p}gptgo
  ${vircion} • ${_p}blackbox
  ${vircion} • ${_p}metai
  ${vircion} • ${_p}llama
  ${vircion} • ${_p}gpt4o
  ${vircion} • ${_p}gpt4omini
  ${vircion} • ${_p}mistral
  ${vircion} • ${_p}mlarge
  ${vircion} • ${_p}islamai
  ${vircion} • ${_p}venice
  ${vircion} • ${_p}gpt3
  ${vircion} • ${_p}nawai
  ${vircion} • ${_p}lyrrasearch
  ${vircion} • ${_p}aisrc
  ${vircion} • ${_p}claude
  ${vircion} • ${_p}pb-ai
  ${vircion} • ${_p}deepsees
  ${vircion} • ${_p}aibaby
 
${monospace("SEARCH  MENU")}
  ${vircion} • ${_p}alkitab
  ${vircion} • ${_p}playstation
  ${vircion} • ${_p}google
  ${vircion} • ${_p}chrome
  ${vircion} • ${_p}gimage
  ${vircion} • ${_p}bingsrc
  ${vircion} • ${_p}bingimg
  ${vircion} • ${_p}bingvd
  ${vircion} • ${_p}ytsearch
  ${vircion} • ${_p}play
  ${vircion} • ${_p}video
  ${vircion} • ${_p}audio
  ${vircion} • ${_p}ytmp4
  ${vircion} • ${_p}ytmp3
  ${vircion} • ${_p}ttsearch
  ${vircion} • ${_p}ttget
  ${vircion} • ${_p}spotifys
  ${vircion} • ${_p}pin
  ${vircion} • ${_p}news
  ${vircion} • ${_p}wiki
  ${vircion} • ${_p}wikipedia
  ${vircion} • ${_p}wikimedia
  ${vircion} • ${_p}npms
  ${vircion} • ${_p}lirik
  ${vircion} • ${_p}lirik2
  ${vircion} • ${_p}xvideos
  ${vircion} • ${_p}xnxxs
  ${vircion} • ${_p}resep
  ${vircion} • ${_p}bacaresep
  ${vircion} • ${_p}resep2
  ${vircion} • ${_p}bacaresep2
  ${vircion} • ${_p}infocuaca
  ${vircion} • ${_p}infogempa
  ${vircion} • ${_p}kalender
  ${vircion} • ${_p}ppcouple
  ${vircion} • ${_p}jarak
  ${vircion} • ${_p}cerpen
  ${vircion} • ${_p}andro1
  ${vircion} • ${_p}steam
  ${vircion} • ${_p}genius
  ${vircion} • ${_p}library
  ${vircion} • ${_p}liriksrc
  ${vircion} • ${_p}sfilesrc
 
${monospace("NSFW  MENU")}
  ${vircion} • ${_p}nsfw
  ${vircion} • ${_p}waifu
  ${vircion} • ${_p}neko
  ${vircion} • ${_p}shinobu
  ${vircion} • ${_p}megumin
  ${vircion} • ${_p}bully
  ${vircion} • ${_p}cuddle
  ${vircion} • ${_p}cry
  ${vircion} • ${_p}hug
  ${vircion} • ${_p}awoo
  ${vircion} • ${_p}kiss
  ${vircion} • ${_p}lick
  ${vircion} • ${_p}pat
  ${vircion} • ${_p}smug
  ${vircion} • ${_p}bonk
  ${vircion} • ${_p}yeet
  ${vircion} • ${_p}blush
  ${vircion} • ${_p}smile
  ${vircion} • ${_p}wave
  ${vircion} • ${_p}highfive
  ${vircion} • ${_p}handhold
  ${vircion} • ${_p}nom
  ${vircion} • ${_p}bite
  ${vircion} • ${_p}glomp
  ${vircion} • ${_p}slap
  ${vircion} • ${_p}kill
  ${vircion} • ${_p}happy
  ${vircion} • ${_p}wink
  ${vircion} • ${_p}poke
  ${vircion} • ${_p}dance
  ${vircion} • ${_p}cringe
  ${vircion} • ${_p}trap
  ${vircion} • ${_p}blowjob
  ${vircion} • ${_p}hentai
  ${vircion} • ${_p}boobs
  ${vircion} • ${_p}ass
  ${vircion} • ${_p}pussy
  ${vircion} • ${_p}thighs
  ${vircion} • ${_p}lesbian
  ${vircion} • ${_p}lewdneko
  ${vircion} • ${_p}cum

${monospace("RPG  MENU")}
  ${vircion} • ${_p}adventure
  ${vircion} • ${_p}beli
  ${vircion} • ${_p}bank
  ${vircion} • ${_p}shop
  ${vircion} • ${_p}berburu
  ${vircion} • ${_p}crafting
  ${vircion} • ${_p}heal
  ${vircion} • ${_p}nyampah
  ${vircion} • ${_p}inventory
  ${vircion} • ${_p}dailymisi
  ${vircion} • ${_p}weekly
  ${vircion} • ${_p}monthly
  ${vircion} • ${_p}yearly
  ${vircion} • ${_p}ngojek
  ${vircion} • ${_p}polisi
  ${vircion} • ${_p}roket
  ${vircion} • ${_p}wikwik
  ${vircion} • ${_p}ewe-paksa
  ${vircion} • ${_p}open-bo
  ${vircion} • ${_p}selectskill
  ${vircion} • ${_p}cekskill
  ${vircion} • ${_p}makan
  ${vircion} • ${_p}tidur
  ${vircion} • ${_p}mengaji
  ${vircion} • ${_p}transfer
  ${vircion} • ${_p}joinrpg
  ${vircion} • ${_p}exitrpg
  ${vircion} • ${_p}jual
  ${vircion} • ${_p}kerja
  ${vircion} • ${_p}redeem
  ${vircion} • ${_p}memancing
  ${vircion} • ${_p}merampok
  ${vircion} • ${_p}mining
  ${vircion} • ${_p}nebang
  ${vircion} • ${_p}repair
  ${vircion} • ${_p}atmall
  ${vircion} • ${_p}dompet

${monospace("EPHOTO  MENU")}
  ${vircion} • ${_p}glitchtext
  ${vircion} • ${_p}writetext
  ${vircion} • ${_p}advancedglow
  ${vircion} • ${_p}typographytext
  ${vircion} • ${_p}pixelglitch
  ${vircion} • ${_p}neonglitch
  ${vircion} • ${_p}flagtext
  ${vircion} • ${_p}flag3dtext
  ${vircion} • ${_p}deletingtext
  ${vircion} • ${_p}blackpinkstyle
  ${vircion} • ${_p}glowingtext
  ${vircion} • ${_p}underwatertext
  ${vircion} • ${_p}logomaker
  ${vircion} • ${_p}cartoonstyle
  ${vircion} • ${_p}papercutstyle
  ${vircion} • ${_p}watercolortext
  ${vircion} • ${_p}effectclouds
  ${vircion} • ${_p}blackpinklogo
  ${vircion} • ${_p}gradienttext
  ${vircion} • ${_p}summerbeach
  ${vircion} • ${_p}luxurygold
  ${vircion} • ${_p}multicoloredneon
  ${vircion} • ${_p}sandsummer
  ${vircion} • ${_p}galaxywallpaper
  ${vircion} • ${_p}1917style
  ${vircion} • ${_p}makingneon
  ${vircion} • ${_p}royaltext
  ${vircion} • ${_p}freecreate
  ${vircion} • ${_p}galaxystyle
  ${vircion} • ${_p}lighteffects
 
${monospace("CECAN  MENU")}
  ${vircion} • ${_p}hijaber
  ${vircion} • ${_p}jeni
  ${vircion} • ${_p}jiso
  ${vircion} • ${_p}justina
  ${vircion} • ${_p}rose
  ${vircion} • ${_p}ryujin
  ${vircion} • ${_p}malaysia
  ${vircion} • ${_p}vietnam
  ${vircion} • ${_p}korea
  ${vircion} • ${_p}indonesia
  ${vircion} • ${_p}japan
  ${vircion} • ${_p}thailand
  ${vircion} • ${_p}china
 
${monospace("TOOLS  MENU")}
  ${vircion} • ${_p}tobase64
  ${vircion} • ${_p}toori
  ${vircion} • ${_p}noenc
  ${vircion} • ${_p}toraw
  ${vircion} • ${_p}togh
  ${vircion} • ${_p}nulis
  ${vircion} • ${_p}nuliskanan
  ${vircion} • ${_p}nuliskiri
  ${vircion} • ${_p}foliokanan
  ${vircion} • ${_p}foliokiri
  ${vircion} • ${_p}beauty
  ${vircion} • ${_p}flatten
  ${vircion} • ${_p}cfps
  ${vircion} • ${_p}setspeed
  ${vircion} • ${_p}get
  ${vircion} • ${_p}ocr
  ${vircion} • ${_p}cekip
  ${vircion} • ${_p}audio2txt
 
${monospace("VOICE  MENU")}
  ${vircion} • ${_p}bass
  ${vircion} • ${_p}blown
  ${vircion} • ${_p}deep
  ${vircion} • ${_p}earrape
  ${vircion} • ${_p}fast
  ${vircion} • ${_p}fat
  ${vircion} • ${_p}nightcore
  ${vircion} • ${_p}reverse
  ${vircion} • ${_p}robot
  ${vircion} • ${_p}slow
  ${vircion} • ${_p}smooth
  ${vircion} • ${_p}tupai
  ${vircion} • ${_p}echo
  ${vircion} • ${_p}flanger
  ${vircion} • ${_p}vaporwave
  ${vircion} • ${_p}treble
  ${vircion} • ${_p}vibrato
  ${vircion} • ${_p}distortion
  ${vircion} • ${_p}karaoke
  ${vircion} • ${_p}chipmunk
 
${monospace("QUOTES MENU")}
  ${vircion} • ${_p}faktaunik
  ${vircion} • ${_p}katailham
  ${vircion} • ${_p}katasenja
  ${vircion} • ${_p}motivasi
  ${vircion} • ${_p}pantun
  ${vircion} • ${_p}puisi
  ${vircion} • ${_p}quotes
  ${vircion} • ${_p}quotesanime
  ${vircion} • ${_p}quotesbucin
  ${vircion} • ${_p}quotesdilan
  ${vircion} • ${_p}quotesislamic

${monospace("FUN  MENU")}
  ${vircion} • ${_p}apakah
  ${vircion} • ${_p}bisakah
  ${vircion} • ${_p}kapankah
  ${vircion} • ${_p}cekganteng
  ${vircion} • ${_p}cekcantik
  ${vircion} • ${_p}cekgay
  ${vircion} • ${_p}ceklesbi
  ${vircion} • ${_p}ceksifat
  ${vircion} • ${_p}cekhoby
  ${vircion} • ${_p}cekjodoh
  ${vircion} • ${_p}top
  ${vircion} • ${_p}bego
  ${vircion} • ${_p}goblok
  ${vircion} • ${_p}janda
  ${vircion} • ${_p}perawan
  ${vircion} • ${_p}babi
  ${vircion} • ${_p}tolol
  ${vircion} • ${_p}pekok
  ${vircion} • ${_p}jancok
  ${vircion} • ${_p}pinter
  ${vircion} • ${_p}pintar
  ${vircion} • ${_p}asu
  ${vircion} • ${_p}bodoh
  ${vircion} • ${_p}gay
  ${vircion} • ${_p}lesby
  ${vircion} • ${_p}bajingan
  ${vircion} • ${_p}jancok
  ${vircion} • ${_p}anjing
  ${vircion} • ${_p}anjg
  ${vircion} • ${_p}anjj
  ${vircion} • ${_p}anj
  ${vircion} • ${_p}ngentod
  ${vircion} • ${_p}ngentot
  ${vircion} • ${_p}monyet
  ${vircion} • ${_p}mastah
  ${vircion} • ${_p}newbie
  ${vircion} • ${_p}bangsat
  ${vircion} • ${_p}bangke
  ${vircion} • ${_p}sange
  ${vircion} • ${_p}sangean
  ${vircion} • ${_p}dakjal
  ${vircion} • ${_p}horny
  ${vircion} • ${_p}wibu
  ${vircion} • ${_p}puki
  ${vircion} • ${_p}puqi
  ${vircion} • ${_p}peak
  ${vircion} • ${_p}pantex
  ${vircion} • ${_p}pantek
  ${vircion} • ${_p}setan
  ${vircion} • ${_p}iblis
  ${vircion} • ${_p}cacat
  ${vircion} • ${_p}yatim
  ${vircion} • ${_p}piatu
 
${monospace("ISLAMIC  MENU")}
  ${vircion} • ${_p}jadwalsholat
  ${vircion} • ${_p}alquran
  ${vircion} • ${_p}asmaulhusna
  ${vircion} • ${_p}niatsholat
  ${vircion} • ${_p}surah
  ${vircion} • ${_p}berdoa
  ${vircion} • ${_p}ayatkursi
  ${vircion} • ${_p}gislam
  ${vircion} • ${_p}kataislam
  ${vircion} • ${_p}pantunislam
 
${monospace("MAKER  MENU")}
  ${vircion} • ${_p}txt2img
  ${vircion} • ${_p}txt2imgv2
  ${vircion} • ${_p}txt2imgv3
  ${vircion} • ${_p}txt2imgv4
  ${vircion} • ${_p}txt2imgv5
  ${vircion} • ${_p}txt2imgv6
  ${vircion} • ${_p}emojimix
  ${vircion} • ${_p}attp
  ${vircion} • ${_p}ttp
  ${vircion} • ${_p}attp2':
  ${vircion} • ${_p}attp3':
  ${vircion} • ${_p}attp4':
  ${vircion} • ${_p}ttp2':
  ${vircion} • ${_p}ttp3':
  ${vircion} • ${_p}ttp4':
  ${vircion} • ${_p}ttp5':
  ${vircion} • ${_p}brat
  ${vircion} • ${_p}bratvid
  ${vircion} • ${_p}bratcewe
  ${vircion} • ${_p}bratanim
  ${vircion} • ${_p}blurimg
  ${vircion} • ${_p}facepalm
  ${vircion} • ${_p}beautiful
  ${vircion} • ${_p}textimg
 
${monospace("STALK MENU")}
  ${vircion} • ${_p}ghrepo
  ${vircion} • ${_p}ghrepo2
  ${vircion} • ${_p}ytstalk
  ${vircion} • ${_p}ttstalk
  ${vircion} • ${_p}ffstalk
  ${vircion} • ${_p}mlstalk
  ${vircion} • ${_p}chstalk
  ${vircion} • ${_p}igstalk
  ${vircion} • ${_p}npmstalk
 
${monospace("PREMIUM  MENU")}
  ${vircion} • ${_p}gpt4o
  ${vircion} • ${_p}cekprem
  ${vircion} • ${_p}metai
  ${vircion} • ${_p}lora
  ${vircion} • ${_p}nsfw
  ${vircion} • ${_p}waifu
  ${vircion} • ${_p}neko
  ${vircion} • ${_p}shinobu
  ${vircion} • ${_p}megumin
  ${vircion} • ${_p}bully
  ${vircion} • ${_p}cuddle
  ${vircion} • ${_p}cry
  ${vircion} • ${_p}hug
  ${vircion} • ${_p}awoo
  ${vircion} • ${_p}kiss
  ${vircion} • ${_p}lick
  ${vircion} • ${_p}pat
  ${vircion} • ${_p}smug
  ${vircion} • ${_p}bonk
  ${vircion} • ${_p}yeet
  ${vircion} • ${_p}blush
  ${vircion} • ${_p}smile
  ${vircion} • ${_p}wave
  ${vircion} • ${_p}highfive
  ${vircion} • ${_p}handhold
  ${vircion} • ${_p}nom
  ${vircion} • ${_p}bite
  ${vircion} • ${_p}glomp
  ${vircion} • ${_p}slap
  ${vircion} • ${_p}kill
  ${vircion} • ${_p}happy
  ${vircion} • ${_p}wink
  ${vircion} • ${_p}poke
  ${vircion} • ${_p}dance
  ${vircion} • ${_p}cringe
  ${vircion} • ${_p}trap
  ${vircion} • ${_p}blowjob
  ${vircion} • ${_p}hentai
  ${vircion} • ${_p}boobs
  ${vircion} • ${_p}ass
  ${vircion} • ${_p}pussy
  ${vircion} • ${_p}thighs
  ${vircion} • ${_p}lesbian
  ${vircion} • ${_p}lewdneko
  ${vircion} • ${_p}cum
 
 ${monospace("ANIME MENU")}
  ${vircion} • ${_p}akiyama
  ${vircion} • ${_p}ana
  ${vircion} • ${_p}art
  ${vircion} • ${_p}asuna
  ${vircion} • ${_p}ayuzawa
  ${vircion} • ${_p}boruto
  ${vircion} • ${_p}bts
  ${vircion} • ${_p}cartoon
  ${vircion} • ${_p}chiho
  ${vircion} • ${_p}chitoge
  ${vircion} • ${_p}cosplay
  ${vircion} • ${_p}cosplayloli
  ${vircion} • ${_p}cosplaysagiri
  ${vircion} • ${_p}cyber
  ${vircion} • ${_p}deidara
  ${vircion} • ${_p}doraemon
  ${vircion} • ${_p}elaina
  ${vircion} • ${_p}emilia
  ${vircion} • ${_p}erza
  ${vircion} • ${_p}exo
  ${vircion} • ${_p}gamewallpaper
  ${vircion} • ${_p}gremory
  ${vircion} • ${_p}hacker
  ${vircion} • ${_p}hestia
  ${vircion} • ${_p}hinata
  ${vircion} • ${_p}husbu
  ${vircion} • ${_p}inori
  ${vircion} • ${_p}islamic
  ${vircion} • ${_p}isuzu
  ${vircion} • ${_p}itachi
  ${vircion} • ${_p}itori
  ${vircion} • ${_p}jennie
  ${vircion} • ${_p}jiso
  ${vircion} • ${_p}justina
  ${vircion} • ${_p}kaga
  ${vircion} • ${_p}kagura
  ${vircion} • ${_p}kakasih
  ${vircion} • ${_p}kaori
  ${vircion} • ${_p}keneki
  ${vircion} • ${_p}kotori
  ${vircion} • ${_p}kurumi
  ${vircion} • ${_p}lisa
  ${vircion} • ${_p}madara
  ${vircion} • ${_p}megumin
  ${vircion} • ${_p}mikasa
  ${vircion} • ${_p}mikey
  ${vircion} • ${_p}miku
  ${vircion} • ${_p}minato
  ${vircion} • ${_p}mountain
  ${vircion} • ${_p}naruto
  ${vircion} • ${_p}neko2
  ${vircion} • ${_p}nekonime
  ${vircion} • ${_p}nezuko
  ${vircion} • ${_p}onepiece
  ${vircion} • ${_p}pentol
  ${vircion} • ${_p}pokemon
  ${vircion} • ${_p}programming
  ${vircion} • ${_p}randomnime
  ${vircion} • ${_p}randomnime2
  ${vircion} • ${_p}rize
  ${vircion} • ${_p}rose
  ${vircion} • ${_p}sagiri
  ${vircion} • ${_p}sakura
  ${vircion} • ${_p}sasuke
  ${vircion} • ${_p}satanic
  ${vircion} • ${_p}shina
  ${vircion} • ${_p}shinka
  ${vircion} • ${_p}shinomiya
  ${vircion} • ${_p}shizuka
  ${vircion} • ${_p}shota
  ${vircion} • ${_p}shortquote
  ${vircion} • ${_p}space
  ${vircion} • ${_p}technology
  ${vircion} • ${_p}tejina
  ${vircion} • ${_p}toukachan
  ${vircion} • ${_p}tsunade
  ${vircion} • ${_p}yotsuba
  ${vircion} • ${_p}yuki
  ${vircion} • ${_p}yulibocil
  ${vircion} • ${_p}yumeko
 
${monospace("OTHERS  MENU")}
  ${vircion} • ${_p}sound1 - sound200
  ${vircion} • ${_p}sad1 - sad55
  ${vircion} • ${_p}cekidch
  ${vircion} • ${_p}aturanbot
  ${vircion} • ${_p}sewabot
  ${vircion} • ${_p}ceknickff
  ${vircion} • ${_p}ceknickml
  ${vircion} • ${_p}diffusion
  ${vircion} • ${_p}hdimg
  ${vircion} • ${_p}hdimg2
  ${vircion} • ${_p}recolor
  ${vircion} • ${_p}dehaze
  ${vircion} • ${_p}upscala
  ${vircion} • ${_p}hdvid
  ${vircion} • ${_p}readmore
  ${vircion} • ${_p}tourl
  ${vircion} • ${_p}tourl2
  ${vircion} • ${_p}tourl3
  ${vircion} • ${_p}catbox
  ${vircion} • ${_p}telegraph
  ${vircion} • ${_p}ssweb
  ${vircion} • ${_p}nobg
  ${vircion} • ${_p}resize
  ${vircion} • ${_p}qcstik
  ${vircion} • ${_p}qckode
  ${vircion} • ${_p}stiker
  ${vircion} • ${_p}smeme
  ${vircion} • ${_p}swm
  ${vircion} • ${_p}tts
  ${vircion} • ${_p}say2
  ${vircion} • ${_p}say3
  ${vircion} • ${_p}readvo
  ${vircion} • ${_p}getvideo
  ${vircion} • ${_p}getmusic
  ${vircion} • ${_p}cekkhodam
  ${vircion} • ${_p}toimg
  ${vircion} • ${_p}tovid
  ${vircion} • ${_p}tomp3
  ${vircion} • ${_p}tovn
  ${vircion} • ${_p}listpc
  ${vircion} • ${_p}translate
  ${vircion} • ${_p}listbahasa
  ${vircion} • ${_p}toanime
  ${vircion} • ${_p}toreal
  ${vircion} • ${_p}ytkomen
  ${vircion} • ${_p}carbon
  ${vircion} • ${_p}hytamkan
  ${vircion} • ${_p}hijabkan
  ${vircion} • ${_p}botakin
  ${vircion} • ${_p}hitung
  ${vircion} • ${_p}whatmusic
  ${vircion} • ${_p}stcrandom
  ${vircion} • ${_p}akiyama
  ${vircion} • ${_p}ana
  ${vircion} • ${_p}art
  ${vircion} • ${_p}asuna
  ${vircion} • ${_p}ayuzawa
  ${vircion} • ${_p}boruto
  ${vircion} • ${_p}bts
  ${vircion} • ${_p}cartoon
  ${vircion} • ${_p}chiho
  ${vircion} • ${_p}chitoge
  ${vircion} • ${_p}cosplay
  ${vircion} • ${_p}cosplayloli
  ${vircion} • ${_p}cosplaysagiri
  ${vircion} • ${_p}cyber
  ${vircion} • ${_p}deidara
  ${vircion} • ${_p}doraemon
  ${vircion} • ${_p}elaina
  ${vircion} • ${_p}emilia
  ${vircion} • ${_p}erza
  ${vircion} • ${_p}exo
  ${vircion} • ${_p}gamewallpaper
  ${vircion} • ${_p}gremory
  ${vircion} • ${_p}hacker
  ${vircion} • ${_p}hestia
  ${vircion} • ${_p}hinata
  ${vircion} • ${_p}husbu
  ${vircion} • ${_p}inori
  ${vircion} • ${_p}islamic
  ${vircion} • ${_p}isuzu
  ${vircion} • ${_p}itachi
  ${vircion} • ${_p}itori
  ${vircion} • ${_p}jennie
  ${vircion} • ${_p}jiso
  ${vircion} • ${_p}justina`
      await menuv1(teks)
    }
    break

    case 'menulistsub':
    case 'listsubmenu':
    case 'menulist':
    case 'listmenu':
    case 'listmenu-v': {
      lyreact()
      let teks = `    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("LIST  MENU")}
  ${vircion} • ${_p}listmenu
  ${vircion} • ${_p}voicemenu
  ${vircion} • ${_p}toolsmenu
  ${vircion} • ${_p}cecanmenu
  ${vircion} • ${_p}ephotomenu
  ${vircion} • ${_p}rpgmenu
  ${vircion} • ${_p}nsfwmenu
  ${vircion} • ${_p}searchmenu
  ${vircion} • ${_p}chataimenu
  ${vircion} • ${_p}pushmenu
  ${vircion} • ${_p}cpanelmenu
  ${vircion} • ${_p}menfesmenu
  ${vircion} • ${_p}storemenu
  ${vircion} • ${_p}gamemenu
  ${vircion} • ${_p}groupmenu
  ${vircion} • ${_p}ownermenu
  ${vircion} • ${_p}mainmenu
  ${vircion} • ${_p}othermenu
  ${vircion} • ${_p}animemenu
  ${vircion} • ${_p}stalkermenu
  ${vircion} • ${_p}islamicmenu
  ${vircion} • ${_p}funmenu
  ${vircion} • ${_p}quotesmenu
  ${vircion} • ${_p}downloadmenu`
      await menuv1(teks)
    }
    break

    case 'mainmenu':
    case 'mainmenu-v': {
      lyreact()
      let teks = `    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("MAIN  MENU")}
  ${vircion} • ${_p}regis
  ${vircion} • ${_p}unregis
  ${vircion} • ${_p}nickname
  ${vircion} • ${_p}noprefix
  ${vircion} • ${_p}multiprefix
  ${vircion} • ${_p}setprefix
  ${vircion} • ${_p}addcmd
  ${vircion} • ${_p}delcmd
  ${vircion} • ${_p}infome
  ${vircion} • ${_p}setprofile
  ${vircion} • ${_p}totaluser
  ${vircion} • ${_p}versibot
  ${vircion} • ${_p}channel
  ${vircion} • ${_p}botgc
  ${vircion} • ${_p}script
  ${vircion} • ${_p}qris
  ${vircion} • ${_p}gold
  ${vircion} • ${_p}saldo
  ${vircion} • ${_p}limit
  ${vircion} • ${_p}cekgold
  ${vircion} • ${_p}ceksaldo
  ${vircion} • ${_p}ceklimit
  ${vircion} • ${_p}tfsaldo
  ${vircion} • ${_p}owner
  ${vircion} • ${_p}ping
  ${vircion} • ${_p}dashboard
  ${vircion} • ${_p}runtime
  ${vircion} • ${_p}runtimeserver
  ${vircion} • ${_p}payment
  ${vircion} • ${_p}totalfitur
  ${vircion} • ${_p}saran
  ${vircion} • ${_p}ceksaran
  ${vircion} • ${_p}report
  ${vircion} • ${_p}reply
  ${vircion} • ${_p}reports
  ${vircion} • ${_p}delreports
  ${vircion} • ${_p}cekreports
  ${vircion} • ${_p}del
  ${vircion} • ${_p}cekapikey`
      await menuv1(teks)
    }
    break
    case 'ownermenu':
    case 'ownermenu-v': {
      lyreact()
      let teks = `    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("OWNER  MENU")}
  ${vircion} • ${_p}addcase
  ${vircion} • ${_p}delcase
  ${vircion} • ${_p}getcase
  ${vircion} • ${_p}infobotset
  ${vircion} • ${_p}cekcase
  ${vircion} • ${_p}listcase
  ${vircion} • ${_p}upch
  ${vircion} • ${_p}gantifile
  ${vircion} • ${_p}sendfitur
  ${vircion} • ${_p}backup
  ${vircion} • ${_p}getsession
  ${vircion} • ${_p}delsession
  ${vircion} • ${_p}sendsc
  ${vircion} • ${_p}getscript
  ${vircion} • ${_p}addres
  ${vircion} • ${_p}delres
  ${vircion} • ${_p}listres
  ${vircion} • ${_p}addprem
  ${vircion} • ${_p}delprem
  ${vircion} • ${_p}listprem
  ${vircion} • ${_p}addowner
  ${vircion} • ${_p}delowner
  ${vircion} • ${_p}listowner
  ${vircion} • ${_p}addgold
  ${vircion} • ${_p}mingold
  ${vircion} • ${_p}addsaldo
  ${vircion} • ${_p}minsaldo
  ${vircion} • ${_p}addsaldoewallet
  ${vircion} • ${_p}minsaldoewallet
  ${vircion} • ${_p}setredeem
  ${vircion} • ${_p}delredeem
  ${vircion} • ${_p}listredeem
  ${vircion} • ${_p}addlimit
  ${vircion} • ${_p}minlimit
  ${vircion} • ${_p}resetlimit
  ${vircion} • ${_p}resetsaldo
  ${vircion} • ${_p}resetdb
  ${vircion} • ${_p}sampah
  ${vircion} • ${_p}delsampah
  ${vircion} • ${_p}delsampah2
  ${vircion} • ${_p}clearsesi
  ${vircion} • ${_p}clearram
  ${vircion} • ${_p}getdb
  ${vircion} • ${_p}getfolder
  ${vircion} • ${_p}getfile
  ${vircion} • ${_p}getfile2
  ${vircion} • ${_p}addfolder
  ${vircion} • ${_p}addfile
  ${vircion} • ${_p}delfolder
  ${vircion} • ${_p}delfile
  ${vircion} • ${_p}bcgc
  ${vircion} • ${_p}bc
  ${vircion} • ${_p}jpm
  ${vircion} • ${_p}bcimg
  ${vircion} • ${_p}bcvid
  ${vircion} • ${_p}bcsl
  ${vircion} • ${_p}adduserdb
  ${vircion} • ${_p}deluserdb
  ${vircion} • ${_p}block
  ${vircion} • ${_p}unblock
  ${vircion} • ${_p}listblock
  ${vircion} • ${_p}listakses
  ${vircion} • ${_p}cekakses
  ${vircion} • ${_p}public
  ${vircion} • ${_p}self
  ${vircion} • ${_p}restart
  ${vircion} • ${_p}join
  ${vircion} • ${_p}setnamabot
  ${vircion} • ${_p}setbiobot
  ${vircion} • ${_p}setppbot
  ${vircion} • ${_p}delppbot
  ${vircion} • ${_p}kickall
  ${vircion} • ${_p}autotyping
  ${vircion} • ${_p}autorecording
  ${vircion} • ${_p}autoread
  ${vircion} • ${_p}autostiker
  ${vircion} • ${_p}upswtag
  ${vircion} • ${_p}upswtag2
  ${vircion} • ${_p}onlyregister
  ${vircion} • ${_p}gcjoinonly
  ${vircion} • ${_p}grupaddset
  ${vircion} • ${_p}rpgsetstats
  ${vircion} • ${_p}autosholat
  ${vircion} • ${_p}autobio
  ${vircion} • ${_p}autolimit
  ${vircion} • ${_p}autoviewsw
  ${vircion} • ${_p}similarity
  ${vircion} • ${_p}anticall
  ${vircion} • ${_p}ban
  ${vircion} • ${_p}unban
  ${vircion} • ${_p}listban
  ${vircion} • ${_p}creategc
  ${vircion} • ${_p}clearchat
  ${vircion} • ${_p}setmenu
  ${vircion} • ${_p}addexc
  ${vircion} • ${_p}delexc
  ${vircion} • ${_p}listexc
  ${vircion} • ${_p}read
  ${vircion} • ${_p}gconly
  ${vircion} • ${_p}pconly`
      await menuv1(teks)
    }
    break

    case 'grupmenu':
    case 'grupmenu-v':
    case 'groupmenu':
    case 'groupmenu-v': {
      lyreact()
      let teks = `    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("GROUP  MENU")}
  ${vircion} • ${_p}acc
  ${vircion} • ${_p}acc approve all
  ${vircion} • ${_p}acc reject all
  ${vircion} • ${_p}add
  ${vircion} • ${_p}kick
  ${vircion} • ${_p}addtime
  ${vircion} • ${_p}kicktime
  ${vircion} • ${_p}invite
  ${vircion} • ${_p}linkgc
  ${vircion} • ${_p}revoke
  ${vircion} • ${_p}blacklist
  ${vircion} • ${_p}unblacklist
  ${vircion} • ${_p}listblacklist
  ${vircion} • ${_p}whitelist
  ${vircion} • ${_p}unwhitelist
  ${vircion} • ${_p}listwhitelist
  ${vircion} • ${_p}warn
  ${vircion} • ${_p}unwarn
  ${vircion} • ${_p}listwarn
  ${vircion} • ${_p}gcsider
  ${vircion} • ${_p}promote
  ${vircion} • ${_p}demote
  ${vircion} • ${_p}open
  ${vircion} • ${_p}close
  ${vircion} • ${_p}opentime
  ${vircion} • ${_p}closetime
  ${vircion} • ${_p}setsubjek
  ${vircion} • ${_p}setdesk
  ${vircion} • ${_p}setppgc
  ${vircion} • ${_p}delppgc
  ${vircion} • ${_p}getnamagc
  ${vircion} • ${_p}getdeskgc
  ${vircion} • ${_p}getppgc
  ${vircion} • ${_p}getname
  ${vircion} • ${_p}getpp
  ${vircion} • ${_p}getbio
  ${vircion} • ${_p}infogc
  ${vircion} • ${_p}topglobal
  ${vircion} • ${_p}toplocal
  ${vircion} • ${_p}leavegc
  ${vircion} • ${_p}botoutlist
  ${vircion} • ${_p}quoted
  ${vircion} • ${_p}antibot
  ${vircion} • ${_p}antilink
  ${vircion} • ${_p}antilinkgc
  ${vircion} • ${_p}antilinkgc2
  ${vircion} • ${_p}antilinkch
  ${vircion} • ${_p}antilinkch2
  ${vircion} • ${_p}antiaudio
  ${vircion} • ${_p}antisticker
  ${vircion} • ${_p}antipesan
  ${vircion} • ${_p}antitagsw
  ${vircion} • ${_p}antiimage
  ${vircion} • ${_p}antipromosi
  ${vircion} • ${_p}antivideo
  ${vircion} • ${_p}antidocument
  ${vircion} • ${_p}antivirtex
  ${vircion} • ${_p}antitoxic
  ${vircion} • ${_p}hidetag
  ${vircion} • ${_p}spamhidetag
  ${vircion} • ${_p}tagall
  ${vircion} • ${_p}totag
  ${vircion} • ${_p}del
  ${vircion} • ${_p}mute
  ${vircion} • ${_p}bangc
  ${vircion} • ${_p}unbangc
  ${vircion} • ${_p}afk
  ${vircion} • ${_p}liston
  ${vircion} • ${_p}welcome
  ${vircion} • ${_p}setwelcome
  ${vircion} • ${_p}setgoodbye`
      await menuv1(teks)
    }
    break

    case 'gamemenu':
    case 'gamemenu-v':
    case 'gamesmenu':
    case 'gamesmenu-v': {
      lyreact()
      let teks = `    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("GAMES  MENU")}
  ${vircion} • ${_p}family100
  ${vircion} • ${_p}suitpvp
  ${vircion} • ${_p}tictactoe
  ${vircion} • ${_p}delttt
  ${vircion} • ${_p}petakbom
  ${vircion} • ${_p}delpetakbom
  ${vircion} • ${_p}casino
  ${vircion} • ${_p}delcasino
  ${vircion} • ${_p}werewolf
  ${vircion} • ${_p}tebakgambar
  ${vircion} • ${_p}tebakkalimat
  ${vircion} • ${_p}tebakkata
  ${vircion} • ${_p}tebaklirik
  ${vircion} • ${_p}tebakanime
  ${vircion} • ${_p}tebaklagu
  ${vircion} • ${_p}kuis
  ${vircion} • ${_p}tebakkimia
  ${vircion} • ${_p}tebakbendera
  ${vircion} • ${_p}siapakahaku
  ${vircion} • ${_p}asahotak
  ${vircion} • ${_p}susukata
  ${vircion} • ${_p}caklontong
  ${vircion} • ${_p}math
  ${vircion} • ${_p}tebakgame
  ${vircion} • ${_p}slot`
      await menuv1(teks)
    }
    break

    case 'storemenu':
    case 'storemenu-v': {
      lyreact()
      let teks = `    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("STORE  MENU")}
  ${vircion} • ${_p}tambah
  ${vircion} • ${_p}kurang
  ${vircion} • ${_p}kali
  ${vircion} • ${_p}bagi
  ${vircion} • ${_p}cekewallet
  ${vircion} • ${_p}buygold
  ${vircion} • ${_p}buysaldo
  ${vircion} • ${_p}buypanel
  ${vircion} • ${_p}buyadp
  ${vircion} • ${_p}buyreseller
  ${vircion} • ${_p}createpanel
  ${vircion} • ${_p}buy1gb
  ${vircion} • ${_p}buy2gb
  ${vircion} • ${_p}buy3gb
  ${vircion} • ${_p}buy4gb
  ${vircion} • ${_p}buy5gb
  ${vircion} • ${_p}list
  ${vircion} • ${_p}addlist
  ${vircion} • ${_p}dellist
  ${vircion} • ${_p}update
  ${vircion} • ${_p}addsewa
  ${vircion} • ${_p}delsewa
  ${vircion} • ${_p}ceksewa
  ${vircion} • ${_p}listsewa
  ${vircion} • ${_p}addproduk
  ${vircion} • ${_p}delproduk
  ${vircion} • ${_p}updateproduk
  ${vircion} • ${_p}listproduk
  ${vircion} • ${_p}diskon
  ${vircion} • ${_p}restok
  ${vircion} • ${_p}beliproduk
  ${vircion} • ${_p}confirm
  ${vircion} • ${_p}cancel
  ${vircion} • ${_p}thistory
  ${vircion} • ${_p}deposit
  ${vircion} • ${_p}bataldeposit
  ${vircion} • ${_p}batalbeli`
      await menuv1(teks)
    }
    break

    case 'confesmenu':
    case 'confesmenu-v':
    case 'menfesmenu':
    case 'menfesmenu-v': {
      lyreact()
      let teks = `    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("MENFES  MENU")}
  ${vircion} • ${_p}anonymous
  ${vircion} • ${_p}start
  ${vircion} • ${_p}mulai
  ${vircion} • ${_p}leave
  ${vircion} • ${_p}keluar
  ${vircion} • ${_p}next
  ${vircion} • ${_p}lanjut
  ${vircion} • ${_p}confess
  ${vircion} • ${_p}menfess
  ${vircion} • ${_p}balasmenfess
  ${vircion} • ${_p}tolakmenfess
  ${vircion} • ${_p}stopmenfess`
      await menuv1(teks)
    }
    break

    case 'premmenu':
    case 'menuprem':
    case 'menupremium':
    case 'premiummenu':
    case 'premiummenu-v': {
      lyreact()
      let teks = `    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("PREMIUM  MENU")}
  ${vircion} • ${_p}gpt4o
  ${vircion} • ${_p}cekprem
  ${vircion} • ${_p}metai
  ${vircion} • ${_p}lora
  ${vircion} • ${_p}nsfw
  ${vircion} • ${_p}waifu
  ${vircion} • ${_p}neko
  ${vircion} • ${_p}shinobu
  ${vircion} • ${_p}megumin
  ${vircion} • ${_p}bully
  ${vircion} • ${_p}cuddle
  ${vircion} • ${_p}cry
  ${vircion} • ${_p}hug
  ${vircion} • ${_p}awoo
  ${vircion} • ${_p}kiss
  ${vircion} • ${_p}lick
  ${vircion} • ${_p}pat
  ${vircion} • ${_p}smug
  ${vircion} • ${_p}bonk
  ${vircion} • ${_p}yeet
  ${vircion} • ${_p}blush
  ${vircion} • ${_p}smile
  ${vircion} • ${_p}wave
  ${vircion} • ${_p}highfive
  ${vircion} • ${_p}handhold
  ${vircion} • ${_p}nom
  ${vircion} • ${_p}bite
  ${vircion} • ${_p}glomp
  ${vircion} • ${_p}slap
  ${vircion} • ${_p}kill
  ${vircion} • ${_p}happy
  ${vircion} • ${_p}wink
  ${vircion} • ${_p}poke
  ${vircion} • ${_p}dance
  ${vircion} • ${_p}cringe
  ${vircion} • ${_p}trap
  ${vircion} • ${_p}blowjob
  ${vircion} • ${_p}hentai
  ${vircion} • ${_p}boobs
  ${vircion} • ${_p}ass
  ${vircion} • ${_p}pussy
  ${vircion} • ${_p}thighs
  ${vircion} • ${_p}lesbian
  ${vircion} • ${_p}lewdneko
  ${vircion} • ${_p}cum`
      await menuv1(teks)
    }
    break

    case 'cpanelmenu':
    case 'cpanelmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("CPANEL  MENU")}
  ${vircion} • ${_p}listserver
  ${vircion} • ${_p}delserver
  ${vircion} • ${_p}listuser
  ${vircion} • ${_p}deluser
  ${vircion} • ${_p}addadmin
  ${vircion} • ${_p}deladmin
  ${vircion} • ${_p}listadmin
  ${vircion} • ${_p}1gb
  ${vircion} • ${_p}2gb
  ${vircion} • ${_p}3gb
  ${vircion} • ${_p}4gb
  ${vircion} • ${_p}5gb
  ${vircion} • ${_p}6gb
  ${vircion} • ${_p}7gb
  ${vircion} • ${_p}8gb
  ${vircion} • ${_p}9gb
  ${vircion} • ${_p}10gb
  ${vircion} • ${_p}unli
  ${vircion} • ${_p}suspend
  ${vircion} • ${_p}unsuspend
  ${vircion} • ${_p}reinstall
  ${vircion} • ${_p}startsrv
  ${vircion} • ${_p}stopsrv
  ${vircion} • ${_p}restartsrv`
      await menuv1(teks)
    }
    break

    case 'pushmenu':
    case 'pushmenu-v':
    case 'ngepushmenu':
    case 'ngepushmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("NGEPUSH  MENU")}
  ${vircion} • ${_p}pushkontak
  ${vircion} • ${_p}pushkontak2
  ${vircion} • ${_p}pushkontakid
  ${vircion} • ${_p}pushkontakgc
  ${vircion} • ${_p}pushkontakidjd
  ${vircion} • ${_p}pushkontakgcjd
  ${vircion} • ${_p}savecontact
  ${vircion} • ${_p}savecontact2
  ${vircion} • ${_p}save
  ${vircion} • ${_p}cekidgc
  ${vircion} • ${_p}listgc`
      await menuv1(teks)
    }
    break

    case 'downloadmenu':
    case 'downloadmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("DOWNLOAD  MENU")}
  ${vircion} • ${_p}mediafire
  ${vircion} • ${_p}mediafire2
  ${vircion} • ${_p}tiktok
  ${vircion} • ${_p}tiktok2
  ${vircion} • ${_p}tiktok3
  ${vircion} • ${_p}ttaudio
  ${vircion} • ${_p}ttslide
  ${vircion} • ${_p}facebook
  ${vircion} • ${_p}instagram
  ${vircion} • ${_p}twitter
  ${vircion} • ${_p}twitter2
  ${vircion} • ${_p}threads
  ${vircion} • ${_p}capcut
  ${vircion} • ${_p}videy
  ${vircion} • ${_p}gdrive
  ${vircion} • ${_p}gdrive2
  ${vircion} • ${_p}terabox
  ${vircion} • ${_p}tinyurl
  ${vircion} • ${_p}vgd
  ${vircion} • ${_p}isgd
  ${vircion} • ${_p}gitclone
  ${vircion} • ${_p}happymod
  ${vircion} • ${_p}dlapk
  ${vircion} • ${_p}xvideodl
  ${vircion} • ${_p}xnxxdl
  ${vircion} • ${_p}pindl
  ${vircion} • ${_p}pastebin
  ${vircion} • ${_p}lirikget
  ${vircion} • ${_p}sfiledl`
      await menuv1(teks)
    }
    break

    case 'aimenu':
    case 'aimenu-v':
    case 'chataimenu':
    case 'chataimenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("CHATAI  MENU")}
  ${vircion} • ${_p}openai
  ${vircion} • ${_p}Lyrraai
  ${vircion} • ${_p}ai2
  ${vircion} • ${_p}lum
  ${vircion} • ${_p}dimas
  ${vircion} • ${_p}siti
  ${vircion} • ${_p}tuti
  ${vircion} • ${_p}jajang
  ${vircion} • ${_p}simi
  ${vircion} • ${_p}matthew
  ${vircion} • ${_p}kendra
  ${vircion} • ${_p}takumi
  ${vircion} • ${_p}mizuki
  ${vircion} • ${_p}luminai
  ${vircion} • ${_p}min
  ${vircion} • ${_p}gpt
  ${vircion} • ${_p}Lyrra
  ${vircion} • ${_p}autoai
  ${vircion} • ${_p}autoaiv2
  ${vircion} • ${_p}gemini
  ${vircion} • ${_p}lora
  ${vircion} • ${_p}joko
  ${vircion} • ${_p}bowo
  ${vircion} • ${_p}gptgo
  ${vircion} • ${_p}blackbox
  ${vircion} • ${_p}metai
  ${vircion} • ${_p}llama
  ${vircion} • ${_p}gpt4o
  ${vircion} • ${_p}gpt4omini
  ${vircion} • ${_p}mistral
  ${vircion} • ${_p}mlarge
  ${vircion} • ${_p}islamai
  ${vircion} • ${_p}venice
  ${vircion} • ${_p}gpt3
  ${vircion} • ${_p}lyrrasearch
  ${vircion} • ${_p}aisrc
  ${vircion} • ${_p}claude
  ${vircion} • ${_p}pb-ai
  ${vircion} • ${_p}deepseek
  ${vircion} • ${_p}aibaby`
      await menuv1(teks)
    }
    break

    case 'searchmenu':
    case 'searchmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("SEARCH  MENU")}
  ${vircion} • ${_p}alkitab
  ${vircion} • ${_p}playstation
  ${vircion} • ${_p}google
  ${vircion} • ${_p}chrome
  ${vircion} • ${_p}gimage
  ${vircion} • ${_p}bingsrc
  ${vircion} • ${_p}bingimg
  ${vircion} • ${_p}bingvd
  ${vircion} • ${_p}ytsearch
  ${vircion} • ${_p}play
  ${vircion} • ${_p}video
  ${vircion} • ${_p}audio
  ${vircion} • ${_p}ytmp4
  ${vircion} • ${_p}ytmp3
  ${vircion} • ${_p}ttsearch
  ${vircion} • ${_p}ttget
  ${vircion} • ${_p}spotifys
  ${vircion} • ${_p}pin
  ${vircion} • ${_p}news
  ${vircion} • ${_p}wiki
  ${vircion} • ${_p}wikipedia
  ${vircion} • ${_p}wikimedia
  ${vircion} • ${_p}npms
  ${vircion} • ${_p}lirik
  ${vircion} • ${_p}lirik2
  ${vircion} • ${_p}xvideos
  ${vircion} • ${_p}xnxxs
  ${vircion} • ${_p}resep
  ${vircion} • ${_p}bacaresep
  ${vircion} • ${_p}resep2
  ${vircion} • ${_p}bacaresep2
  ${vircion} • ${_p}infocuaca
  ${vircion} • ${_p}infogempa
  ${vircion} • ${_p}kalender
  ${vircion} • ${_p}ppcouple
  ${vircion} • ${_p}jarak
  ${vircion} • ${_p}cerpen
  ${vircion} • ${_p}andro1
  ${vircion} • ${_p}steam
  ${vircion} • ${_p}genius
  ${vircion} • ${_p}library
  ${vircion} • ${_p}liriksrc
  ${vircion} • ${_p}sfilesrc`
      await menuv1(teks)
    }
    break

    case 'nsfwmenu':
    case 'nsfwmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("NSFW  MENU")}
  ${vircion} • ${_p}nsfw
  ${vircion} • ${_p}waifu
  ${vircion} • ${_p}neko
  ${vircion} • ${_p}shinobu
  ${vircion} • ${_p}megumin
  ${vircion} • ${_p}bully
  ${vircion} • ${_p}cuddle
  ${vircion} • ${_p}cry
  ${vircion} • ${_p}hug
  ${vircion} • ${_p}awoo
  ${vircion} • ${_p}kiss
  ${vircion} • ${_p}lick
  ${vircion} • ${_p}pat
  ${vircion} • ${_p}smug
  ${vircion} • ${_p}bonk
  ${vircion} • ${_p}yeet
  ${vircion} • ${_p}blush
  ${vircion} • ${_p}smile
  ${vircion} • ${_p}wave
  ${vircion} • ${_p}highfive
  ${vircion} • ${_p}handhold
  ${vircion} • ${_p}nom
  ${vircion} • ${_p}bite
  ${vircion} • ${_p}glomp
  ${vircion} • ${_p}slap
  ${vircion} • ${_p}kill
  ${vircion} • ${_p}happy
  ${vircion} • ${_p}wink
  ${vircion} • ${_p}poke
  ${vircion} • ${_p}dance
  ${vircion} • ${_p}cringe
  ${vircion} • ${_p}trap
  ${vircion} • ${_p}blowjob
  ${vircion} • ${_p}hentai
  ${vircion} • ${_p}boobs
  ${vircion} • ${_p}ass
  ${vircion} • ${_p}pussy
  ${vircion} • ${_p}thighs
  ${vircion} • ${_p}lesbian
  ${vircion} • ${_p}lewdneko
  ${vircion} • ${_p}cum`
      await menuv1(teks)
    }
    break

    case 'rpgmenu':
    case 'rpgmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("RPG  MENU")}
  ${vircion} • ${_p}adventure
  ${vircion} • ${_p}beli
  ${vircion} • ${_p}bank
  ${vircion} • ${_p}shop
  ${vircion} • ${_p}berburu
  ${vircion} • ${_p}crafting
  ${vircion} • ${_p}heal
  ${vircion} • ${_p}nyampah
  ${vircion} • ${_p}inventory
  ${vircion} • ${_p}dailymisi
  ${vircion} • ${_p}weekly
  ${vircion} • ${_p}monthly
  ${vircion} • ${_p}yearly
  ${vircion} • ${_p}ngojek
  ${vircion} • ${_p}polisi
  ${vircion} • ${_p}roket
  ${vircion} • ${_p}wikwik
  ${vircion} • ${_p}ewe-paksa
  ${vircion} • ${_p}open-bo
  ${vircion} • ${_p}selectskill
  ${vircion} • ${_p}cekskill
  ${vircion} • ${_p}makan
  ${vircion} • ${_p}tidur
  ${vircion} • ${_p}mengaji
  ${vircion} • ${_p}transfer
  ${vircion} • ${_p}joinrpg
  ${vircion} • ${_p}exitrpg
  ${vircion} • ${_p}jual
  ${vircion} • ${_p}kerja
  ${vircion} • ${_p}redeem
  ${vircion} • ${_p}memancing
  ${vircion} • ${_p}merampok
  ${vircion} • ${_p}mining
  ${vircion} • ${_p}nebang
  ${vircion} • ${_p}repair
  ${vircion} • ${_p}atmall
  ${vircion} • ${_p}dompet`
      await menuv1(teks)
    }
    break

    case 'ephotomenu':
    case 'ephotomenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("EPHOTO  MENU")}
  ${vircion} • ${_p}glitchtext
  ${vircion} • ${_p}writetext
  ${vircion} • ${_p}advancedglow
  ${vircion} • ${_p}typographytext
  ${vircion} • ${_p}pixelglitch
  ${vircion} • ${_p}neonglitch
  ${vircion} • ${_p}flagtext
  ${vircion} • ${_p}flag3dtext
  ${vircion} • ${_p}deletingtext
  ${vircion} • ${_p}blackpinkstyle
  ${vircion} • ${_p}glowingtext
  ${vircion} • ${_p}underwatertext
  ${vircion} • ${_p}logomaker
  ${vircion} • ${_p}cartoonstyle
  ${vircion} • ${_p}papercutstyle
  ${vircion} • ${_p}watercolortext
  ${vircion} • ${_p}effectclouds
  ${vircion} • ${_p}blackpinklogo
  ${vircion} • ${_p}gradienttext
  ${vircion} • ${_p}summerbeach
  ${vircion} • ${_p}luxurygold
  ${vircion} • ${_p}multicoloredneon
  ${vircion} • ${_p}sandsummer
  ${vircion} • ${_p}galaxywallpaper
  ${vircion} • ${_p}1917style
  ${vircion} • ${_p}makingneon
  ${vircion} • ${_p}royaltext
  ${vircion} • ${_p}freecreate
  ${vircion} • ${_p}galaxystyle
  ${vircion} • ${_p}lighteffects`
      await menuv1(teks)
    }
    break

    case 'cecanmenu':
    case 'cecanmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("CECAN  MENU")}
  ${vircion} • ${_p}hijaber
  ${vircion} • ${_p}jeni
  ${vircion} • ${_p}jiso
  ${vircion} • ${_p}justina
  ${vircion} • ${_p}rose
  ${vircion} • ${_p}ryujin
  ${vircion} • ${_p}malaysia
  ${vircion} • ${_p}vietnam
  ${vircion} • ${_p}korea
  ${vircion} • ${_p}indonesia
  ${vircion} • ${_p}japan
  ${vircion} • ${_p}thailand
  ${vircion} • ${_p}china`
      await menuv1(teks)
    }
    break

    case 'toolsmenu':
    case 'toolsmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("TOOLS  MENU")}
  ${vircion} • ${_p}tobase64
  ${vircion} • ${_p}toori
  ${vircion} • ${_p}noenc
  ${vircion} • ${_p}toraw
  ${vircion} • ${_p}togh
  ${vircion} • ${_p}nulis
  ${vircion} • ${_p}nuliskanan
  ${vircion} • ${_p}nuliskiri
  ${vircion} • ${_p}foliokanan
  ${vircion} • ${_p}foliokiri
  ${vircion} • ${_p}beauty
  ${vircion} • ${_p}flatten
  ${vircion} • ${_p}cfps
  ${vircion} • ${_p}setspeed
  ${vircion} • ${_p}get
  ${vircion} • ${_p}ocr
  ${vircion} • ${_p}cekip
  ${vircion} • ${_p}audio2txt`
      await menuv1(teks)
    }
    break

    case 'voicemenu':
    case 'voicemenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("VOICE  MENU")}
  ${vircion} • ${_p}bass
  ${vircion} • ${_p}blown
  ${vircion} • ${_p}deep
  ${vircion} • ${_p}earrape
  ${vircion} • ${_p}fast
  ${vircion} • ${_p}fat
  ${vircion} • ${_p}nightcore
  ${vircion} • ${_p}reverse
  ${vircion} • ${_p}robot
  ${vircion} • ${_p}slow
  ${vircion} • ${_p}smooth
  ${vircion} • ${_p}tupai
  ${vircion} • ${_p}echo
  ${vircion} • ${_p}flanger
  ${vircion} • ${_p}vaporwave
  ${vircion} • ${_p}treble
  ${vircion} • ${_p}vibrato
  ${vircion} • ${_p}distortion
  ${vircion} • ${_p}karaoke
  ${vircion} • ${_p}chipmunk`
      await menuv1(teks)
    }
    break
    case 'quotesmenu':
    case 'quotesmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("QUOTES MENU")}
  ${vircion} • ${_p}faktaunik
  ${vircion} • ${_p}katailham
  ${vircion} • ${_p}katasenja
  ${vircion} • ${_p}motivasi
  ${vircion} • ${_p}pantun
  ${vircion} • ${_p}puisi
  ${vircion} • ${_p}quotes
  ${vircion} • ${_p}quotesanime
  ${vircion} • ${_p}quotesbucin
  ${vircion} • ${_p}quotesdilan
  ${vircion} • ${_p}quotesislamic`
      await menuv1(teks)
    }
    break
    case 'funmenu':
    case 'funmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("FUN  MENU")}
  ${vircion} • ${_p}apakah
  ${vircion} • ${_p}bisakah
  ${vircion} • ${_p}kapankah
  ${vircion} • ${_p}cekganteng
  ${vircion} • ${_p}cekcantik
  ${vircion} • ${_p}cekgay
  ${vircion} • ${_p}ceklesbi
  ${vircion} • ${_p}ceksifat
  ${vircion} • ${_p}cekhoby
  ${vircion} • ${_p}cekjodoh
  ${vircion} • ${_p}top
  ${vircion} • ${_p}bego
  ${vircion} • ${_p}goblok
  ${vircion} • ${_p}janda
  ${vircion} • ${_p}perawan
  ${vircion} • ${_p}babi
  ${vircion} • ${_p}tolol
  ${vircion} • ${_p}pekok
  ${vircion} • ${_p}jancok
  ${vircion} • ${_p}pinter
  ${vircion} • ${_p}pintar
  ${vircion} • ${_p}asu
  ${vircion} • ${_p}bodoh
  ${vircion} • ${_p}gay
  ${vircion} • ${_p}lesby
  ${vircion} • ${_p}bajingan
  ${vircion} • ${_p}jancok
  ${vircion} • ${_p}anjing
  ${vircion} • ${_p}anjg
  ${vircion} • ${_p}anjj
  ${vircion} • ${_p}anj
  ${vircion} • ${_p}ngentod
  ${vircion} • ${_p}ngentot
  ${vircion} • ${_p}monyet
  ${vircion} • ${_p}mastah
  ${vircion} • ${_p}newbie
  ${vircion} • ${_p}bangsat
  ${vircion} • ${_p}bangke
  ${vircion} • ${_p}sange
  ${vircion} • ${_p}sangean
  ${vircion} • ${_p}dakjal
  ${vircion} • ${_p}horny
  ${vircion} • ${_p}wibu
  ${vircion} • ${_p}puki
  ${vircion} • ${_p}puqi
  ${vircion} • ${_p}peak
  ${vircion} • ${_p}pantex
  ${vircion} • ${_p}pantek
  ${vircion} • ${_p}setan
  ${vircion} • ${_p}iblis
  ${vircion} • ${_p}cacat
  ${vircion} • ${_p}yatim
  ${vircion} • ${_p}piatu`
      await menuv1(teks)
    }
    break

    case 'islamicmenu':
    case 'islamicmenu-v':
    case 'islammenu':
    case 'islammenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("ISLAMIC  MENU")}
  ${vircion} • ${_p}jadwalsholat
  ${vircion} • ${_p}alquran
  ${vircion} • ${_p}asmaulhusna
  ${vircion} • ${_p}niatsholat
  ${vircion} • ${_p}surah
  ${vircion} • ${_p}berdoa
  ${vircion} • ${_p}ayatkursi
  ${vircion} • ${_p}gislam
  ${vircion} • ${_p}kataislam
  ${vircion} • ${_p}pantunislam`
      await menuv1(teks)
    }
    break

    case 'makermenu':
    case 'makermenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("MAKER  MENU")}
  ${vircion} • ${_p}txt2img
  ${vircion} • ${_p}txt2imgv2
  ${vircion} • ${_p}txt2imgv3
  ${vircion} • ${_p}txt2imgv4
  ${vircion} • ${_p}txt2imgv5
  ${vircion} • ${_p}txt2imgv6
  ${vircion} • ${_p}emojimix
  ${vircion} • ${_p}attp
  ${vircion} • ${_p}ttp
  ${vircion} • ${_p}brat
  ${vircion} • ${_p}bratvid
  ${vircion} • ${_p}bratcewe
  ${vircion} • ${_p}bratanim
  ${vircion} • ${_p}blurimg
  ${vircion} • ${_p}facepalm
  ${vircion} • ${_p}beautiful
  ${vircion} • ${_p}textimg`
      await menuv1(teks)
    }
    break

    case 'stalkmenu':
    case 'stalkmenu-v':
    case 'stalkermenu':
    case 'stalkermenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("STALK MENU")}
  ${vircion} • ${_p}ghrepo
  ${vircion} • ${_p}ghrepo2
  ${vircion} • ${_p}ytstalk
  ${vircion} • ${_p}ttstalk
  ${vircion} • ${_p}ffstalk
  ${vircion} • ${_p}mlstalk
  ${vircion} • ${_p}chstalk
  ${vircion} • ${_p}igstalk
  ${vircion} • ${_p}npmstalk`
      await menuv1(teks)
    }
    break
    
    case 'animemenu':
    case 'animemenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("ANIME MENU")}
  ${vircion} • ${_p}akiyama
  ${vircion} • ${_p}ana
  ${vircion} • ${_p}art
  ${vircion} • ${_p}asuna
  ${vircion} • ${_p}ayuzawa
  ${vircion} • ${_p}boruto
  ${vircion} • ${_p}bts
  ${vircion} • ${_p}cartoon
  ${vircion} • ${_p}chiho
  ${vircion} • ${_p}chitoge
  ${vircion} • ${_p}cosplay
  ${vircion} • ${_p}cosplayloli
  ${vircion} • ${_p}cosplaysagiri
  ${vircion} • ${_p}cyber
  ${vircion} • ${_p}deidara
  ${vircion} • ${_p}doraemon
  ${vircion} • ${_p}elaina
  ${vircion} • ${_p}emilia
  ${vircion} • ${_p}erza
  ${vircion} • ${_p}exo
  ${vircion} • ${_p}gamewallpaper
  ${vircion} • ${_p}gremory
  ${vircion} • ${_p}hacker
  ${vircion} • ${_p}hestia
  ${vircion} • ${_p}hinata
  ${vircion} • ${_p}husbu
  ${vircion} • ${_p}inori
  ${vircion} • ${_p}islamic
  ${vircion} • ${_p}isuzu
  ${vircion} • ${_p}itachi
  ${vircion} • ${_p}itori
  ${vircion} • ${_p}jennie
  ${vircion} • ${_p}jiso
  ${vircion} • ${_p}justina
  ${vircion} • ${_p}kaga
  ${vircion} • ${_p}kagura
  ${vircion} • ${_p}kakasih
  ${vircion} • ${_p}kaori
  ${vircion} • ${_p}keneki
  ${vircion} • ${_p}kotori
  ${vircion} • ${_p}kurumi
  ${vircion} • ${_p}lisa
  ${vircion} • ${_p}madara
  ${vircion} • ${_p}megumin
  ${vircion} • ${_p}mikasa
  ${vircion} • ${_p}mikey
  ${vircion} • ${_p}miku
  ${vircion} • ${_p}minato
  ${vircion} • ${_p}mountain
  ${vircion} • ${_p}naruto
  ${vircion} • ${_p}neko2
  ${vircion} • ${_p}nekonime
  ${vircion} • ${_p}nezuko
  ${vircion} • ${_p}onepiece
  ${vircion} • ${_p}pentol
  ${vircion} • ${_p}pokemon
  ${vircion} • ${_p}programming
  ${vircion} • ${_p}randomnime
  ${vircion} • ${_p}randomnime2
  ${vircion} • ${_p}rize
  ${vircion} • ${_p}rose
  ${vircion} • ${_p}sagiri
  ${vircion} • ${_p}sakura
  ${vircion} • ${_p}sasuke
  ${vircion} • ${_p}satanic
  ${vircion} • ${_p}shina
  ${vircion} • ${_p}shinka
  ${vircion} • ${_p}shinomiya
  ${vircion} • ${_p}shizuka
  ${vircion} • ${_p}shota
  ${vircion} • ${_p}shortquote
  ${vircion} • ${_p}space
  ${vircion} • ${_p}technology
  ${vircion} • ${_p}tejina
  ${vircion} • ${_p}toukachan
  ${vircion} • ${_p}tsunade
  ${vircion} • ${_p}yotsuba
  ${vircion} • ${_p}yuki
  ${vircion} • ${_p}yulibocil
  ${vircion} • ${_p}yumeko`
      await menuv1(teks)
    }
    break

    case 'othermenu':
    case 'othermenu-v':
    case 'othersmenu':
    case 'othersmenu-v': {
      lyreact()
      let teks = `
    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ʙᴏᴛ ɴᴀᴍᴇ: ${botname}
  ${vircion} • ᴏᴡɴᴇʀ ɴᴀᴍᴇ: ${ownername}
  ${vircion} • ᴘʀᴇғɪx: ᴍᴜʟᴛɪ ᴘʀᴇғɪx
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀs
  ${vircion} • ʀᴜɴᴛɪᴍᴇ: ${runtime(process.uptime())}

${monospace("OTHERS  MENU")}
  ${vircion} • ${_p}sound1 - sound200
  ${vircion} • ${_p}sad1 - sad55
  ${vircion} • ${_p}cekidch
  ${vircion} • ${_p}aturanbot
  ${vircion} • ${_p}sewabot
  ${vircion} • ${_p}ceknickff
  ${vircion} • ${_p}ceknickml
  ${vircion} • ${_p}diffusion
  ${vircion} • ${_p}hdimg
  ${vircion} • ${_p}hdimg2
  ${vircion} • ${_p}recolor
  ${vircion} • ${_p}dehaze
  ${vircion} • ${_p}upscala
  ${vircion} • ${_p}hdvid
  ${vircion} • ${_p}readmore
  ${vircion} • ${_p}tourl
  ${vircion} • ${_p}tourl2
  ${vircion} • ${_p}tourl3
  ${vircion} • ${_p}catbox
  ${vircion} • ${_p}telegraph
  ${vircion} • ${_p}ssweb
  ${vircion} • ${_p}nobg
  ${vircion} • ${_p}resize
  ${vircion} • ${_p}qcstik
  ${vircion} • ${_p}qckode
  ${vircion} • ${_p}stiker
  ${vircion} • ${_p}smeme
  ${vircion} • ${_p}swm
  ${vircion} • ${_p}tts
  ${vircion} • ${_p}say2
  ${vircion} • ${_p}say3
  ${vircion} • ${_p}readvo
  ${vircion} • ${_p}getvideo
  ${vircion} • ${_p}getmusic
  ${vircion} • ${_p}cekkhodam
  ${vircion} • ${_p}toimg
  ${vircion} • ${_p}tovid
  ${vircion} • ${_p}tomp3
  ${vircion} • ${_p}tovn
  ${vircion} • ${_p}listpc
  ${vircion} • ${_p}translate
  ${vircion} • ${_p}listbahasa
  ${vircion} • ${_p}toanime
  ${vircion} • ${_p}toreal
  ${vircion} • ${_p}ytkomen
  ${vircion} • ${_p}carbon
  ${vircion} • ${_p}hytamkan
  ${vircion} • ${_p}hijabkan
  ${vircion} • ${_p}botakin
  ${vircion} • ${_p}hitung
  ${vircion} • ${_p}whatmusic
  ${vircion} • ${_p}stcrandom`
      await menuv1(teks)
    }
    break

    // === Main Menu
    case 'rules':
    case 'aturan':
    case 'aturanbot': {
      var cpt = `Peraturan Penggunaan Bot :\n- Dilarang Spam\n- Dilarang Menelpon Bot\n- Dilarang Mengirim Virus Ke Bot\n\nCatatan :\nSemua Fitur Bot Di Lakukan Secara Otomatis Oleh Sistem Tanpa Ada Campur Tangan Owner, Dan Semua Informasimu Seperti Chat, Foto, Video Atau Vn Akan Aman Tanpa Di Sebar, Dan Jika Ada Balasan Yang Absurd Atau Sticker Absurd Ya Mungkin Owner Lagi Gabut Dan Butuh Temen Chat :v`
      await Lyrra.sendMessage(m.chat, {
        text: cpt,
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 9999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: chjid + "@newsletter",
            serverMessageId: null,
            newsletterName: `${wm}`
          },
          externalAdReply: {
            title: "WHATSAPP - BOT",
            body: 'Smart Chat On WhatsApp.',
            thumbnailUrl: thumb,
            sourceUrl: '',
            mediaType: 1,
            renderLargerThumbnail: true
          }
        }
      }, {
        quoted: m
      })
    }
    break

    case 'regris':
    case 'mendaftar':
    case 'verifikasi':
    case 'regristasi':
    case 'register':
    case 'daftar': {
      lyreact()
      let teks = `*Select Type Daftar Di Bawah*\n\n*INFO :*\nDaftar Manual Mendapatkan\nHadiah Seperti Limit, Saldo, Dll\n\n*Example :* .verify`
      await Lyrra.sendMessage(
        m.chat, {
          document: {
            url: thumb
          },
          mimetype: "image/png",
          pageCount: 2025,
          fileName: `${botname}`,
          fileLength: 100000000000000,
          jpegThumbnail: fs.readFileSync('./media/verify.jpg'),
          caption: teks,
          contextInfo: {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: 143
            },
            businessMessageForwardInfo: {
              businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
            }
          },
          footer: `${wm}`,
          buttons: [{
            buttonId: 'action',
            buttonText: {
              displayText: 'interactiveMeta'
            },
            type: 4,
            nativeFlowInfo: {
              name: 'single_select',
              paramsJson: JSON.stringify({
                title: 'Select Type 🔎',
                sections: [{
                    title: "Daftar Manual",
                    rows: [{
                      "title": "Daftar Manual",
                      "description": "Memasukkan Nama Dan Umur",
                      "id": `${_p}verify`
                    }]
                  },
                  {
                    title: "Daftar Captcha",
                    rows: [{
                      "title": "Daftar Captcha",
                      "description": "Verify Angka Melalui Bot",
                      "id": `${_p}daftr -captcha`
                    }]
                  },
                  {
                    title: "Daftar Otomatis",
                    rows: [{
                      "title": "Daftar Otomatis",
                      "description": "Otomatis Terdaftar & Verifikasi",
                      "id": `${_p}daftr -auto`
                    }],
                  },
                ],
              }),
            },
          }, ],
          headerType: 1,
          viewOnce: true
        }, {
          quoted: m
        });
    }
    break
    case 'daftr': {
      if (db.data.users[m.sender].daftar) return m.reply(`Kamu sudah terdaftar!`);
      if (!text) return m.reply(`*METODE DAFTAR*\n#1: ${p_c} -captcha\n#2: ${p_c} -auto`);
      if (args[0] === "-captcha") {
        const angka = await randomNomor(1000, 9999);
        const buffz = await captcha(angka)
        db.data.users[m.sender].otp = angka;
        db.data.users[m.sender].email = '-';

        Lyrra.sendMessage(m.chat, {
          image: buffz,
          caption: 'Masukkan kode verifikasi sesuai dengan isi gambar ini'
        }, {
          quoted: m
        })
      } else if (args[0] === "-auto") {
        const srlnye = createSerial(5);
        const angk = await randomNomor(20, 700);
        edit2("Mendaftar secara otomatis...", `*SUCCESSFULLY REGISTERED!*\n\n${monospace("INFORMASI  AKUN")}\nNama: Player-${angk}\nID: ${m.sender.split('@')[0]}\nSerial: ${srlnye}`);
        db.data.users[m.sender].daftar = true;
        db.data.users[m.sender].nama = `Player-${angk}`;
        db.data.users[m.sender].email = '-';
        db.data.users[m.sender].serial = `${srlnye}`;
        addRegisteredUser(m.sender, `Player-${angk}`, srlnye);
      }
    }
    break

    case 'unregis':
    case 'unregister': {
      if (!db.data.users[m.sender].daftar) return m.reply('Kamu belum terdaftar!')
      if (!args[0]) return m.reply(`Contoh: ${p_c} serial\n\nKetik ${_p}serial untuk cek serial`)
      if (args[0] === `${db.data.users[m.sender].serial}`) {
        const lastUnregisTime = db.data.users[m.sender].lastUnregisTime || 0;
        const currentTime = Date.now();
        const sixHoursInMilliseconds = 6 * 60 * 60 * 1000;
        if (currentTime - lastUnregisTime < sixHoursInMilliseconds) {
          const remainingTime = sixHoursInMilliseconds - (currentTime - lastUnregisTime);
          const hours = Math.floor(remainingTime / (60 * 60 * 1000));
          const minutes = Math.floor((remainingTime % (60 * 60 * 1000)) / (60 * 1000));
          return m.reply(`Kamu hanya bisa unregis setiap 6 jam sekali. Coba lagi dalam ${hours} jam dan ${minutes} menit.`);
        }
        edit2("Menghapus data...", "Sukses menghapus data!")
        delete db.data.users[m.sender]
      }
    }
    break

    case 'cn':
    case 'nickname': {
      if (!db.data.users[m.sender].daftar) {
        return m.reply('Kamu belum terdaftar!')
      }
      let ha = `${text ? text : pushname}`
      db.data.users[m.sender].nama = ha
      edit2('Mengubah nama...', `Sukses mengubah nama: ${ha}`)
    }
    break

    case 'noprefix':
    case 'prefix': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        if (noprefix) return m.reply('Prefix sudah diaktifkan sebelumnya')
        setting.noprefix = true
        setting.multiprefix = false
        setting.prefixset = ""
        setting.similarity = false
        m.reply('Sukses mengaktifkan prefix!')
      } else if (args[0] === 'off') {
        if (!noprefix) return m.reply('Prefix sudah dinonaktifkan sebelumnya.')
        setting.noprefix = false
        setting.multiprefix = true
        setting.prefixset = ""
        setting.similarity = true
        m.reply('Sukses menonaktifkan prefix!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'prefixall':
    case 'allprefix':
    case 'prefixmulti':
    case 'multiprefix': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        if (multiprefix) return m.reply('Multi refix sudah diaktifkan sebelumnya')
        setting.noprefix = false
        setting.multiprefix = true
        setting.prefixset = ""
        m.reply('Sukses mengaktifkan multi prefix!')
      } else if (args[0] === 'off') {
        if (!multiprefix) return m.reply('Multi Prefix sudah dinonaktifkan sebelumnya.')
        setting.noprefix = false
        setting.multiprefix = true
        setting.prefixset = ""
        m.reply('Sukses menonaktifkan multi prefix!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'prefixset':
    case 'setprefix': {
      if (!isOwner) return onlyOwn()
      if (!text.trim()) return m.reply(`Masukkan prefix!!\n*Contoh :* ${p_c} abcd`);
      if (args.slice(0).join(' ').length > 20) return m.reply('Maksimal 20 Karakter!')
      setting.prefixset = text.toLowerCase();
      setting.multiprefix = false
      setting.noprefix = false

      m.reply(`Sukses mengubah prefix ke '${setting.prefixset}'`);
    }
    break
    
    case 'setcmd':
			case 'addcmd': {
				if (!isOwner) return onlyOwn()
				if (!m.quoted) return m.reply('Reply Pesan!')
				if (!m.quoted.fileSha256) return m.reply('SHA256 Hash Missing')
				if (!text) return m.reply(`*Masukan Input Query!*\n\nContoh ${prefix + command} .menu`)
				let hash = m.quoted.fileSha256.toString('base64')
				if (db.data.media[hash] && db.data.media[hash].locked) return m.reply('You have no permission to change this sticker command')
				db.data.media[hash] = {
					text,
					mentionedJid: m.mentionedJid,
					creator: m.sender,
					at: +new Date,
					locked: false,
				}
				m.reply(`Berhasil menambahkan sha256 untuk command ${text}!`)
			}
			break
			case 'delcmd': {
				if (!isOwner) return onlyOwn()
				let hash = m.quoted.fileSha256.toString('base64')
				if (!hash) return m.reply('SHA256 Hash Missing')
				if (db.data.media[hash] && db.data.media[hash].locked) return m.reply('You have no permission to change this sticker command')
				delete db.data.media[hash]
				m.reply(`Berhasil menghapus sha256 untuk command ${text}!`)
			}
			break

    case 'meinfo':
    case 'profile':
    case 'me':
    case 'infome': {
      lyreact()
      let {
        rank,
        rankid
      } = await ranke(m.sender);
      let exp = db.data.users[m.sender].exp;
      let requireexp = 2400;
      const maxRequireExp = 77777777777;
      while (exp >= requireexp && requireexp < maxRequireExp) {
        requireexp += 2400;
        if (requireexp > maxRequireExp) {
          requireexp = maxRequireExp;
        }
      }
      let teks = `------------ » *PROFILE* « ------------

*General Info*
*👤 Nama :* ${db.data.users[m.sender].nama}
*🎗️ Umur :* ${db.data.users[m.sender].umur}
*🍃 Gender :* ${db.data.users[m.sender].gender}
*🔢 Serial :* ${db.data.users[m.sender].serial}
*📝 Profil :* ${db.data.users[m.sender].daftar ? 'Sudah terdaftar' : 'Belum terdaftar'}
*📦 Status :* ${isOwner ? "Owner" : isPremium ? '👑 VIP User 👑' : "Free User"}

*Count Info*
*💳 Limit :*  ${cekLimit(m.sender)}
*🕹️ Limit Game :* ${db.data.users[m.sender].glimit}
*🏦 Saldo :* ${toRupiah(cekSaldo(m.sender))} (${toDolar(cekSaldo(m.sender))})
*🛡️ Rank :* ${rank} ${rankid}
*⚔️ Level :* ${db.data.users[m.sender].level} (${exp} / ${requireexp})`
      let pps = await Lyrra.profilePictureUrl(m.sender, "image").catch(() => 'https://files.catbox.moe/nwvkbt.png');
      let background = "https://files.catbox.moe/ge5ipo.jpg";
      let name = db.data.users[m.sender].nama;
      let level = db.data.users[m.sender].level;
      try {
        const options = {
          backgroundURL: background,
          avatarURL: pps,
          rankName: rank,
          rankId: rankid,
          exp: exp,
          requireExp: requireexp,
          level: level,
          name: name
        }
        const imageBuffer = await profileImg(options)
        const button = [{
          "name": "quick_reply",
          "buttonParamsJson": `{\"display_text\":\"Set Profile\",\"id\":\`${_p}setprofile\`}`
        }]
        Lyrra.sendButtonImage(m.chat, null, teks, imageBuffer, button, null, m)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan: ' + err);
      }
    }
    break

    case 'creator':
    case 'owner': {
      lyreact()
      await Lyrra.sendContact(m.chat, [owner, ...own], m)
    }
    break

    case 'setprofile':
    case 'setprofil': {
      if (args[0] === "nama") {
        if (args.slice(1).join(' ').length > 35) return m.reply('Maksimal 35 Karakter!')
        const serialUser = args.slice(1).join(' ')
        db.data.users[m.sender].nama = serialUser
        m.reply(`Sukses Ubah Nama Anda`)
      } else if (args[0] === "umur") {
        if (isNaN(args[1])) return m.reply("*Yang bener umurnya dongg*")
        if (args[1] < 10) return m.reply("*Bocil Ga Boleh Main Bot*")
        if (args[1] > 30) return m.reply("*Udah Tua :v*")
        db.data.users[m.sender].umur = Number(args[1])
        m.reply("Umur Kamu Di Setting Ke " + args[1])
      } else if (args[0] === "gender") {
        if (db.data.users[m.sender].gender) return m.reply('Kamu Sudah Memilih Sebelumnya')
        if (args[1] !== "cowo" && args[1] !== "cewe") {
          return await m.reply('Gender hanya boleh "cowo" atau "cewe".')
        }
        db.data.users[m.sender].gender = (args[1])
        m.reply("Gender Kamu : " + args[1])
      } else {
        m.reply(`*Masukan Custom Profile!*
- nama
- umur
- gender

Contoh :
${prefix + command} nama Lyrra`)
      }
    }
    break

    case 'ch':
    case 'botch':
    case 'channel': {
      lyreply('Channel WhatsApp ' + ownername)
    }
    break

    case 'sc':
    case 'script': {
      m.reply(`Script Ini Free No Enc 100%.
Download Script : https://whatsapp.com/channel/0029Vb0KsBhFCCoN6AZe1b0h`)
    }
    break

    case 'qris': {
      try {
        await Lyrra.sendMessage(m.chat, {
          image: {
            url: `${payment.qris}`
          },
          caption: `*Qris all payment*\nSetelah Transfer Silahkan Kirim Bukti Pembayaran.`
        }, {
          quoted: m
        });
      } catch (error) {
        return m.reply('*Gagal Mengambil Qris*\nQris Tidak Tersedia/Tidak Valid..')
      }
    }
    break

    case 'gold': {
      m.reply(`*Info gold kamu*
Name: ${db.data.users[m.sender].nama}
Nomor: ${m.sender.split("@")[0]}
Gold: ${cekGold(m.sender)}`)
    }
    break

    case 'saldo': {
      m.reply(`*Info limit kamu*
Name: ${db.data.users[m.sender].nama}
Nomor: ${m.sender.split("@")[0]}
Saldo: Rp. ${toRupiah(cekSaldo(m.sender))}`)
    }
    break

    case 'ceksaldoewallet':
    case 'ewalletcek':
    case 'cekewallet': {
      m.reply(`*Info ewallet kamu*
Name: ${db.data.users[m.sender].nama}
Nomor: ${m.sender.split("@")[0]}
Saldo: Rp. ${toRupiah(db.data.users[m.sender].ewallet)}`)
    }
    break

    case 'limit': {
      m.reply(`*Info limit kamu*
Name: ${db.data.users[m.sender].nama}
Nomor: ${m.sender.split("@")[0]}
Limit: ${cekLimit(m.sender)}`)
    }
    break

    case 'cekgold': {
      if (!froms && !m.quoted) return m.reply(`Tag seseorang yang ingin kamu ${p_c} nya`)
      if (cekGold(froms) == undefined) return m.reply('Dia gak punya gold sama sekali.')
      if (froms == m.sender) return m.reply(`Ketik ${_p}gold aja`)
      let txt = `${monospace("CEK GOLD")}\nNama: ${Lyrra.getName(froms)}\nGold: ${toRupiah(cekGold(froms))}`
      m.reply(txt)
    }
    break

    case 'ceksaldo': {
      if (!froms && !m.quoted) return m.reply(`Tag seseorang yang ingin kamu ${p_c} nya`)
      if (cekSaldo(froms) == undefined) return m.reply('Dia gak punya saldo sama sekali.')
      if (froms == m.sender) return m.reply(`Ketik ${_p}saldo aja`)
      let txt = `${monospace("CEK SALDO")}\nNama: ${Lyrra.getName(froms)}\nSaldo: ${toRupiah(cekSaldo(froms))}`
      m.reply(txt)
    }
    break

    case 'ceklimit': {
      if (!froms && !m.quoted) return m.reply(`Tag seseorang yang ingin kamu ${p_c} nya`)
      if (cekLimit(froms) == undefined) return m.reply('Dia gak punya limit sama sekali.')
      if (froms == m.sender) return m.reply(`Ketik ${_p}limit aja`)
      let txt = `${monospace("CEK LIMIT")}\nNama: ${Lyrra.getName(froms)}\nLimit: ${toRupiah(cekLimit(froms))}`
      m.reply(txt)
    }
    break

    case 'tfsaldo': {
      if (!m.mentionedJid[0] && !m.quoted) return m.reply('Tag/kutip pesan seseorang!')
      if (!text) return m.reply(`Contoh: ${p_c} 62xx 1000`)
      let receiver = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net'
      let amount = parseInt(args[1])
      let senderSaldo = cekSaldo(m.sender)
      if (isNaN(args[1]) || args[1] <= 1000) return m.reply('Minimal tfsaldo: 1.000');
      if (senderSaldo < amount) {
        return m.reply(`Saldo tidak cukup. Saldo kamu: Rp. ${toRupiah(senderSaldo)}`)
      }
      minSaldo(m.sender, amount)
      addSaldo(receiver, amount)
      m.reply(`*TRANSFER SALDO BERHASIL*
- Pengirim: ${m.sender.split('@')[0]}
- Penerima: ${receiver.split('@')[0]}
- Jumlah: Rp. ${toRupiah(amount)}`)
    }
    break

    case 'serverinfo':
case 'system':
case 'ping':
case 'ping-v':
case 'srvinfo': {
  const os = require('os')
  const nou = require('node-os-utils')
  const fs = require('fs')

  async function getServerInfo() {
    try {
      const osType = nou.os.type()
      const release = os.release()
      const arch = os.arch()
      const nodeVersion = process.version
      const ip = await nou.os.ip()

      const cpus = os.cpus()
      const cpuModel = cpus[0].model
      const coreCount = cpus.length
      const cpu = cpus.reduce((acc, cpu) => {
        acc.total += Object.values(cpu.times).reduce((a, b) => a + b, 0)
        acc.speed += cpu.speed
        acc.times.user += cpu.times.user
        acc.times.nice += cpu.times.nice
        acc.times.sys += cpu.times.sys
        acc.times.idle += cpu.times.idle
        acc.times.irq += cpu.times.irq
        return acc
      }, {
        speed: 0,
        total: 0,
        times: { user: 0, nice: 0, sys: 0, idle: 0, irq: 0 }
      })
      const cpuUsage = ((cpu.times.user + cpu.times.sys) / cpu.total * 100).toFixed(2) + '%'
      const loadAverage = os.loadavg()
      const totalMem = os.totalmem()
      const freeMem = os.freemem()
      const usedMem = totalMem - freeMem
      const storageInfo = await nou.drive.info()

      const start = process.hrtime()
      await new Promise(resolve => setTimeout(resolve, 1))
      const diff = process.hrtime(start)
      const latensi = (diff[0] * 1e9 + diff[1]) / 1e9

      const teks = `
*⚙️ SERVER INFO*
• OS: ${osType} (${release})
• Arsitektur: ${arch}
• Node.js: ${nodeVersion}
• IP: ${ip}
• Runtime: ${runtime(os.uptime())}

*🖥️ CPU*
• Model: ${cpuModel}
• Core: ${coreCount}
• Kecepatan: ${cpu.speed} MHz
• Beban: ${cpuUsage}
• Load Average: ${loadAverage.join(', ')}

*🧠 RAM*
• Total: ${formatp(totalMem)}
• Digunakan: ${formatp(usedMem)}
• Tersisa: ${formatp(freeMem)}

*💾 STORAGE*
• Total: ${storageInfo.totalGb} GB
• Terpakai: ${storageInfo.usedGb} GB (${storageInfo.usedPercentage}%)
• Tersedia: ${storageInfo.freeGb} GB (${storageInfo.freePercentage}%)

*📡 PING*
• Latensi: ${latensi.toFixed(4)} detik
`.trim()

      Lyrra.sendMessage(
        m.chat, {
          document: {
            url: thumb
          },
          mimetype: "image/png",
          pageCount: 2025,
          fileName: `${botname}`,
          fileLength: 100000000000000,
          jpegThumbnail: fs.readFileSync('./media/thumbnail1.jpg'),
          caption: teks,
          contextInfo: {
            forwardingScore: 999,
            isForwarded: true,
            externalAdReply: {
              containsAutoReply: true,
              mediaType: 1,
              mediaUrl: ``,
              renderLargerThumbnail: true,
              showAdAttribution: true,
              sourceUrl: ``,
              thumbnailUrl: `https://files.catbox.moe/7dlq8d.jpg}`,
              title: `${botname.toUpperCase()}`,
              body: `${ucapanWaktu} kak`,
              mentionedJid: [m.sender],
              isForwarded: true
            },
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: 143
            },
            businessMessageForwardInfo: {
              businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
            }
          },
          footer: `${wm}`,
          buttons: [
            { buttonId: `${_p}menu-v`, buttonText: { displayText: 'Menu' } },
            { buttonId: `${_p}owner`, buttonText: { displayText: 'Owner' } }
          ],
          headerType: 6,
          viewOnce: true
        }, {
          quoted: m
        })

    } catch (err) {
      console.error(err)
      Lyrra.reply(m.chat, 'Terjadi kesalahan saat mengambil info server.', m)
    }
  }

  getServerInfo()
}
break

    case 'spedtest':
    case 'speedtest': {
      const os = require('os')
      const nou = require('node-os-utils')

      async function getServerInfo() {
        try {
          const osType = nou.os.type()
          const release = os.release()
          const arch = os.arch()
          const nodeVersion = process.version
          const ip = await nou.os.ip()

          const cpus = os.cpus()
          const cpuModel = cpus[0].model
          const coreCount = cpus.length
          const cpu = cpus.reduce((acc, cpu) => {
            acc.total += Object.values(cpu.times).reduce((a, b) => a + b, 0)
            acc.speed += cpu.speed
            acc.times.user += cpu.times.user
            acc.times.nice += cpu.times.nice
            acc.times.sys += cpu.times.sys
            acc.times.idle += cpu.times.idle
            acc.times.irq += cpu.times.irq
            return acc
          }, {
            speed: 0,
            total: 0,
            times: {
              user: 0,
              nice: 0,
              sys: 0,
              idle: 0,
              irq: 0
            }
          })
          const cpuUsage = ((cpu.times.user + cpu.times.sys) / cpu.total * 100).toFixed(2) + '%'
          const loadAverage = os.loadavg()
          const totalMem = os.totalmem()
          const freeMem = os.freemem()
          const usedMem = totalMem - freeMem
          const storageInfo = await nou.drive.info()

          const start = process.hrtime()
          await new Promise(resolve => setTimeout(resolve, 1))
          const diff = process.hrtime(start)
          const latensi = (diff[0] * 1e9 + diff[1]) / 1e9

          const responseText = `
• Latensi Speed : ${latensi.toFixed(4)} second
• Cpu : ${cpuUsage}
• Cpu Speed: ${cpu.speed} MHz
• Total Penyimpanan : ${storageInfo.totalGb} GB
`
          return responseText.trim()
        } catch (error) {
          console.error('Terjadi kesalahan', error)
          return 'Terjadi kesalahan'
        }
      }

      getServerInfo().then(responseText => {
        Lyrra.sendMessage(m.chat, {
          text: responseText
        }, {
          quoted: ftoko
        })
      })
    }
    break

    case 'dasboard':
    case 'dashboard': {
      const {
        createCanvas
      } = require('canvas');
      try {
        _cmd.sort((a, b) => (a.count < b.count) ? 1 : -1);
        let jumlahCmd = Math.min(_cmd.length, 10);
        let total = _cmd.reduce((sum, cmd) => sum + cmd.count, 0);

        let teks = `▢━━「 *DASHBOARD* 」━━▢\n\n`;
        teks += `*乂 PENGGUNAAN*\n- GLOBAL: ${total}\n\n`;
        teks += `*乂 COMMAND GLOBAL*\n\n`;

        for (let i = 0; i < jumlahCmd; i++) {
          teks += `- *#${_cmd[i].nama}* dipakai *${_cmd[i].count} kali*\n`;
        }

        const width = 1600;
        const height = 900;
        const canvas = createCanvas(width, height);
        const ctx = canvas.getContext('2d');

        ctx.fillStyle = '#1E1E2E';
        ctx.fillRect(0, 0, width, height);

        ctx.fillStyle = '#FFFFFF';
        ctx.font = 'bold 60px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('DASHBOARD', width / 2, 100);

        ctx.font = 'bold 40px Arial';
        ctx.fillText(`Total Penggunaan: ${total}`, width / 2, 160);

        let barWidth = 90;
        let barSpacing = 60;
        let startX = 100;
        let startY = 750;
        let maxBarHeight = 500;
        let maxCount = Math.max(..._cmd.map(cmd => cmd.count));

        ctx.font = '28px Arial';
        ctx.textAlign = 'center';

        for (let i = 0; i < jumlahCmd; i++) {
          let barHeight = (_cmd[i].count / maxCount) * maxBarHeight;
          ctx.fillStyle = '#FFD700';

          let barX = startX + (barWidth + barSpacing) * i - 10;
          ctx.fillRect(barX, startY - barHeight, barWidth, barHeight);

          ctx.fillStyle = '#FFFFFF';

          ctx.save();
          ctx.translate(barX + barWidth / 2, startY + 80);
          ctx.rotate(-Math.PI / 6);
          ctx.fillText(`#${_cmd[i].nama}`, 0, 0);
          ctx.restore();

          ctx.fillText(`${_cmd[i].count}`, barX + barWidth / 2, startY - barHeight - 10);
        }

        let buffer = canvas.toBuffer();

        const button = [{
          "name": "quick_reply",
          "buttonParamsJson": `{\"display_text\":\"Reset Dashboard\",\"id\":\`${_p}resetdashboard\`}`
        }];

        await Lyrra.sendButtonImage(m.chat, null, teks, buffer, button, null, m);

      } catch (err) {
        console.error('Terjadi kesalahan:', err);
      }
    }
    break

    case 'resetdashboard': {
      m.reply('Dashboard Tidak Dapat Direset')
    }
    break

    case 'runtime': {
      m.reply(`Bot runtime: ${runtime(process.uptime())}`)
    }
    break
    
    case 'serverruntime':
    case 'runtimeserver': {
      const os = require('os')
      m.reply(`Server runtime: ${runtime(os.uptime())}`)
    }
    break

    case 'payment': {
      lyreact()
      let teks = `Halo Kaks,
Ingin Melakukan Transaksi?
Payment Yang Tersedia 

 *E-Wallet  :*
   ${vircion} • Gopay
   ${vircion} • OVO
   ${vircion} • Dana
   ${vircion} • LinkAja
   ${vircion} • ShopeePay
   ${vircion} • Qris

   ${vircion} • Atm Rekening 

Jika Kaka Ingin Bertransaksi
Bisa Pilih Select Payment 
Dibawah Yaaa

- *Thank You*`
      await Lyrra.sendMessage(
        m.chat, {
          document: {
            url: 'https://files.catbox.moe/ky9ns2.jpg'
          },
          mimetype: "image/png",
          pageCount: 2025,
          fileName: `Payment List`,
          fileLength: 100000000000000,
          jpegThumbnail: fs.readFileSync('./media/payment.jpg'),
          caption: teks,
          contextInfo: {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            externalAdReply: {
              containsAutoReply: true,
              mediaType: 1,
              mediaUrl: ``,
              renderLargerThumbnail: true,
              showAdAttribution: true,
              sourceUrl: ``,
              thumbnailUrl: `https://files.catbox.moe/ky9ns2.jpg`,
              title: `Payment Transaksi`,
              body: `${ucapanWaktu} kak`,
              mentionedJid: [sender],
              isForwarded: true,
            },
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: 143
            },
            businessMessageForwardInfo: {
              businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
            }
          },
          footer: `${wm}`,
          buttons: [{
              buttonId: `${_p}script`,
              buttonText: {
                displayText: 'Script'
              },
              type: 1,
            },
            {
              buttonId: `${_p}owner`,
              buttonText: {
                displayText: 'Owner'
              },
              type: 1,
            },
            {
              buttonId: 'action',
              buttonText: {
                displayText: 'interactiveMeta'
              },
              type: 4,
              nativeFlowInfo: {
                name: 'single_select',
                paramsJson: JSON.stringify({
                  title: 'Select Payment',
                  sections: [{
                      title: "Gopay",
                      highlight_label: "Sering Dipakai",
                      rows: [{
                        "title": "Dompet Digital Gopay",
                        "description": "Menampilkan Payment Gopay",
                        "id": `${_p}gopay`
                      }]
                    },
                    {
                      title: "Ovo",
                      rows: [{
                        "title": "Dompet Digital Ovo",
                        "description": "Menampilkan Payment Ovo",
                        "id": `${_p}ovo`
                      }]
                    },
                    {
                      title: "Dana",
                      rows: [{
                        "title": "Dompet Digital Dana",
                        "description": "Menampilkan Payment Dana",
                        "id": `${_p}dana`
                      }]
                    },
                    {
                      title: "Atm Rekening",
                      rows: [{
                        "title": "Rekening Transfer",
                        "description": "Menampilkan Payment Atm",
                        "id": `${_p}rekening`
                      }]
                    },
                    {
                      title: "LinkAja",
                      rows: [{
                        "title": "Dompet Digital LinkAja",
                        "description": "Menampilkan Payment LinkAja",
                        "id": `${_p}linkaja`
                      }]
                    },
                    {
                      title: "Qris",
                      rows: [{
                        "title": "Qris Kode Digital",
                        "description": "Menampilkan Payment Qris",
                        "id": `${_p}qris`
                      }]
                    },
                    {
                      title: "ShopeePay",
                      rows: [{
                        "title": "Dompet Digital ShopeePay",
                        "description": "Menampilkan Payment ShopeePay",
                        "id": `${_p}shopeepay`
                      }],
                    },
                  ],
                }),
              },
            },
          ],
          headerType: 1,
          viewOnce: true
        }, {
          quoted: m
        });
    }
    break


    case 'dana': {
      let yow = `${monospace("PAYMENT")}

 DANA
- ${payment.dana}

© ${storename}`
      Lyrra.sendMessage(m.chat, {
        text: yow
      }, {
        quoted: ftext
      })
    }
    break
    case 'gopay': {
      let yow = `${monospace("PAYMENT")}

 GOPAY
- ${payment.gopay}

© ${storename}`
      Lyrra.sendMessage(m.chat, {
        text: yow
      }, {
        quoted: ftext
      })
    }
    break
    case 'ovo': {
      let yow = `${monospace("PAYMENT")}

 OVO
- ${payment.ovo}

© ${storename}`
      Lyrra.sendMessage(m.chat, {
        text: yow
      }, {
        quoted: ftext
      })
    }
    break
    case 'rekening': {
      let yow = `${monospace("PAYMENT")}

 REKENING
- ${payment.rek}

© ${storename}`
      Lyrra.sendMessage(m.chat, {
        text: yow
      }, {
        quoted: ftext
      })
    }
    break
    case 'linkaja': {
      let yow = `${monospace("PAYMENT")}

 LINKAJA
- ${payment.linkaja}

© ${storename}`
      Lyrra.sendMessage(m.chat, {
        text: yow
      }, {
        quoted: ftext
      })
    }
    break
    case 'shopeepay': {
      let yow = `${monospace("PAYMENT")}

 SHOPEEPAY
- ${payment.shopeepay}

© ${storename}`
      Lyrra.sendMessage(m.chat, {
        text: yow
      }, {
        quoted: ftext
      })
    }
    break

    case 'request':
    case 'saran': {
      if (!text) return m.reply('Berikan penjelasan...')
      let senderNumber = m.sender.split("@")[0]
      let requestId = Date.now().toString()
      permintaan[requestId] = {
        sender: senderNumber,
        text: text,
        timestamp: new Date(),
        status: 'Dibuat'
      }
      saveJSON(requestsFile, permintaan)
      Lyrra.sendMessage(owner + "@s.whatsapp.net", {
        text: `*Permintaan dari user*\nID: ${requestId}\nNomor: ${senderNumber}\nTeks: ` + `${kapital(text)}`
      }, {
        quoted: fkontak
      })
      await m.reply('Permintaan berhasil terkirim!')
    }
    break

    case 'cekrequest':
    case 'ceksaran': {
      let requestId = text.trim()
      permintaan = loadJSON(requestsFile)
      if (!permintaan[requestId]) return m.reply('ID permintaan tidak ditemukan atau permintaan sudah tidak valid.')
      let request = permintaan[requestId]
      let permintaanText = `Detail Permintaan:\n\nID: ${requestId}\nNomor: ${request.sender}\nTeks: ${request.text}\nWaktu: ${request.timestamp}\nStatus: ${request.status}`
      m.reply(permintaanText)
    }
    break

    case 'rating':
    case 'lapor':
    case 'report': {
      if (!text) return m.reply('Berikan penjelasan...')
      let senderNumber = m.sender.split("@")[0]
      let reportId = Date.now().toString()
      laporan[reportId] = {
        sender: senderNumber,
        text: text,
        timestamp: new Date(),
        status: 'Dibuat'
      }
      saveJSON(reportsFile, laporan)
      Lyrra.sendMessage(owner + "@s.whatsapp.net", {
        text: `*Laporan dari user*\nID: ${reportId}\nNomor: ${senderNumber}\nTeks: ` + `${kapital(text)}`
      }, {
        quoted: fkontak
      })
      await m.reply('Laporan berhasil terkirim!')
    }
    break

    case 'balas':
    case 'reply': {
      let args = text.split(' ')
      let reportId = args[0]
      let replyText = args.slice(1).join(' ')
      laporan = loadJSON(reportsFile)
      if (!laporan[reportId]) return m.reply('ID laporan tidak ditemukan atau laporan sudah tidak valid.')
      let recipient = laporan[reportId].sender + '@s.whatsapp.net'
      Lyrra.sendMessage(recipient, {
        text: `Balasan dari pemilik bot:\n${replyText}`
      }, {
        quoted: fkontak
      })
      await m.reply('Balasan terkirim!')
      delete laporan[reportId]
      saveJSON(reportsFile, laporan)
      Lyrra.sendMessage(owner + "@s.whatsapp.net", {
        text: `Balasan terkirim ke user dengan ID laporan: ${reportId} dan laporan telah dihapus dari database.`
      }, {
        quoted: fkontak
      })
    }
    break

    case 'laporan':
    case 'reports': {
      laporan = loadJSON(reportsFile)
      let laporanText = 'Laporan yang belum dibalas:\n\n'
      for (let id in laporan) {
        if (laporan[id].status === 'Dibuat') {
          laporanText += `ID: ${id}\nNomor: ${laporan[id].sender}\nTeks: ${laporan[id].text}\nWaktu: ${laporan[id].timestamp}\n\n`
        }
      }
      m.reply(laporanText)
    }
    break

    case 'hapusreport':
    case 'delreport':
    case 'hapuslaporan':
    case 'delreports': {
      let reportId = text.trim()
      laporan = loadJSON(reportsFile)
      if (!laporan[reportId]) return m.reply('ID laporan tidak ditemukan atau laporan sudah tidak valid.')
      delete laporan[reportId]
      saveJSON(reportsFile, laporan)
      m.reply('Laporan berhasil dihapus!')
    }
    break

    case 'cekreport':
    case 'ceklaporan':
    case 'cekreports': {
      let reportId = text.trim()
      laporan = loadJSON(reportsFile)
      if (!laporan[reportId]) return m.reply('ID laporan tidak ditemukan atau laporan sudah tidak valid.')
      let report = laporan[reportId]
      let laporanText = `Detail Laporan:\n\nID: ${reportId}\nNomor: ${report.sender}\nTeks: ${report.text}\nWaktu: ${report.timestamp}\nStatus: ${report.status}`
      m.reply(laporanText)
    }
    break


    case 'cekkey':
    case 'cekapikey': {
      if (!text) return m.reply(`Contoh: ${p_c} apikeymu`)
      try {
        const pe = await axios.get(`https://api.neoxr.eu/api/check?apikey=${text}`)
        let pu = pe.data.data
        let po = `\n*CHECK APIKEY NEOXR*\nNama: ${pu.name}\nSisa limit: ${pu.limit}\nTotal limit: ${pu.total}\nStatus: ${pu.premium}\nKadaluarsa pada: ${pu.expired_at}\nDiaktifkan pada: ${pu.last_activity}\n`
        m.reply(po)
      } catch (err) {
        m.reply('Apikey nya gak ada di neoxr')
      }
    }
    break

    // === Owner Menu

    case 'upch':
    case 'upaudio': {
      if (!isOwner) return m.reply('Khusus Owner')
      if (!/audio/.test(mime)) return m.reply(`reply music`)
      Lyrra.sendMessage(m.chat, {
        react: {
          text: '🕐',
          key: m.key
        }
      })
      await sleep(5000)
      Lyrra.sendMessage(`${global.chjid}` + '@newsletter', {
        audio: await quoted.download(),
        viewOnce: false,
        ptt: true,
        mimetype: 'audio/mpeg',
        fileName: 'bot.mp3',
        waveform: [0, 153, 0, 494, 976],
        contextInfo: {
          forwardingScore: 999,
          isForwarded: false,
        }
      })
      await sleep(2000)
      Lyrra.sendMessage(m.chat, {
        react: {
          text: '✅',
          key: m.key,
        }
      })
    }
    break

    case 'addcase': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} case nya`);
      const namaFile = path.join(__dirname, 'Lyrra.js');
      const caseBaru = `${text}\n\n`;
      const tambahCase = (data, caseBaru) => {
        const posisiDefault = data.lastIndexOf("default:");
        if (posisiDefault !== -1) {
          const kodeBaruLengkap = data.slice(0, posisiDefault) + caseBaru + data.slice(posisiDefault);
          return {
            success: true,
            kodeBaruLengkap
          };
        } else {
          return {
            success: false,
            message: "Tidak dapat menemukan case default di dalam file!"
          };
        }
      };
      fs.readFile(namaFile, 'utf8', (err, data) => {
        if (err) {
          console.error('Terjadi kesalahan saat membaca file:', err);
          return m.reply(`Terjadi kesalahan saat membaca file: ${err.message}`);
        }
        const result = tambahCase(data, caseBaru);
        if (result.success) {
          fs.writeFile(namaFile, result.kodeBaruLengkap, 'utf8', (err) => {
            if (err) {
              console.error('Terjadi kesalahan saat menulis file:', err);
              return m.reply(`Terjadi kesalahan saat menulis file: ${err.message}`);
            } else {
              console.log('Sukses menambahkan case baru:');
              console.log(caseBaru);
              return m.reply('Sukses menambahkan case!');
            }
          });
        } else {
          console.error(result.message);
          return m.reply(result.message);
        }
      });
    }
    break

    case 'delcase': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} nama case`);
      const fs = require('fs').promises;
      async function dellCase(filePath, caseNameToRemove) {
        try {
          let data = await fs.readFile(filePath, 'utf8');
          const regex = new RegExp(`case\\s+'${caseNameToRemove}':[\\s\\S]*?break`, 'g');
          const modifiedData = data.replace(regex, '');
          if (data === modifiedData) {
            m.reply('Case tidak ditemukan atau sudah dihapus.');
            return;
          }
          await fs.writeFile(filePath, modifiedData, 'utf8');
          m.reply('Sukses menghapus case!');
        } catch (err) {
          m.reply(`Terjadi kesalahan: ${err.message}`);
        }
      }
      dellCase('./Lyrra.js', q);
    }
    break

    case 'getcase': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`Contoh: ${p_c} caseName1 caseName2 caseName3 ...`)

      const caseNames = text.split(' ').map(name => name.trim()).filter(name => name)
      if (caseNames.length === 0) {
        return m.reply(`Masukkan minimal satu case name. Contoh: ${p_c} caseName1 caseName2`)
      }

      const getCase = async (caseName) => {
        try {
          const fileContent = await fs.promises.readFile('./Lyrra.js', "utf-8")
          const caseRegex = new RegExp(`case '${caseName}'[\\s\\S]*?break`, 'g')
          const match = fileContent.match(caseRegex)
          if (!match) {
            return `Case '${caseName}' tidak ditemukan.`
          }
          return match[0]
        } catch (error) {
          return `Terjadi kesalahan saat membaca file: ${error.message}`
        }
      }

      const getCases = async (caseNames) => {
        try {
          const casePromises = caseNames.map(caseName => getCase(caseName))
          const cases = await Promise.all(casePromises)
          return cases.join('\n\n')
        } catch (error) {
          return `Terjadi kesalahan: ${error.message}`
        }
      }

      getCases(caseNames)
        .then(caseCode => m.reply(caseCode))
        .catch(error => m.reply(`Terjadi kesalahan: ${error.message}`))
    }
    break

    case 'cekcase': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} caseName`);
      const caseName = text.trim();
      if (!caseName) return m.reply(`Masukkan nama case yang ingin dicek. Contoh: ${p_c} caseName`);
      const cekCase = async (caseName) => {
        try {
          const fileContent = await fs.promises.readFile('./Lyrra.js', "utf-8");
          const caseRegex = new RegExp(`case '${caseName}'[\\s\\S]*?break`, 'g');
          const match = fileContent.match(caseRegex);
          if (!match) {
            return {
              found: false
            };
          }
          const lines = fileContent.split('\n');
          const caseLines = match[0].split('\n');
          const startLine = lines.indexOf(caseLines[0]) + 1;
          const endLine = startLine + caseLines.length - 1;
          return {
            found: true,
            startLine,
            endLine,
            content: match[0]
          };
        } catch (error) {
          return {
            error: `Terjadi kesalahan saat membaca file: ${error.message}`
          };
        }
      };
      const result = await cekCase(caseName);
      if (result.error) {
        m.reply(result.error);
      } else if (result.found) {
        const message = `
*CASE DITEMUKAN!*
• Nama Case: ${caseName}
• Baris Awal: ${result.startLine}
• Baris Akhir: ${result.endLine}`
        let kon = `{\"display_text\":\"Ambil\",\"id\":\"${_p}getcase 1 ${text}\"}`
        quickreply1(m.chat, message, kon, null, m)
        datareadcek.userSessions[m.sender] = {
          caseToRetrieve: result,
          caseName
        };
      } else {
        m.reply(`Case '${caseName}' tidak ditemukan.`);
      }
    }
    break

    case 'wl':
    case 'whitelist': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      try {
        let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
        if (owner.includes(users)) return m.reply('Tidak Dapat Melakukannya Kepada Owner')
        if (!m.mentionedJid[0] && !m.quoted && !text) return m.reply(`Tag/Reply Target Yang Mau Di ${command}`)
        const isWhitelistt = whitelist.includes(users) ? true : false
        if (isWhitelistt) return Lyrra.sendTextWithMentions(m.chat, `@${users.split('@')[0]} Telah Di Whitelist Sebelumnya`, m)
        whitelist.push(users)
        fs.writeFileSync('./data/group-db/whitelist.json', JSON.stringify(whitelist, null, 2))
        Lyrra.sendTextWithMentions(m.chat, `Succes whitelist @${users.split('@')[0]}`, m)
      } catch (err) {
        m.reply(`Tag/Reply Target Yang Mau Di Whitelist`)
      }
    }
    break
    case 'unwhite':
    case 'unwhitelist': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      try {
        let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
        if (owner.includes(users)) return m.reply('Tidak Dapat Melakukannya Kepada Owner')
        if (!m.mentionedJid[0] && !m.quoted && !text) return m.reply(`Tag/Reply Target Yang Mau Di ${command}`)
        const isWhitelistt = whitelist.includes(users) ? true : false
        if (!isWhitelistt) return Lyrra.sendTextWithMentions(m.chat, `@${users.split('@')[0]} Tidak Ada Didaftar Whitelist`, m)
        let anu = whitelist.indexOf(users)
        whitelist.splice(anu, 1)
        fs.writeFileSync('./data/group-db/whitelist.json', JSON.stringify(whitelist, null, 2))
        Lyrra.sendTextWithMentions(m.chat, `Succes Unwhitelist @${users.split('@')[0]}`, m)
      } catch (err) {
        m.reply(`Tag/Reply Target Yang Mau Di Un-whitelist`)
      }
    }
    break
    case 'listwl':
    case 'listwhitelist': {
      let txt = `------------ » *WHITELIST* « ------------\nTotal: *${whitelist.length}* Ditandai\n\n`
      for (let blck of whitelist) {
        txt += `*»* @${blck.split('@')[0]}\n`
      }
      Lyrra.sendTextWithMentions(m.chat, txt, m)
    }
    break

    case 'sidergc':
    case 'ceksider':
    case 'sidercek':
    case 'groupsider':
    case 'sidergroup':
    case 'sider':
    case 'gcsider': {
      if (!m.isGroup) return onlyGrup();
      if (!isOwner && !isAdmins) return onlyAdmin();

      const lama = 86400000 * 7;
      const now = new Date().toLocaleString("en-US", {
        timeZone: "Asia/Jakarta"
      });
      const milliseconds = new Date(now).getTime();

      let members = groupMetadata.participants.map(v => v.id);
      let pesan = text || "Harap aktif di grup karena akan ada pembersihan member setiap saat";

      let total = 0;
      let sider = [];

      for (let member of members) {
        let userData = db.data.users[member];

        let isMemberAdmin = groupMetadata.participants.some(u => u.id === member && u.admin);
        if (isMemberAdmin) continue;

        if ((!userData || milliseconds - userData.lastseen > lama) && !userData?.banned) {
          total++;
          sider.push(member);
        }
      }

      if (total === 0) return m.reply("*Di grup ini tidak terdapat sider.*");

      let siderList = sider.map(v =>
        `  ○ @${v.replace(/@.+/, '')} ${!db.data.users[v] ? 'Sider' : 'Off ' + msToDate(milliseconds - db.data.users[v].lastseen)}`
      ).join('\n');

      let message = `*${total}/${members.length}* anggota grup *${groupMetadata.subject}* adalah sider dengan alasan:\n` +
        "1. Tidak aktif selama lebih dari 7 hari\n" +
        "2. Baru join tetapi tidak pernah nimbrung\n\n" +
        `_“${pesan}”_\n\n` +
        "*LIST SIDER:*\n" +
        siderList;

      Lyrra.sendTextWithMentions(m.chat, message, m);
    }
    break

    case 'infobotset':
    case 'botinfoset':
    case 'botset':
    case 'botset-info': {
      if (!isOwner) return onlyOwn();
      let userdaftar = Object.values(db.data.users).filter(user => user.daftar === true).length;
      let userndaftar = Object.values(db.data.users).filter(user => user.daftar === false).length;
      lyreact()
      let teks = `    「 *${global.vtampt}𝙱𝙾𝚃 𝙸𝙽𝙵𝙾${global.vtampt}* 」
  ${vircion} • ᴠᴇʀsɪ: ${version} 
  ${vircion} • ᴛᴏᴛᴀʟ ᴜsᴇʀ: ${Object.values(db.data.users).length} ᴜsᴇʀ
  ${vircion} • ᴛᴇʀᴅᴀғᴛᴀʀ ${userdaftar} ᴜsᴇʀ
  ${vircion} • ᴛɪᴅᴀᴋ ᴛᴇʀᴅᴀғᴛᴀʀ ${userndaftar} ᴜsᴇʀ
  
  ${vircion} • autobio: ${setting.autobio ? 'true' : 'false'}
  ${vircion} • onlyRegister: ${setting.onlyRegister ? 'true' : 'false'}
  ${vircion} • anticall: ${setting.anticall ? 'true' : 'false'}
  ${vircion} • gconly: ${setting.gconly ? 'true' : 'false'}
  ${vircion} • pconly: ${setting.pconly ? 'true' : 'false'}
  ${vircion} • autosholat: ${setting.autosholat ? 'true' : 'false'}
  ${vircion} • autorespond: ${setting.autorespond ? 'true' : 'false'}
  ${vircion} • autoblok212: ${setting.autoblok212 ? 'true' : 'false'}
  ${vircion} • autoread: ${setting.autoread ? 'true' : 'false'}
  ${vircion} • similarity: ${setting.similarity ? 'true' : 'false'}
  ${vircion} • prefix: ${setting.prefix ? 'true' : 'false'}
  ${vircion} • antispams: ${setting.antispams ? 'true' : 'false'}
  ${vircion} • autotyping: ${setting.autotyping ? 'true' : 'false'}
  ${vircion} • grupaddset: ${setting.grupaddSet ? 'true' : 'false'}
  ${vircion} • rpgsetStats ${setting.rpgsetStats ? 'true' : 'false'}`
      await Lyrra.sendMessage(
        m.chat, {
          document: {
            url: thumb
          },
          mimetype: "application/pdf",
          pageCount: 2025,
          fileName: `${botname}`,
          fileLength: 100000000000000,
          jpegThumbnail: fs.readFileSync('./media/thumbnail2.jpg'),
          caption: teks,
          contextInfo: {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            externalAdReply: {
              containsAutoReply: true,
              mediaType: 1,
              mediaUrl: ``,
              renderLargerThumbnail: true,
              showAdAttribution: true,
              sourceUrl: ``,
              thumbnailUrl: `${global.thumb}`,
              title: `${botname.toUpperCase()}`,
              body: `${ucapanWaktu} kak`,
              mentionedJid: [sender],
              isForwarded: true,
            },
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: 143
            },
            businessMessageForwardInfo: {
              businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
            }
          },
          footer: `${wm}`,
          buttons: [{
              buttonId: `${_p}menu-v`,
              buttonText: {
                displayText: 'Menu'
              }
            },
            {
              buttonId: `${_p}owner`,
              buttonText: {
                displayText: 'Owner'
              }
            }
          ],
          headerType: 6,
          viewOnce: true
        }, {
          quoted: m
        });
    }
    break

    case 'bl':
    case 'blacklist':
    case 'tandai': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner) return onlyOwn()
      if (!isBotAdmins) return onlyBotAdmin()
      try {
        let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
        if (owner.includes(users)) return m.reply('Tidak Dapat Melakukannya Kepada Owner')
        if (!m.mentionedJid[0] && !m.quoted && !text) return m.reply(`Tag/Reply Target Yang Mau Di ${command}`)
        const isBlacklistt = blacklist.includes(users) ? true : false
        if (isBlacklistt) return Lyrra.sendTextWithMentions(m.chat, `@${users.split('@')[0]} Telah Di Blacklist Sebelumnya`, m)
        blacklist.push(users)
        fs.writeFileSync('./data/group-db/blacklist.json', JSON.stringify(blacklist, null, 2))
        Lyrra.sendTextWithMentions(m.chat, `Succes blacklist @${users.split('@')[0]}`, m)
      } catch (err) {
        m.reply(`Tag/Reply Target Yang Mau Di blacklist`)
      }
    }
    break

    case 'unblack':
    case 'unblacklist': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner) return onlyOwn()
      if (!isBotAdmins) return onlyBotAdmin()
      try {
        let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
        if (owner.includes(users)) return m.reply('Tidak Dapat Melakukannya Kepada Owner')
        if (!m.mentionedJid[0] && !m.quoted && !text) return m.reply(`Tag/Reply Target Yang Mau Di ${command}`)
        const isBlacklistt = blacklist.includes(users) ? true : false
        if (!isBlacklistt) return Lyrra.sendTextWithMentions(m.chat, `@${users.split('@')[0]} Tidak Ada Didaftar Blacklist`, m)
        let anu = blacklist.indexOf(users)
        blacklist.splice(anu, 1)
        fs.writeFileSync('./data/group-db/blacklist.json', JSON.stringify(blacklist, null, 2))
        Lyrra.sendTextWithMentions(m.chat, `Succes Unblacklist @${users.split('@')[0]}`, m)
      } catch (err) {
        m.reply(`Tag/Reply Target Yang Mau Di Un-blacklist`)
      }
    }
    break
    case 'listbl':
    case 'listblacklist': {
      if (!isOwner) return onlyOwn()
      let txt = `------------ » *BLACKLIST* « ------------\nTotal: *${blacklist.length}* Ditandai\n\n`
      for (let blck of blacklist) {
        txt += `*»* @${blck.split('@')[0]}\n`
      }
      Lyrra.sendTextWithMentions(m.chat, txt, m)
    }
    break
    case 'warning':
case 'warn': {
    if (!m.isGroup) return onlyGrup()
    if (!isAdmins) return onlyAdmin()
    if (!isBotAdmins) return onlyBotAdmin()

    let users = m.mentionedJid[0] 
        ? m.mentionedJid[0] 
        : m.quoted 
            ? m.quoted.sender 
            : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

    if (!users) return m.reply(`Tag/Reply target yang mau di-${command}`)
    if (owner.includes(users)) return m.reply('Tidak dapat melakukannya kepada Owner')

    if (!db.data.chats[m.chat].warn) db.data.chats[m.chat].warn = {}
    db.data.chats[m.chat].warn[users] = (db.data.chats[m.chat].warn[users] || 0) + 1

    const total = db.data.chats[m.chat].warn[users]

    Lyrra.sendTextWithMentions(m.chat, `⚠️ Sukses *${command}* @${users.split('@')[0]}\nTotal Warning: ${total}/${warnCount}`, m)

    if (total >= warnCount) {
        if (!isAdmins || !isBotAdmins) return

        await Lyrra.sendMessage(m.chat, {
            text: `🚫 @${users.split('@')[0]} telah mencapai ${total}/${warnCount} warning dan akan dikeluarkan.`,
            mentions: [users]
        })

        await Lyrra.groupParticipantsUpdate(m.chat, [users], 'remove')
        delete db.data.chats[m.chat].warn[users]
    }
}
break

case 'unwarning':
case 'unwarn': {
    if (!m.isGroup) return onlyGrup()
    if (!isAdmins) return onlyAdmin()
    if (!isBotAdmins) return onlyBotAdmin()

    let users = m.mentionedJid[0] 
        ? m.mentionedJid[0] 
        : m.quoted 
            ? m.quoted.sender 
            : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

    if (!users) return m.reply(`Tag/Reply target yang mau di-${command}`)
    if (owner.includes(users)) return m.reply('Tidak dapat melakukan unwarn kepada Owner')

    if (!db.data.chats[m.chat].warn) db.data.chats[m.chat].warn = {}

    if (!db.data.chats[m.chat].warn[users] || db.data.chats[m.chat].warn[users] === 0) {
        return m.reply(`User tersebut belum memiliki warning.`)
    }

    db.data.chats[m.chat].warn[users] -= 1

    const sisa = db.data.chats[m.chat].warn[users]

    Lyrra.sendTextWithMentions(m.chat, `✅ Sukses *${command}* @${users.split('@')[0]}\nSisa Warning: ${sisa}/${warnCount}`, m)
    if (db.data.chats[m.chat].warn[users] === 0) {
    delete db.data.chats[m.chat].warn[m.sender];
    }
}
break

case 'listwarn':
case 'cekwarn': {
    if (!m.isGroup) return onlyGrup()
    if (!isAdmins) return onlyAdmin()

    let warnData = db.data.chats[m.chat].warn
    if (!warnData || Object.keys(warnData).length === 0) {
        return m.reply('Tidak ada member yang memiliki warning di grup ini.')
    }

    let teks = `⚠️ *Daftar Warning Member Grup:*\n\n`
    let no = 1

    for (let jid in warnData) {
        teks += `${no++}. @${jid.split('@')[0]} - ${warnData[jid]}/${warnCount} warning\n`
    }

    await Lyrra.sendTextWithMentions(m.chat, teks, m)
}
break

    case 'upstatuswa':
    case 'upstatus':
    case 'gcsw':
    case 'upwsgc':
    case 'upswtag': {
      if (!isOwner) return onlyOwn()
      let argsText = text.split(',').map(a => a.trim())
      if (argsText.length < 2) return m.reply(`Contoh: ${p_c} idgrup, teks`)

      let target = argsText[0]
      let caption = argsText.slice(1).join(',')

      if (!quoted) return m.reply(`Kutip pesan seperti gambar, video, atau audio dengan caption ${p_c}`)

      if (quoted.mtype === "audioMessage") {
        let audioData = await quoted.download()
        Lyrra.sendStatusMention({
            audio: audioData,
            mimetype: 'audio/mp4',
            ptt: true
          },
          [target]
        )
      }

      if (quoted.mtype === "imageMessage") {
        let imageData = await quoted.download()
        Lyrra.sendStatusMention({
            image: imageData,
            caption: caption || ''
          },
          [target]
        )
      }

      if (quoted.mtype === "videoMessage") {
        let videoData = await quoted.download()
        Lyrra.sendStatusMention({
            video: videoData,
            caption: caption || ''
          },
          [target]
        )
      }
      m.reply('Sukses mengirim status mention!')
    }
    break

    case 'upsw2':
    case 'upswtag2': {
      if (!isOwner) return onlyOwn()
      if (!q) return m.reply('Masukkan ID Group dan Caption!');
      if (!quoted) return m.reply('Wajib reply atau kirim media dengan command ini!');

      const colors = [
        '#7ACAA7', '#6E257E', '#5796FF', '#7E90A4', '#736769',
        '#57C9FF', '#25C3DC', '#FF7B6C', '#55C265', '#FF898B',
        '#8C6991', '#C69FCC', '#B8B226', '#EFB32F', '#AD8774',
        '#792139', '#C1A03F', '#8FA842', '#A52C71', '#8394CA',
        '#243640'
      ];
      const fonts = [0, 1, 2, 6, 7, 8, 9, 10];

      let [groupid, ...captionwak] = q.split(',');
      let caption = captionwak.join(',').trim();
      if (!groupid || !caption) return reply(`Format salah. Contoh: ${prefix + command} idgroup,caption`);

      const mime = quoted.mimetype || '';
      let content = {
        caption
      };

      if (/image/.test(mime)) {
        const imagePath = await Lyrra.downloadAndSaveMediaMessage(quoted);
        content.image = {
          url: imagePath
        };
      } else if (/video/.test(mime)) {
        const videoPath = await Lyrra.downloadAndSaveMediaMessage(quoted);
        content.video = {
          url: videoPath
        };
      } else if (/audio/.test(mime)) {
        const audioPath = await Lyrra.downloadAndSaveMediaMessage(quoted);
        content.audio = {
          url: audioPath,
          mimetype: 'audio/mp4',
          ptt: true
        };
      } else {
        return m.reply('Reply media image, video, atau audio!');
      }

      try {
        let groupMetadata = await Lyrra.groupMetadata(groupid);
        let users = groupMetadata.participants.map(u => Lyrra.decodeJid(u.id));
        let message = await Lyrra.sendMessage("status@broadcast", content, {
          backgroundColor: colors[Math.floor(Math.random() * colors.length)],
          font: fonts[Math.floor(Math.random() * fonts.length)],
          statusJidList: users,
          additionalNodes: [{
            tag: "meta",
            attrs: {},
            content: [{
              tag: "mentioned_users",
              attrs: {},
              content: [groupid].map(jid => ({
                tag: "to",
                attrs: {
                  jid
                },
                content: undefined,
              })),
            }, ],
          }, ],
        });

        await Lyrra.relayMessage(m.chat, {
          groupStatusMentionMessage: {
            message: {
              protocolMessage: {
                key: message.key,
                type: 25,
              },
            },
          },
        }, {
          userJid: Lyrra.user.jid,
          additionalNodes: [{
            tag: "meta",
            attrs: {
              is_status_mention: "true"
            },
            content: undefined,
          }, ],
        });

        m.reply(`Berhasil mengirim status ke ${users.length} user di 1 grup.`);
      } catch (err) {
        console.error(err);
        m.reply('Gagal mengirim status.');
      }
    }
    break

    case 'gf':
    case 'gfl':
    case 'gantifile': {
      if (!isOwner) return onlyOwn()
      let fpath = text.includes('./') ? text : null
      let fname = ''

      function pathSrc(dirPath) {
        let results = []
        const list = fs.readdirSync(dirPath)
        list.forEach(function (file) {
          const fpath2 = path.join(dirPath, file)
          const stat = fs.statSync(fpath2)
          if (stat && stat.isDirectory()) {
            results = results.concat(pathSrc(fpath2))
          } else {
            results.push({
              name: file,
              path: fpath2
            })
          }
        })
        return results
      }
      const deleteCacheFolder = (dirPath) => {
        const cachePath = path.join(dirPath, '.cache')
        if (fs.existsSync(cachePath)) {
          const files = fs.readdirSync(cachePath)
          files.forEach(file => {
            const filePath = path.join(cachePath, file)
            fs.rmSync(filePath, {
              recursive: true,
              force: true
            })
          })
          fs.rmdirSync(cachePath)
        }
      }
      deleteCacheFolder('./')
      if (!fpath) {
        if (!m.quoted || m.quoted.mtype !== 'documentMessage') {
          return m.reply('Kutip pesan dokumen nya!')
        }
        fname = m.quoted.fileName
        const allf = pathSrc('./')
        const mfile = allf.find(file => file.name === fname)
        if (!mfile) return m.reply(`File "${fname}" tidak ditemukan`)
        fpath = mfile.path
      } else {
        let dir = path.dirname(fpath)
        fname = path.basename(fpath)
        if (!fs.existsSync(dir)) return m.reply('Folder yang kamu cari gak ada...')
        if (!fs.existsSync(fpath)) return m.reply('File yanh kamu cari gak ada...')
      }
      try {
        let media = await downloadContentFromMessage(m.quoted, "document")
        let buffer = Buffer.from([])
        for await (const chunk of media) {
          buffer = Buffer.concat([buffer, chunk])
        }
        fs.writeFileSync(fpath, buffer)
        edit2(`Mengupload file...`, `Sukses mengupload ${fpath}`)
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'sendcase':
    case 'sendfitur': {
      if (!isOwner) return onlyOwn();
      if (!m.quoted) return m.reply('Kutip pesan seseorang!');
      if (!text) return m.reply(`Contoh: ${p_c} menu`);
      const getCase = async (caseName) => {
        try {
          const fileContent = await fs.promises.readFile('./Lyrra.js', "utf-8");
          const caseRegex = new RegExp(`case '${caseName}'[\\s\\S]*?break`, 'g');
          const match = fileContent.match(caseRegex);
          if (!match) {
            return m.reply(`Case '${caseName}' tidak ditemukan.`);
          }
          return match[0];
        } catch (error) {
          return m.reply(`Terjadi kesalahan saat membaca file: ${error.message}`);
        }
      };
      const caseName = text.trim();
      getCase(caseName)
        .then(caseCode => {
          const recipient = m.quoted ? m.quoted.sender : m.mentionedJid[0];
          if (!recipient || !recipient.includes('@s.whatsapp.net')) {
            return m.reply('Format ID WhatsApp tidak valid!');
          }
          const sendFeature = async (recipient, caseCode) => {
            try {
              const contact = (await Lyrra.onWhatsApp(recipient.split('@')[0]))[0] || {};
              if (!contact) return m.reply('Kontak tidak ditemukan di WhatsApp.');
              const message = `Hi, kamu dapet kiriman fitur nih!\n\n${caseCode}`;
              await Lyrra.sendMessage(recipient, {
                text: message
              }, {
                quoted: m
              });
              m.reply('Fitur berhasil terkirim!');
            } catch (error) {
              console.error('Terjadi kesalahan:', error.message);
              m.reply('Terjadi kesalahan saat mengirim fitur: ' + error.message);
            }
          };
          sendFeature(recipient, caseCode);
        })
        .catch(error => m.reply(`Terjadi kesalahan: ${error.message}`));
    }
    break

    case 'backup': {
      if (!isOwner) return onlyOwn()
      try {
        edit2('Mengumpulkan semua file ke folder...', 'Sukses backup script.');
        const {
          execSync
        } = require("child_process");
        const ls = (await execSync("ls")).toString().split("\n").filter((pe) =>
          pe != "node_modules" &&
          pe != "session" &&
          pe != "package-lock.json" &&
          pe != "yarn.lock" &&
          pe != "");
        const exec = await execSync(`zip -r Backup.zip ${ls.join(" ")}`);
        await Lyrra.sendMessage(m.isGroup ? owner + '@s.whatsapp.net' : from, {
          document: await fs.readFileSync('./Backup.zip'),
          mimetype: "application/zip",
          fileName: "Backup.zip",
        }, {
          quoted: m
        });
        await execSync("rm -rf Backup.zip");
      } catch (err) {
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'getsesi':
    case 'getsession': {
      if (!isOwner) return onlyOwn()
      lyreact()
      let sesi = await fs.readFileSync(`./${sessionName}/creds.json`)
      await Lyrra.sendMessage(m.chat, {
        document: sesi,
        mimetype: 'application/json',
        fileName: 'creds.json'
      }, {
        quoted: m
      })
    }
    break

    case 'delsesi':
    case 'delsession': {
      if (!isOwner) return onlyOwn()
      fs.readdir(`./${sessionName}`, async function (err, files) {
        if (err) {
          console.log('Unable to scan directory: ' + err);
          return m.reply('Unable to scan directory: ' + err);
        }
        let filteredArray = await files.filter(item => item.startsWith("pre-key") ||
          item.startsWith("sender-key") || item.startsWith("session-") || item.startsWith("app-state"))
        console.log(filteredArray.length);
        let teks = `Detected ${filteredArray.length} junk files\n\n`
        if (filteredArray.length == 0) return m.reply(teks)
        filteredArray.map(function (err, i) {
          teks += (i + 1) + `. ${e}\n`
        })
        m.reply(teks)
        await sleep(2000)
        m.reply("Menghapus session...")
        await filteredArray.forEach(function (file) {
          fs.unlinkSync(`./${sessionName}/${file}`)
        });
        await sleep(2000)
        m.reply('Sukses menghapus session!')
      });
    }
    break

    case 'sendsc': {
      if (!isOwner) return onlyOwn()
      if (!m.quoted) return m.reply('Kutip pesan seseorang!')
      edit2("Memproses pengiriman...", "Script berhasil terkirim!")
      try {
        let a = getTime().split("T")[1].split("+")[0]
        let t = q.split(' ');
        let u = m.quoted ? m.quoted.sender : t[3] ? t[3].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
        const {
          execSync
        } = require("child_process");
        const ls = (await execSync("ls")).toString().split("\n").filter((pe) =>
          pe != "node_modules" &&
          pe != "session" &&
          pe != "package-lock.json" &&
          pe != "yarn.lock" &&
          pe != "");
        const exec = await execSync(`zip -r Script.zip ${ls.join(" ")}`);
        await Lyrra.sendMessage(u, {
          document: await fs.readFileSync('./Script.zip'),
          mimetype: "application/zip",
          fileName: "Script.zip",
        }, {
          quoted: m
        });
        await execSync("rm -rf Script.zip");
      } catch (err) {
        m.reply('Terjadi kesalahan')
      }
    }
    break
    
    case 'getscript':
case 'getupdate':
case 'getsc': {
    if (!isPc) return onlyPrivat()
    edit2("Memproses pengiriman...", "Script berhasil diterima!");
    
    try {
        let a = getTime().split("T")[1].split("+")[0];
        const { execSync } = require("child_process");
        const ls = (await execSync("ls")).toString().split("\n").filter((pe) =>
            pe != "node_modules" &&
            pe != "session" &&
            pe != "package-lock.json" &&
            pe != "yarn.lock" &&
            pe != ""
        );
        const exec = await execSync(`zip -r Script.zip ${ls.join(" ")}`);
        await Lyrra.sendMessage(m.sender, {
            document: await fs.readFileSync('./Script.zip'),
            mimetype: "application/zip",
            fileName: "Script.zip",
        }, { quoted: m });
        await execSync("rm -rf Script.zip");
    } catch (err) {
        m.reply('Terjadi kesalahan');
    }
}
break

    case 'addreseller':
    case 'addres': {
      if (!isOwner) return onlyOwn()
      if (!args[0]) return m.reply(`Contoh: ${p_c} nomor`)
      bnnd = text.split("|")[0].replace(/[^0-9]/g, '')
      let cekseler = await Lyrra.onWhatsApp(bnnd + `@s.whatsapp.net`)
      if (cekseler.length == 0) return m.reply(`Masukkan nomor yang aktif!`)
      res.push(bnnd)
      fs.writeFileSync('./data/default-db/reseller.json', JSON.stringify(res))
      m.reply(`Berhasil addreseller`)
    }
    break

    case 'delreseller':
    case 'delres': {
      if (!!isOwner) return onlyOwn()
      if (!args[0]) return m.reply(`Contoh: ${p_c} nomor`)
      yaki = text.split("|")[0].replace(/[^0-9]/g, '')
      unp = res.indexOf(yaki)
      res.splice(unp, 1)
      fs.writeFileSync('./data/default-db/reseller.json', JSON.stringify(res))
      m.reply(`Berhasil delreseller`)
    }
    break

    case 'listreseller':
    case 'listres': {
      if (!isOwner) return onlyOwn()
      tekso = `List reseller\nTotal: ${res.length}\n\n`
      for (let i of res) {
        tekso += `• ${i}\n`
      }
      m.reply(tekso.trim())
    }
    break

    case 'addown':
    case 'addowner': {
      if (!isOwner) return onlyOwn();
      if (!args[0]) return m.reply(`Contoh: ${p_c} tag/kutip`);
      let users = m.mentionedJid[0] ?
        m.mentionedJid[0] :
        m.quoted ?
        m.quoted.sender :
        text.replace(/[^0-9]/g, '');
      if (own.includes(users)) return m.reply('User sudah ada di daftar owner!');
      own.push(users);
      fs.writeFileSync('./data/default-db/owner.json', JSON.stringify(own, null, 2));
      m.reply('Berhasil addowner');
    }
    break

    case 'delown':
    case 'delowner': {
      if (!isOwner) return onlyOwn();
      if (!args[0]) return m.reply(`Contoh: ${p_c} tag/kutip`);
      let users = m.mentionedJid[0] ?
        m.mentionedJid[0] :
        m.quoted ?
        m.quoted.sender :
        q.split('|')[0].replace(/[^0-9]/g, '');
      const index = own.indexOf(users);
      if (index === -1) return m.reply('User tidak ditemukan di daftar owner!');
      own.splice(index, 1);
      fs.writeFileSync('./data/default-db/owner.json', JSON.stringify(own, null, 2));
      m.reply('Berhasil delowner');
    }
    break

    case 'limitreset':
    case 'resetlimit': {
      if (!isOwner) return onlyOwn();
      try {
        const resetLimit = (newLimit) => {
          Object.keys(db.data.users).forEach(user => {
            db.data.users[user].limit = newLimit;
          });
          m.reply("Limit pengguna direset ke " + limitCount)
        };
        resetLimit(limitCount);
      } catch (err) {
        m.reply('Terjadi Kesalahan')
      }
    }
    break

    case 'saldoreset':
    case 'resetsaldo': {
      if (!isOwner) return onlyOwn();
      try {
        const resetSaldo = (newSaldo) => {
          Object.keys(db.data.users).forEach(user => {
            db.data.users[user].saldo = newSaldo;
          });
          m.reply("Limit pengguna direset ke " + saldoCount)
        };
        resetSaldo(saldoCount);
      } catch (err) {
        m.reply('Terjadi Kesalahan')
      }
    }
    break

    case 'databasereset':
    case 'dbreset':
    case 'resetdatabase':
    case 'resetdb': {
      if (!isOwner) return onlyOwn()
      lyreact()
      let teks = `*Select Type Reset Database*\n`
      await Lyrra.sendMessage(
        m.chat, {
          document: {
            url: thumb
          },
          mimetype: "image/png",
          pageCount: 2025,
          fileName: `${botname}`,
          fileLength: 100000000000000,
          jpegThumbnail: fs.readFileSync('./media/thumbnail1.jpg'),
          caption: teks,
          contextInfo: {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: 143
            },
            businessMessageForwardInfo: {
              businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
            }
          },
          footer: `${wm}`,
          buttons: [{
            buttonId: 'action',
            buttonText: {
              displayText: 'interactiveMeta'
            },
            type: 4,
            nativeFlowInfo: {
              name: 'single_select',
              paramsJson: JSON.stringify({
                title: 'Select Type 🔎',
                sections: [{
                  title: "Timer Backup Set",
                  rows: [{
                      "title": "Reset All Database",
                      "description": "Menghapus Semua Database",
                      "id": `${_p}resetdbuser`
                    },
                    {
                      "title": "Reset Register Database",
                      "description": "Menghapus Database User Yang Tidak Terdaftar.",
                      "id": `${_p}resetdbregister`
                    },
                    {
                      "title": "Reset Limit",
                      "description": "Mereset Limit Semua User",
                      "id": `${_p}resetlimit`
                    },
                    {
                      "title": "Reset Saldo",
                      "description": "Mereset Saldo Semua User",
                      "id": `${_p}resetsaldo`
                    }
                  ],
                }, ],
              }),
            },
          }, ],
          headerType: 1,
          viewOnce: true
        }, {
          quoted: m
        });
    }
    break

    case 'resetdbuser': {
      if (!isOwner) return onlyOwn();
      await sleep(1000);

      db.data = {};

      const outputPath = './data/general-db/database.json';
      fs.writeFileSync(outputPath, JSON.stringify(db.data, null, 2));

      m.reply("Berhasil Mereset Semua Database.. Bot Akan Restart Secara Otomatis.");
      process.exit()
    }
    break

    case 'resetdbregister': {
      if (!isOwner) return onlyOwn();
      await sleep(1000);
      const users = db.data.users;
      const erpg = db.data.erpg;
      const newUsers = {};
      const newErpg = {};

      for (let user in users) {
        if (users[user].daftar) {
          newUsers[user] = users[user];
        }
      }

      for (let user in erpg) {
        if (erpg[user].rpg) {
          newErpg[user] = erpg[user];
        }
      }

      db.data.users = newUsers;
      db.data.erpg = newErpg;

      const outputPath = './data/general-db/database.json';
      fs.writeFileSync(outputPath, JSON.stringify(db.data, null, 2));

      m.reply("Berhasil Mereset Database Pengguna yang Belum Daftar..");
    }
    break

    case 'listown':
    case 'listowner':
    case 'listcreator': {
      if (!isOwner) return onlyOwn();
      let teks = `List owner\nTotal: ${own.length}\n\n`;
      for (let kon of own) {
        teks += `• ${kon}\n`;
      }
      m.reply(teks);
    }
    break

    case 'addgold': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} 62xx 1000`);
      let trgt = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      addGold(trgt, parseInt(args[1]));
      m.reply(`*SUKSES ADD GOLD*\nNomor: ${args[0]}\nGold: Rp. ${toRupiah(args[1])}`);
    }
    break

    case 'mingold': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} 628xx 1000`);
      let target = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      if (cekGold(target) < parseInt(args[1]) && cekGold(target) !== 0) {
        return m.reply(`Pengurangan sangat berlebihan!`);
      }
      minGold(target, parseInt(args[1]));
      m.reply(`*SUKSES MIN GOLD*\nNomor: ${args[0]}\nGold: Rp. ${toRupiah(parseInt(args[1]))}`);
    }
    break

    case 'addsaldo': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} 62xx 1000`);
      let trgt = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      addSaldo(trgt, parseInt(args[1]));
      m.reply(`*SUKSES ADD SALDO*\nNomor: ${args[0]}\nSaldo: Rp. ${toRupiah(args[1])}`);
    }
    break

    case 'minsaldo': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} 628xx 1000`);
      let target = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      if (cekSaldo(target) < parseInt(args[1]) && cekSaldo(target) !== 0) {
        return m.reply(`Pengurangan sangat berlebihan!`);
      }
      minSaldo(target, parseInt(args[1]));
      m.reply(`*SUKSES MIN SALDO*\nNomor: ${args[0]}\nSaldo: Rp. ${toRupiah(parseInt(args[1]))}`);
    }
    break

    case 'addsaldoewallet':
    case 'addewallet': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} 62xx 1000`);
      let trgt = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      addEwallet(trgt, parseInt(args[1]));
      m.reply(`*SUKSES ADD EWALLET*\nNomor: ${args[0]}\nEwallet: Rp. ${toRupiah(args[1])}`);
    }
    break

    case 'minsaldoewallet':
    case 'minewallet': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} 628xx 1000`);
      let target = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      if (cekSaldo(target) < parseInt(args[1]) && cekSaldo(target) !== 0) {
        return m.reply(`Pengurangan sangat berlebihan!`);
      }
      minEwallet(target, parseInt(args[1]));
      m.reply(`*SUKSES MIN EWALLET*\nNomor: ${args[0]}\nEwallet: Rp. ${toRupiah(parseInt(args[1]))}`);
    }
    break

    case 'addlimit': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} 62xx 1000`);
      let trgt = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      addLimit(trgt, parseInt(args[1]));
      m.reply(`*SUKSES ADD LIMIT*\nNomor: ${args[0]}\nLimit: Rp. ${toRupiah(args[1])}`);
    }
    break

    case 'minlimit': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} 628xx 1000`);
      let target = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      if (cekLimit(target) < parseInt(args[1]) && cekLimit(target) !== 0) {
        return m.reply(`Pengurangan sangat berlebihan!`);
      }
      minLimit(target, parseInt(args[1]));
      m.reply(`*SUKSES MIN LIMIT*\nNomor: ${args[0]}\nLimit: Rp. ${toRupiah(parseInt(args[1]))}`);
    }
    break

    case 'sampah':
    case 'delsampah':
    case 'delsampah2': {
      if (!isOwner) return onlyOwn()

      const getFiles = (dir) => {
        return fs.readdirSync(dir).filter(v =>
          v.endsWith("gif") || v.endsWith("png") || v.endsWith("mp3") ||
          v.endsWith("mp4") || v.endsWith("jpg") || v.endsWith("jpeg") ||
          v.endsWith("webp") || v.endsWith("webm") ||
          v.endsWith("wav") || v.endsWith("aac") || v.endsWith("flac") ||
          v.endsWith("ogg") || v.endsWith("opus") || v.endsWith("m4a") ||
          v.endsWith("amr") || v.endsWith("3gp")
        ).map(v => `${dir}/${v}`)
      }

      let libFiles = getFiles('./x-system')
      let cacheFiles = fs.existsSync('./.cache') ? getFiles('./.cache') : []
      let rootFiles = getFiles('.').filter(v => !v.startsWith('./x-system') && !v.startsWith('./.cache'))
      let all = [...libFiles, ...cacheFiles, ...rootFiles]

      let jumlahSampah = all.length
      var teks = `${monospace("Jumlah Sampah")}\n\n`
      teks += `Total: ${jumlahSampah} sampah\n\n`
      teks += all.map(o => `${o}\n`).join("")

      if (jumlahSampah > 0) {
        edit3(teks, `Menghapus ${jumlahSampah} file sampah.`, `Sukses menghapus semua sampah.`)
        all.forEach(file => {
          fs.unlinkSync(file)
        })
      } else {
        edit2(teks, `Tidak ada file sampah untuk dihapus.`)
      }
    }
    break

    case 'clearsesi':
    case 'clearallsesi': {
      if (!isOwner) return onlyOwn()
      let directoryPath = path.join(`./${sessionName}`) //&& './x-system') //path.join();
      fs.readdir(directoryPath, async function (err, files) {
        if (err) {
          return m.reply('Tidak dapat memindai direktori: ' + err);
        }
        let filteredArray = await files.filter(item => item.startsWith("session") || item.startsWith("pre-key") || item.startsWith("sender-key"))
        var teks = `Menghapus ${filteredArray.length} file sampah...`
        if (filteredArray.length == 0) return m.reply(teks)
        /*filteredArray.map(function(e, i){
        teks += (i+1)+`. ${e}\n`
        })*/
        edit2(teks, 'Berhasil menghapus semua sampah')
        await filteredArray.forEach(function (file) {
          fs.unlinkSync(`./${sessionName}/${file}`)
        });
      });
    }
    break

    case 'ramclear':
    case 'clearram': {
      var ramUsage = process.memoryUsage().rss
      clearInterval(ramUsage)
      m.reply(`Succes Me-reset Ram Server...`)
    }
    break

    case 'getdb': {
      if (!isOwner) return onlyOwn()
      Lyrra.sendMessage(from, {
        document: fs.readFileSync('./data/general-db/database.json'),
        caption: 'Database Bot',
        mimetype: 'application/json',
        fileName: 'database.json'
      }, {
        quoted: m
      })
    }
    break

    case 'getfolder': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`*CONTOH PENGGUNAAN*\n\n${p_c} ./foldername\n\nInfo lebih: $ ls ./`);

      const folderPath = text;
      const zipPath = `${folderPath}.zip`;

      try {
        exec(`zip -r ${zipPath} ${folderPath}`, (error, stdout, stderr) => {
          if (error) {
            console.error(`Error saat mengompresi folder: ${error.message}`);
            return m.reply('Terjadi kesalahan saat mengompresi folder. Pastikan perintah zip tersedia di sistem.');
          }
          if (stderr) console.error(`Stderr: ${stderr}`);
          if (stdout) console.log(`Stdout: ${stdout}`);
          Lyrra.sendMessage(m.chat, {
            document: fs.readFileSync(zipPath),
            caption: folderPath,
            mimetype: 'application/zip',
            fileName: path.basename(zipPath)
          }, {
            quoted: m
          });
          fs.unlinkSync(zipPath);
        });
      } catch (err) {
        console.error('Terjadi kesalahan:', err);
        m.reply('Terjadi kesalahan saat mengompresi atau mengirim folder.');
      }
    }
    break

    case 'getfile': {
      if (!isOwner) return onlyOwn();
      if (!args[0]) return m.reply(`*CONTOH PENGGUNAAN*\n\n${p_c} ./case.js\n\nInfo lebih: $ ls`);

      const filePath = args[0];
      const mimeType = getMimeType(filePath);
      const fileName = path.basename(filePath);

      try {
        Lyrra.sendMessage(m.chat, {
          document: fs.readFileSync(filePath),
          caption: filePath,
          mimetype: mimeType,
          fileName: fileName
        }, {
          quoted: m
        });
      } catch (err) {
        m.reply('Tidak dapat menemukan file yang kamu cari');
      }
    }
    break

    case 'getfile2': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`*CONTOH PENGGUNAAN*\n\n#1: ${p_c} ./gambar.jpg\n#2: ${p_c} ./data/gambar.jpg\n\nInfo lebih: $ ls`);

      const filePath = text;
      const fileName = path.basename(filePath);
      const mimeType = getMimeType(filePath);
      const isImage = /\.(jpg|jpeg|png|gif|bmp|svg|webp|tiff)$/i.test(fileName);

      try {
        if (isImage) {
          Lyrra.sendMessage(from, {
            image: fs.readFileSync(filePath),
            caption: filePath,
          }, {
            quoted: m
          });
        } else {
          Lyrra.sendMessage(from, {
            document: fs.readFileSync(filePath),
            caption: filePath,
            mimetype: mimeType,
            fileName: fileName
          }, {
            quoted: m
          });
        }
      } catch (err) {
        m.reply('Tidak dapat menemukan file yang kamu cari');
      }
    }
    break

    case 'addfolder': {
      if (!isOwner) return onlyOwn();
      if (!text.startsWith("./")) {
        return m.reply(`Format salah. Contoh penggunaan: ${p_c} ./foldername`);
      }
      let folderPath = path.resolve(text);
      try {
        if (fs.existsSync(folderPath)) {
          return m.reply('Folder sudah ada di lokasi tersebut!');
        }
        fs.mkdirSync(folderPath, {
          recursive: true
        });
        m.reply(`Berhasil membuat folder ${folderPath}`);
      } catch (error) {
        console.error('Error:', error);
        m.reply('Terjadi kesalahan saat membuat folder. Silakan coba lagi.');
      }
    }
    break

    case 'addfile': {
      if (!isOwner) return onlyOwn();
      if (!text.includes("./")) return m.reply(`Contoh: ${p_c} ./path/to/file.txt`);
      let filePath = path.resolve(text);
      let dir = path.dirname(filePath);
      let fileName = path.basename(filePath);
      if (!fs.existsSync(dir)) {
        return m.reply('Direktori tidak ditemukan!');
      }
      let media = await downloadContentFromMessage(m.quoted, "document");
      let buffer = Buffer.from([]);
      for await (const chunk of media) {
        buffer = Buffer.concat([buffer, chunk]);
      }
      if (fs.existsSync(filePath)) {
        fs.appendFileSync(filePath, buffer);
        m.reply(`Berhasil menambahkan konten ke ${fileName}`);
      } else {
        fs.writeFileSync(filePath, buffer);
        m.reply(`Berhasil membuat file ${fileName} dan menambahkan konten.`);
      }
    }
    break

    case 'delfolder': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`*CONTOH PENGGUNAAN*\n\n#1: ${p_c} ./x-system\n#2: ${p_c} ./x-system/connection\n\nInfo lebih: $ ls`)
      const folderPath = path.resolve(text)
      const basePath = path.resolve('./')
      if (!folderPath.startsWith(basePath)) {
        return m.reply('Kamu tidak memiliki izin untuk menghapus folder ini')
      }
      fs.stat(folderPath, (err, stats) => {
        if (err) {
          return m.reply('Folder yang kamu cari tidak ditemukan')
        }
        if (!stats.isDirectory()) {
          return m.reply('Path yang diberikan bukan sebuah folder')
        }
        fs.rmdir(folderPath, {
          recursive: true
        }, (err) => {
          if (err) {
            console.error(err)
            return m.reply('Tidak dapat menghapus folder yang kamu cari')
          }
          m.reply(`Folder ${path.basename(folderPath)} berhasil dihapus`)
        })
      })
    }
    break

    case 'delfile': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`*CONTOH PENGGUNAAN*\n\n#1: ${p_c} ./Lyrra.js\n#2: ${p_c} ./data/general-db/users.json\n\nInfo lebih: $ ls`)

      const filePath = path.resolve(text)
      const basePath = path.resolve('./')
      if (!filePath.startsWith(basePath)) {
        return m.reply('Kamu tidak memiliki izin untuk menghapus file ini')
      }
      try {
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath)
          m.reply(`File ${path.basename(filePath)} berhasil dihapus`)
        } else {
          m.reply('File yang kamu cari tidak ditemukan')
        }
      } catch (err) {
        console.error(err)
        m.reply('Tidak dapat menghapus file yang kamu cari')
      }
    }
    break

    case 'sendfile': {
      if (!isOwner) return onlyOwn();
      if (!m.quoted) return m.reply('Kutip pesan seseorang!');
      if (!args[0]) return m.reply(`*CONTOH PENGGUNAAN*\n\n${p_c} kutip ./case.js\nBisa js/json dll.\n\nInfo lebih: $ ls`);

      const filePath = args[0];
      const mimeType = getMimeType(filePath);
      const fileName = path.basename(filePath);
      const targetUser = m.mentionedJid[0] || (m.quoted ? m.quoted.sender : args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net');

      try {
        Lyrra.sendMessage(targetUser, {
          document: fs.readFileSync(filePath),
          caption: filePath,
          mimetype: mimeType,
          fileName: fileName
        }, {
          quoted: m
        });
        m.reply(`File ${fileName} berhasil terkirim!`);
      } catch (err) {
        m.reply('Tidak dapat menemukan file yang kamu cari');
      }
    }
    break

    case 'move': {
      if (!isOwner) return onlyOwn();
      if (!text.includes(",") || !text.includes("./")) return m.reply(`Contoh: ${p_c} index.js, ./x-system`);
      let [sourceFile, destDir] = text.split(",").map(item => item.trim());
      let sourcePath = path.resolve(sourceFile);
      let fileName = path.basename(sourcePath);
      let destDirPath = path.resolve(destDir);
      let destinationPath = path.resolve(destDirPath, fileName);
      const allowedExtensions = ['.js', '.txt', '.json', '.md', '.jpg', '.png', '.webp'];
      if (!allowedExtensions.includes(path.extname(sourcePath))) {
        return m.reply('Jenis file tidak didukung!');
      }
      if (!fs.existsSync(sourcePath)) {
        return m.reply(`File ${sourceFile} tidak ditemukan!`);
      }
      if (!fs.existsSync(destDirPath)) {
        return m.reply(`Direktori tujuan ${destDirPath} tidak ditemukan!`);
      }
      try {
        fs.accessSync(sourcePath, fs.constants.R_OK);
        fs.accessSync(destDirPath, fs.constants.W_OK);
      } catch (err) {
        return m.reply('Akses file atau direktori ditolak!');
      }
      let baseFileName = path.basename(fileName, path.extname(fileName));
      let fileExtension = path.extname(fileName);
      let counter = 1;
      while (fs.existsSync(destinationPath)) {
        destinationPath = path.resolve(destDirPath, `${baseFileName}_clone${counter}${fileExtension}`);
        counter++
      }
      try {
        fs.renameSync(sourcePath, destinationPath);
        m.reply(`*FILE TELAH DIPINDAHKAN*\nNama: ${path.basename(destinationPath)}\nDari: ${sourcePath}\nKe: ${destinationPath}`);
      } catch (err) {
        m.reply(`Gagal memindahkan file: ${err.message}`);
      }
    }
    break

    case 'bcgc':
    case 'bcgrup': {
      if (!isOwner) return onlyOwn()
      if (!isPc) return onlyPrivat()
      lyreact()
      if (!text) m.reply(`Contoh: ${p_c} teks`)
      let getGroups = await Lyrra.groupFetchAllParticipating()
      let groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
      let anu = groups.map(v => v.id)
      for (let i of anu) {
        await sleep(1500)
        let metadat72 = await Lyrra.groupMetadata(i)
        let participanh = await metadat72.participants
        let msg = generateWAMessageFromContent(i, {
          viewOnceMessage: {
            message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                contextInfo: {
                  mentionedJid: participanh.map(a => a.id),
                  forwardingScore: 99999999999,
                  isForwarded: false,
                  forwardedNewsletterMessageInfo: {
                    newsletterJid: chjid + '@newsletter',
                    newsletterName: `${wm}`,
                    serverMessageId: 145
                  },
                  businessMessageForwardInfo: {
                    businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
                  },
                },
                body: proto.Message.InteractiveMessage.Body.create({
                  text: text
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: ``
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                  title: "",
                  subtitle: "",
                  hasMediaAttachment: false
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [{
                    text: '-'
                  }],
                })
              })
            }
          }
        }, {})
        await Lyrra.relayMessage(i, msg.message, {
          messageId: msg.key.id
        })
      }
      m.reply(`Berhasil mengirim broadcast ke ${anu.length} grup!`)
    }
    break
    
case 'bc':
case 'broadcast': {
    if (!isOwner) return onlyOwn();
    if (!isPc) return onlyPrivat();
    if (!text) return m.reply(`Contoh:\n${p_c} Tes`);
    lyreact();
    
    let chats = Object.keys(store.presences).filter(id => id.includes('@s.whatsapp.net'));
    let total = chats.length;
    
    if (total === 0) return m.reply("Tidak ada chat yang tersedia untuk broadcast.");
    
    m.reply(`Mengirim Broadcast ke ${total} Chat\nPerkiraan selesai dalam ${total * 5} detik...`);
    
    for (let chatId of chats) {
        await Lyrra.sendTextWithMentions(chatId, text, null);
        await new Promise(resolve => setTimeout(resolve, 5000));
    }
    
    m.reply("*Sukses Broadcast ke Semua Chat*");
}
break

    case 'groupjpm':
    case 'jpmgroup':
    case 'gcjpm':
    case 'jpm':
    case 'jpmgc': {
      if (!isOwner) return onlyOwn()
      if (!isPc) return onlyPrivat()
      lyreact()
      if (!text) m.reply(`Contoh: ${p_c} teks`)
      let getGroups = await Lyrra.groupFetchAllParticipating()
      let groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
      let anu = groups.map(v => v.id)
      for (let i of anu) {
        await sleep(1500)
        let metadat72 = await Lyrra.groupMetadata(i)
        let participanh = await metadat72.participants
        let msg = generateWAMessageFromContent(i, {
          viewOnceMessage: {
            message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                contextInfo: {
                  mentionedJid: participanh.map(a => a.id),
                  forwardingScore: 99999999999,
                  isForwarded: false,
                  forwardedNewsletterMessageInfo: {
                    newsletterJid: chjid + '@newsletter',
                    newsletterName: `${wm}`,
                    serverMessageId: 145
                  },
                  businessMessageForwardInfo: {
                    businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
                  },
                },
                body: proto.Message.InteractiveMessage.Body.create({
                  text: text
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: ``
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                  title: "",
                  subtitle: "",
                  hasMediaAttachment: false
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [{
                    text: '-'
                  }],
                })
              })
            }
          }
        }, {})
        await Lyrra.relayMessage(i, msg.message, {
          messageId: msg.key.id
        })
      }
      m.reply(`Berhasil mengirim jpm hidetag ke ${anu.length} grup!`)
    }
    break

    case 'bcimg':
    case 'bcvid': {
      if (!isOwner) return onlyOwn()
      if (!isPc) return onlyPrivat()
      if (!isMediaa) return m.reply('Harus berupa gambar/video!')
      if (!text) return m.reply(`Contoh: ${p_c} teks`)
      lyreact()
      let getGroups = await Lyrra.groupFetchAllParticipating()
      let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
      let anu = groups.map((v) => v.id)

      for (let xnxx of anu) {
        let metadat72 = await Lyrra.groupMetadata(xnxx)
        let participanh = await metadat72.participants

        if (/image/.test(mime)) {
          let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
          let mem = await CatBox(media)
          await Lyrra.sendMessage(xnxx, {
            image: {
              url: mem
            },
            caption: `${kapital(text)}`,
            contextInfo: {
              mentionedJid: participanh.map(a => a.id)
            }
          }, {
            quoted: m
          })
          await sleep(2000)
        } else if (/video/.test(mime)) {
          let media1 = await Lyrra.downloadAndSaveMediaMessage(quoted)
          let mem1 = await CatBox(media1)
          await Lyrra.sendMessage(xnxx, {
            video: {
              url: mem1
            },
            caption: `${kapital(text)}`,
            contextInfo: {
              mentionedJid: participanh.map(a => a.id)
            }
          }, {
            quoted: m
          })
          await sleep(2000)
        } else {
          await Lyrra.sendMessage(xnxx, {
            text: `${kapital(text)}`,
            contextInfo: {
              mentionedJid: participanh.map(a => a.id)
            }
          }, {
            quoted: m
          })
          await sleep(2000)
        }
      }
      m.reply(`Berhasil mengirim broadcast ke ${anu.length} grup!`)
    }
    break

    case 'adduserdb': {
      if (!isOwner) return onlyOwn()
      if (!froms) return m.reply('Tag seseorang!')
      if (!db.data.users[froms].daftar) return m.reply('User sudah terdaftar di database!')
      const currentTimee = Date.now()
      db.data.users[froms] = {
        daftar: true,
        nama: `${pushname}`,
        otp: randomNomor(1000, 9999),
        email: '-',
        serial: '-',
        Lyrra: false,
        unregtime: currentTimee,
        gold: 0,
        saldo: 0,
        limit: 0,
        level: 0,
        exp: 0
      }
      var jeje = `Berhasil add @${froms.split('@')[0]} ke database user.`
      await reply(jeje)
    }
    break

    case 'deluserdb': {
      if (!isOwner) return onlyOwn()
      if (!froms) return m.reply('Tag seseorang!')
      delete db.data.users[froms]
      peeee = `Berhasil del @${froms.split('@')[0]} dari database user.`
      reply(peeee)
    }
    break

    case 'totaluser':
    case 'total-user':
    case 'user-total':
    case 'total-user':
    case 'bot-user':
    case 'user-bot':
    case 'botuser':
    case 'userbot':
    case 'user': {
      try {
        let userdaftar = Object.values(db.data.users).filter(user => user.daftar === true).length;
        let userndaftar = Object.values(db.data.users).filter(user => user.daftar === false).length;
        m.reply(`Total User : ${Object.values(db.data.users).length}
  
Terdaftar : ${userdaftar} user
Tidak Terdaftar : ${userndaftar} user`);
      } catch (err) {
        m.reply('Terjadi Kesalahan')
      }
    }
    break

    case 'versi-bot':
    case 'bot-versi':
    case 'versibot':
    case 'boversi':
    case 'versi':
    case 'version': {
      m.reply(`Bot Version : ${global.version}`)
    }
    break

    case 'block':
    case 'blok': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`Contoh: ${p_c} 628xxx`)
      let blok = q.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
      Lyrra.updateBlockStatus(blok, 'block')
      m.reply(`Berhasil block @${blok.split('@')[0]}`)
    }
    break

    case 'unblock':
    case 'unblok': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`Contoh: ${p_c} 628xxx`)
      let unblok = q.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
      Lyrra.updateBlockStatus(unblok, 'unblock')
      m.reply(`Berhasil unblock ${unblok.split('@')[0]}`)
    }
    break

    case 'listblock':
    case 'listblok': {
      if (!isOwner) return onlyOwn()
      let listblok = await Lyrra.fetchBlocklist()
      m.reply(`${monospace("LIST  BLOCK")}\n` + `Total: ${listblok == undefined ? '*0* diblokir' : '*' + listblok.length + '* diblokir'}\n\n` + listblok.map(v => '• @' + v.replace(/@.+/, '')).join`\n`)
    }
    break

    case 'public-bot':
    case 'bot-public':
    case 'publik':
    case 'public': {
      if (!isOwner) return onlyOwn()
      Lyrra.public = true
      m.reply('Sukses mengubah ke mode public')
    }
    break

    case 'self-bot':
    case 'bot-self':
    case 'self':
    case 'self': {
      if (!isOwner) return onlyOwn()
      Lyrra.public = false
      m.reply('Sukses mengubah ke mode self')
    }
    break

    case 'mode-bot':
    case 'bot-mode':
    case 'mode': {
      if (!isOwner) return onlyOwn()
      Lyrra.sendMessage(m.chat, {
        text: `Memasuki bot mode\nPublic -- _mengaktifkan_\nSelf -- _Menonaktifkan_`,
        caption: '',
        footer: `${wm}`,
        buttons: [{
            buttonId: `${_p}public`,
            buttonText: {
              displayText: `Public`
            }
          },
          {
            buttonId: `${_p}self`,
            buttonText: {
              displayText: `Self`
            }
          }
        ],
        viewOnce: true,
        headerType: 6,
      }, {
        quoted: m
      });
    }
    break

    case 'restart': {
      if (!isOwner) return onlyOwn()
      edit2("Merestart server...", "Sukses merestart server!")
      await sleep(5000)
      process.exit()
    }
    break

    case 'join':
    case 'joingc': {
      if (!isOwner) return onlyOwn();
      if (!text) return m.reply(`Contoh: ${p_c} linkgc`)
      if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) return m.reply('Harus berupa link grup WhatsApp!')
      Lyrra.sendMessage(m.chat, {
        text: 'Sukses join ke grup.'
      }, {
        quoted: m
      })
      let result = args[0].split('https://chat.whatsapp.com/')[1]
      await Lyrra.groupAcceptInvite(result)
    }
    break

    case 'setnamabot': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`Contoh: ${p_c} Lyrra`)
      await Lyrra.updateProfileName(text)
      await m.reply(`Sukses mengganti nama bot!`)
    }
    break

    case 'setbiobot': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`Contoh: ${p_c} aktif`)
      await Lyrra.updateProfileStatus(text)
      await m.reply(`Sukses mengganti bio bot!`)
    }
    break

    case 'setbotpp':
    case 'setppbot': {
      if (!isOwner) return onlyOwn()
      if (!quoted) return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`)
      if (!/image/.test(mime)) return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`)
      if (/webp/.test(mime)) return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`)
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
      await Lyrra.updateProfilePicture(botNumber, {
        url: media
      }).then(() => fs.unlinkSync(media)).catch((err) => fs.unlinkSync(media))
      m.reply('Sukses mengganti pp bot!')
    }
    break

    case 'delppbot': {
      if (!isOwner) return onlyOwn()
      await Lyrra.removeProfilePicture(botNumber)
      await m.reply(`Sukses menghapus pp bot!`)
    }
    break

    case 'autotyping': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        if (setting.autotyping) return m.reply('Sudah diaktifkan sebelumnya')
        setting.autotyping = true
        setting.autorecording = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan autotyping.')
      } else if (args[0] === 'off') {
        if (!setting.autotyping) return m.reply('Sudah dinonaktifkan sebelumnya')
        setting.autotyping = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan autotyping.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    
    case 'autorecording': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        if (setting.autorecording) return m.reply('Sudah diaktifkan sebelumnya')
        setting.autorecording = true
        setting.autotyping = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan auto recording.')
      } else if (args[0] === 'off') {
        if (!setting.autorecording) return m.reply('Sudah dinonaktifkan sebelumnya')
        setting.autorecording = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan auto recording.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    
    case 'autosticker':
    case 'stikerauto':
    case 'autostiker': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        if (setting.autostiker) return m.reply('Sudah diaktifkan sebelumnya')
        setting.autostiker = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan autostiker.')
      } else if (args[0] === 'off') {
        if (!setting.autostiker) return m.reply('Sudah dinonaktifkan sebelumnya')
        setting.autostiker = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan autostiker.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'autoread': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        if (setting.autoread) return m.reply('Sudah diaktifkan sebelumnya')
        setting.autoread = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan autoread.')
      } else if (args[0] === 'off') {
        if (!setting.autoread) return m.reply('Sudah dinonaktifkan sebelumnya')
        setting.autoread = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan autoread.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'autoblokir212':
    case 'block212':
    case 'autoblock212':
    case 'autoblok212': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.autoblok212 = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan autoblok212.')
      } else if (args[0] === 'off') {
        setting.autoblok212 = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan autoblok212.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'autosimilarity':
    case 'similarity': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.similarity = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan similarity.')
      } else if (args[0] === 'off') {
        setting.similarity = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan similarity.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'sholatauto':
    case 'notifysholat':
    case 'sholatnotify':
    case 'notifsholat':
    case 'sholatnotif':
    case 'autosholat': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.autosholat = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan autosholat.')
      } else if (args[0] === 'off') {
        setting.autosholat = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan autosholat.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'registeronly':
    case 'onlyregister': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.onlyRegister = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan onlyRegister.')
      } else if (args[0] === 'off') {
        setting.onlyRegister = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan onlyRegister.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'groupjoinonly':
    case 'gcjoinonly':
    case 'onlygroupjoin':
    case 'onlygcjoin': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.onlygcjoin = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan gcjoinonly.')
      } else if (args[0] === 'off') {
        setting.onlygcjoin = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan gcjoinonly.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'rpgsetstats':
    case 'setrpgstats': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.rpgsetStats = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan rpgsetstats.')
      } else if (args[0] === 'off') {
        setting.rpgsetStats = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan rpgsetstats.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'grupaddset':
    case 'addgcset': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.grupaddSet = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan grupaddSet.')
      } else if (args[0] === 'off') {
        setting.grupaddSet = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan grupaddSet.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'autobio': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.autobio = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan autobio.')
      } else if (args[0] === 'off') {
        setting.autobio = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan autobio.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'chreact':
    case 'reactch': {
      if (!isOwner) return onlyOwn()

      const args = body.trim().split(/ +/).slice(1);
      if (args.length < 3) return m.reply("Format salah! Gunakan: .reactch,idsaluran, message_id, emoji1, emoji2");

      const formattedArgs = args.join(",").split(",");
      if (formattedArgs.length < 3) return m.reply("Format salah! Gunakan: .reactch,idsaluran,message_id,emoji1,emoji2");

      const channelId = formattedArgs[0];
      const messageId = formattedArgs[1];
      const emojis = formattedArgs.slice(2);

      try {
        for (const emoji of emojis) {
          await Lyrra.newsletterReactMessage(channelId, messageId, emoji);
          await new Promise(resolve => setTimeout(resolve, 1000));
        }

        m.reply(`✅ Berhasil mengirim reaksi ke pesan ${messageId} di saluran ${channelId}.\nReaksi: ${emojis.join(", ")}`);
      } catch (error) {
        console.error("Gagal mengirim reaksi:", error);
        m.reply("❌ Gagal mengirim reaksi. Pastikan ID saluran dan pesan benar.");
      }
    }
    break

    case 'limitauto':
    case 'autolimit': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.autolimit = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan autolimit.')
      } else if (args[0] === 'off') {
        setting.autolimit = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan autolimit.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'autoviewsw':
    case 'autoswview':
    case 'autoview': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.autoviewsw = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan autoviewsw.')
      } else if (args[0] === 'off') {
        setting.autoviewsw = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan autoviewsw.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'anticall': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.anticall = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan anticall.')
      } else if (args[0] === 'off') {
        setting.anticall = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan anticall.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'antispam': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.antispams = true
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengaktifkan antispam.')
      } else if (args[0] === 'off') {
        setting.antispams = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses menonaktifkan antispam.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'ban': {
      if (!isOwner) return onlyOwn()
      try {
        let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
        if (own.includes(users)) return m.reply('Masa ke owner sendiri.')
        if (!m.mentionedJid[0] && !m.quoted && !text) return m.reply(`Tag/kutip pesan seseorang!`)
        db.data.users[users].banned = true
        db.data.users[users].limit = 10
        db.data.users[users].saldo = 0
        Lyrra.sendTextWithMentions(m.chat, `Sukses banned user.`, m)
      } catch (err) {
        m.reply(`Tag/kutip pesan seseorang!`)
      }
    }
    break

    case 'unban': {
      if (!isOwner) return onlyOwn()
      try {
        let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
        if (!m.mentionedJid[0] && !m.quoted && !text) return m.reply(`Tag/kutip pesan seseorang!`)
        db.data.users[users].banned = false
        Lyrra.sendTextWithMentions(m.chat, `Sukses unbanned user.`, m)
      } catch (err) {
        m.reply(`Tag/kutip pesan seseorang!`)
      }
    }
    break

    case 'listban': {
      let bannedUsers = Object.keys(db.data.users).filter(user => db.data.users[user].banned)
      if (bannedUsers.length === 0) return m.reply('Tidak ada user yang dibanned')
      let txt = `List user yang dibanned\nTotal: ${bannedUsers.length}\n\n`
      for (let user of bannedUsers) {
        txt += `• @${user.split('@')[0]}\n`
      }
      Lyrra.sendTextWithMentions(m.chat, txt, m)
    }
    break

    case 'typemenu':
    case 'menutype':
    case 'tipemenu':
    case 'menutipe':
    case 'setbotmenu':
    case 'setmenubot':
    case 'menuset':
    case 'setmenu': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'v1') {
        setting.tipemenu = "v1"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah Tipe Menu Menjadi v1.')
      } else if (args[0] === 'v2') {
        setting.tipemenu = "v2"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah Tipe Menu Menjadi v2.')
      } else if (args[0] === 'v3') {
        setting.tipemenu = "v3"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah Tipe Menu Menjadi v3.')
      } else if (args[0] === 'v4') {
        setting.tipemenu = "v4"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah Tipe Menu Menjadi v4.')
      } else if (args[0] === 'v5') {
        setting.tipemenu = "v5"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah Tipe Menu Menjadi v5.')
      } else if (args[0] === 'v6') {
        setting.tipemenu = "v6"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah Tipe Menu Menjadi v6.')
      } else if (args[0] === 'vv1') {
        setting.tipemenuall = "v1"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah All Tipe Menu Menjadi v1.')
      } else if (args[0] === 'vv2') {
        setting.tipemenuall = "v2"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah All Tipe Menu Menjadi v2.')
      } else if (args[0] === 'vv3') {
        setting.tipemenuall = "v3"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah All Tipe Menu Menjadi v3.')
      } else if (args[0] === 'vv4') {
        setting.tipemenuall = "v4"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah All Tipe Menu Menjadi v4.')
      } else if (args[0] === 'vv5') {
        setting.tipemenuall = "v5"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah All Tipe Menu Menjadi v5.')
      } else if (args[0] === 'vv6') {
        setting.tipemenuall = "v6"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah All Tipe Menu Menjadi v6.')
      } else if (args[0] === 'default') {
        setting.tipemenu = "v1"
        setting.tipemenuall = "v3"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah Tipe Menu Menjadi Default.')
      } else if (args[0] === 'button') {
        setting.tipemenu = "v1"
        setting.tipemenuall = "v1"
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses Mengubah Tipe Menu Menjadi Full Button.')
      } else {
        await Lyrra.sendMessage(m.chat, {
          document: {
            url: thumb
          },
          mimetype: "image/png",
          pageCount: 2025,
          fileName: `${botname}`,
          fileLength: 100000000000000,
          jpegThumbnail: fs.readFileSync('./media/thumbnail1.jpg'),
          caption: '*Select Tipe Menu Dibawah*',
          contextInfo: {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: 143
            },
            businessMessageForwardInfo: {
              businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
            }
          },
          footer: `${wm}`,
          buttons: [
            {
              buttonId: 'action',
              buttonText: {
                displayText: 'interactiveMeta'
              },
              type: 4,
              nativeFlowInfo: {
                name: 'single_select',
                paramsJson: JSON.stringify({
                  title: 'Select Type 🔎',
                  sections: [{
                      title: "Menu Tipe",
                      rows: [{
                          "title": "Tipe Menu 1",
                          "description": "Mengubah Tipe Menu Menjadi v1",
                          "id": `${p_c} v1`
                        },
                        {
                          "title": "Tipe Menu 2",
                          "description": "Mengubah Tipe Menu Menjadi v2",
                          "id": `${p_c} v2`
                        },
                        {
                          "title": "Tipe Menu 3",
                          "description": "Mengubah Tipe Menu Menjadi v3",
                          "id": `${p_c} v3`
                        },
                        {
                          "title": "Tipe Menu 4",
                          "description": "Mengubah Tipe Menu Menjadi v4",
                          "id": `${p_c} v4`
                        },
                        {
                          "title": "Tipe Menu 5",
                          "description": "Mengubah Tipe Menu Menjadi v5",
                          "id": `${p_c} v5`
                        },
                        {
                          "title": "Tipe Menu 6",
                          "description": "Mengubah Tipe Menu Menjadi v6",
                          "id": `${p_c} v6`
                        },
                      ]
                    },
                    {
                      title: "All Tipe Menu",
                      rows: [{
                          "title": "All Tipe Menu 1",
                          "description": "Mengubah All Tipe Menu Menjadi v1",
                          "id": `${p_c} vv1`
                        },
                        {
                          "title": "All Tipe Menu 2",
                          "description": "Mengubah All Tipe Menu Menjadi v2",
                          "id": `${p_c} vv2`
                        },
                        {
                          "title": "All Tipe Menu 3",
                          "description": "Mengubah All Tipe Menu Menjadi v3",
                          "id": `${p_c} vv3`
                        },
                        {
                          "title": "All Tipe Menu 4",
                          "description": "Mengubah All Tipe Menu Menjadi v4",
                          "id": `${p_c} vv4`
                        },
                        {
                          "title": "All Tipe Menu 5",
                          "description": "Mengubah All Tipe Menu Menjadi v5",
                          "id": `${p_c} vv5`
                        },
                        {
                          "title": "All Tipe Menu 6",
                          "description": "Mengubah All Tipe Menu Menjadi v6",
                          "id": `${p_c} vv6`
                        },
                      ]
                    },
                    {
                      title: "Optional Tipe Menu",
                      rows: [{
                          "title": "Default Tipe Menu",
                          "description": "Mengubah Tipe All Menu Menjadi Default",
                          "id": `${p_c} default`
                        },
                        {
                          "title": "Full Button Tipe Menu",
                          "description": "Mengubah Tipe All Menu Menjadi Full Button",
                          "id": `${p_c} button`
                        }
                      ],
                    },
                  ],
                }),
              },
            },
          ],
          headerType: 1,
          viewOnce: true
        }, {
          quoted: m
        });
      }
    }
    break

    case 'creategc':
    case 'creategrup': {
      if (!isOwner) return onlyOwn()
      if (!args.join(" ")) return m.reply(`Contoh: ${p_c} namagrup`)
      try {
        let cret = await Lyrra.groupCreate(args.join(" "), [])
        let response = await Lyrra.groupInviteCode(cret.id)
        let teks2 = `*BERHASIL MEMBUAT GRUP*

• Nama: ${cret.subject}
• Owner: @${cret.owner.split("@")[0]}
• Dibuat: ${moment(cret.creation * 1000).tz("Asia/Kolkata").format("DD/MM/YYYY HH:mm:ss")}
• ID: ${cret.id}
• Link: chat.whatsapp.com/${response}`
        m.reply(teks2)
      } catch {
        m.reply('Terjadi kesalahan')
      }
    }
    break
    
    case 'clearchats':
    case 'clearchat': {
    if (!isOwner) return onlyOwn();
     await Lyrra.chatModify({
		delete: true,
		lastMessages: [{
		key: m.key,
		messageTimestamp: m.messageTimestamp
		}]
		}, m.chat)
    m.reply('Berhasil menghapus semua pesan untuk riwayat chats ini...');
}
break

    case 'addexc':
    case 'addexcept': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`Contoh: ${p_c} ./namaFile.js`)
      if (!text.includes('./')) return m.reply(`Contoh: ${p_c} ./namaFile.js`)
      const namaa = text.trim()
      if (!datareadcek.exceptFiles.includes(namaa)) {
        datareadcek.exceptFiles.push(namaa)
        m.reply(`File ${namaa} berhasil ditambahkan`)
      } else {
        m.reply(`File ${namaa} udah ada sebelumnya`)
      }
    }
    break

    case 'delexc':
    case 'delexcept': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`Contoh: ${p_c} ./namaFile.js`)
      if (!text.includes('./')) return m.reply(`Contoh: ${p_c} ./namaFile.js`)
      const namaf = text.trim()
      const index = datareadcek.exceptFiles.indexOf(namaf)
      if (index > -1) {
        datareadcek.exceptFiles.splice(index, 1)
        m.reply(`File ${namaf} berhasil dihapus`)
      } else {
        m.reply(`File ${namaf} tidak ditemukan`)
      }
    }
    break

    case 'listexc':
    case 'listexcept': {
      if (!isOwner) return onlyOwn()
      if (datareadcek.exceptFiles.length === 0) return m.reply('Tidak ada file yang dikecualikan')
      const list = datareadcek.exceptFiles.join('\n')
      m.reply(`List file yang dikecualikan:\n\n${list}`)
    }
    break

    case 'read': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`Contoh: ${p_c} ./namaFile.js atau ./namaFile.json`)
      const filePath = text.trim()
      if (datareadcek.exceptFiles.includes(filePath)) {
        return m.reply('File tersebut diblok/dikecualikan!')
      }
      try {
        const isinya = await fs.promises.readFile(filePath, "utf-8")
        m.reply(isinya)
      } catch (err) {
        console.error(err)
        m.reply(`Terjadi kesalahan`)
      }
    }
    break

    case 'modegrup':
    case 'gconly': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.gconly = true
        setting.pconly = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengubah ke mode gc-only.')
      } else if (args[0] === 'off') {
        setting.gconly = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengubah ke mode gc/pc only.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'modepv':
    case 'pconly': {
      if (!isOwner) return onlyOwn()
      if (args[0] === 'on') {
        setting.pconly = true
        setting.gconly = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengubah ke mode pc-only.')
      } else if (args[0] === 'off') {
        setting.pconly = false
        fs.writeFileSync('./config-db-set.json', JSON.stringify(setting, null, 2))
        await m.reply('Sukses mengubah ke mode gc/pc only.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    // === Group Menu
    case 'acc': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      const groupId = m.chat;
      const [subCommand, options] = args;
      const joinRequestList = await Lyrra.groupRequestParticipantsList(groupId);

      switch (subCommand) {
      case 'list': {
        const formattedRequests = joinRequestList.length > 0 ?
          joinRequestList.map((request, i) => {
            const timestamp = request.request_time;
            return `*${i + 1}.*\n• Nomor: @${request.jid.split('@')[0]}\n• Metode Permintaan: ${request.request_method}\n• Waktu Permintaan: ${new Intl.DateTimeFormat('id-ID', {
                weekday: 'long',
                day: 'numeric',
                month: 'long',
                year: 'numeric'
              }).format(new Date(1e3 * timestamp))}\n\n`;
          }).join('') :
          'Tidak ada permintaan bergabung yang tertunda.';
        Lyrra.sendTextWithMentions(m.chat, `*Daftar Permintaan Bergabung :*\n\n${formattedRequests}`, m)
        break;
      }
      case 'reject':
      case 'approve': {
        if (options === 'all') {
          for (const request of joinRequestList) {
            await Lyrra.groupRequestParticipantsUpdate(groupId, [request.jid], subCommand);
            console.log(`Meng-${subCommand} participant dengan JID: ${request.jid}`);
          }
          reply(`*${subCommand === 'approve' ? 'Menyetujui' : 'Menolak'} semua permintaan bergabung.*`);
        } else {
          const participants = options.split('|').map(action => action.trim()).map(action => joinRequestList[parseInt(action) - 1]).filter(request => request);
          if (participants.length > 0) {
            let formattedResponse = '';
            for (const request of participants) {
              const response = await Lyrra.groupRequestParticipantsUpdate(groupId, [request.jid], subCommand);
              const status = response[0]?.status === 'success' ? 'Gagal' : 'Berhasil';
              formattedResponse += `*${participants.indexOf(request) + 1}.*\n• Status: ${status}\n• Nomor: ${request.jid.split('@')[0]}\n\n`;
              console.log(`Meng-${subCommand} participant dengan JID: ${request.jid}`);
            }
            reply(`*${subCommand === 'approve' ? 'Menyetujui' : 'Menolak'} Permintaan Bergabung:*\n\n${formattedResponse}`);
          } else {
            reply('Tidak ada anggota yang cocok untuk reject/approve.');
          }
        }
        break;
      }
      default:
        reply('*Perintah tidak valid.*\nGunakan:\n- *acc list*\n- *acc approve [number]*\n- *acc reject [number]*\n- *acc reject [JID]*\n- *acc reject/approve all* untuk menolak/menyetujui semua permintaan bergabung.');
      }
    }
    break

    case 'add': {
      if (setting.grupaddSet) return m.reply('Fitur add member melalui bot telah dimatikan oleh owner')
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      let users = m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

      try {
        const participants = await Lyrra.groupMetadata(m.chat)
        if (participants.participants.some(p => p.id === users)) {
          return m.reply('Target udah ada di grup.')
        }
        await Lyrra.groupParticipantsUpdate(m.chat, [users], 'add')
        m.reply('Sukses nambahin target.')
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'killer':
    case 'shutdown':
    case 'k':
    case 'kik':
    case 'kick': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()

      let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

      try {
        const participants = await Lyrra.groupMetadata(m.chat)
        const ownerNumber = global.owner + '@s.whatsapp.net'

        if (users === ownerNumber || users === botNumber) {
          return m.reply('Ga bisa ngeluarin admin utama atau bot.')
        }

        if (!participants.participants.some(p => p.id === users)) {
          return m.reply('Target nggak ada di grup.')
        }

        await Lyrra.groupParticipantsUpdate(m.chat, [users], 'remove')
        m.reply('Sukses kick target.')
      } catch (err) {
        m.reply('Terjadi kesalahan.')
      }
    }
    break
    case 'introgc':
    case 'groupintro':
    case 'grupintro':
    case 'introgrup':
    case 'introgroup':
    case 'gcintro':
    case 'intro': {
      var intro = `⸙‹•══════════════♡᭄
│       *「 Kartu Intro 」*
│ *Nama     :* 
│ *Gender   :* 
│ *Umur      :* 
│ *Hobby    :* 
│ *Kelas      :* 
│ *Asal         :* 
│ *Agama    :* 
│ *Status     :* 
╰═════ꪶ ۪⸙ ━ ━ ━ ━ ꪶ ̷⸙
`
      Lyrra.sendMessage(m.chat, {
        text: intro
      }, {
        quoted: m
      })
    }
    break

    case 'addtime': {
      if (setting.grupaddSet) return m.reply('Fitur add member melalui bot telah dimatikan oleh owner')
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()

      const timeUnits = {
        detik: 1000,
        menit: 60000,
        jam: 3600000,
        hari: 86400000
      }
      const duration = parseInt(args[0])
      const unit = args[1]?.toLowerCase()
      const multiplier = timeUnits[unit]

      if (!multiplier || isNaN(duration) || duration <= 0) {
        return m.reply(`Pilih:\nDetik\nMenit\nJam\nHari\n\nContoh: ${p_c} 10 detik`)
      }

      const timer = duration * multiplier
      m.reply(`Add time ${duration} ${unit} dimulai sekarang!`)

      setTimeout(async () => {
        let users = m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
        const participants = await Lyrra.groupMetadata(m.chat)

        if (participants.participants.some(p => p.id === users)) {
          return m.reply('Target udah ada di grup.')
        }

        await Lyrra.groupParticipantsUpdate(m.chat, [users], 'add')
        m.reply('Sukses nambahin target.')
      }, timer)
    }
    break

    case 'shutdowntime':
    case 'kick-time':
    case 'kicktime': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()

      const timeUnits = {
        detik: 1000,
        menit: 60000,
        jam: 3600000,
        hari: 86400000
      }
      const duration = parseInt(args[0])
      const unit = args[1]?.toLowerCase()
      const multiplier = timeUnits[unit]

      if (!multiplier || isNaN(duration) || duration <= 0) {
        return m.reply(`Pilih:\nDetik\nMenit\nJam\nHari\n\nContoh: ${p_c} 10 detik`)
      }

      const timer = duration * multiplier
      m.reply(`Kick time ${duration} ${unit} dimulai sekarang!`)

      setTimeout(async () => {
        let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
        const participants = await Lyrra.groupMetadata(m.chat)
        const ownerNumber = global.owner + '@s.whatsapp.net'

        if (users === ownerNumber || users === botNumber) {
          return m.reply('Ga bisa ngeluarin admin utama atau bot.')
        }

        if (!participants.participants.some(p => p.id === users)) {
          return m.reply('Target nggak ada di grup.')
        }

        await Lyrra.groupParticipantsUpdate(m.chat, [users], 'remove')
        m.reply('Sukses kick target.')
      }, timer)
    }
    break

    case 'undang':
    case 'invite': {
      if (setting.grupaddSet) return m.reply('Fitur add member melalui bot telah dimatikan oleh owner')
      if (!m.isGroup) return onlyGrup()
      if (!isBotAdmins) return onlyBotAdmin()
      if (!text) return m.reply(`Contoh: ${p_c} 628xx`)
      if (text.includes('+')) return m.reply(`Masukan nomor tanpa "+"`)

      const phoneNumber = text.replace(/[^0-9]/g, '')
      if (phoneNumber !== text || isNaN(phoneNumber)) return m.reply(`Hanya Angka! dan masukan kode (nomor) negara tanpa spasi atau tanda lain seperti "-" atau "."`)
      let link = 'https://chat.whatsapp.com/' + await Lyrra.groupInviteCode(m.chat)

      await Lyrra.sendMessage(`${text}@s.whatsapp.net`, {
        text: `*GROUP INVITATION*\n\nAdmin dari *${groupMetadata.subject}* mengundang kamu untuk bergabung nih.\n${link}`,
        mentions: [m.sender]
      })

      m.reply('Sukses mengundang nomor target!')
    }
    break

    case 'gclink':
    case 'linkgc': {
      if (!m.isGroup) return onlyGrup()
      if (!isBotAdmins) return onlyBotAdmin()
      let responsee = await Lyrra.groupInviteCode(m.chat)
      Lyrra.sendTeks(m.chat, `https://chat.whatsapp.com/${responsee}\n\nLink grup: ${groupMetadata.subject}`, m, {
        detectLink: true
      })
    }
    break

    case 'resetlinkgc':
    case 'linkreset':
    case 'resetlink':
    case 'revoke': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      await Lyrra.groupRevokeInvite(m.chat)
        .then(res => {
          m.reply(`Sukses menyetel ulang link grup`)
        }).catch(() => m.reply('Terjadi kesalahan'))
    }
    break

    case 'adminkan':
    case 'pm':
    case 'promote': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
      await Lyrra.groupParticipantsUpdate(m.chat, [users], 'promote').then((res) => m.reply('Sukses promote target')).catch((err) => m.reply('Terjadi kesalahan'))
    }
    break

    case 'dm':
    case 'demote': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
      await Lyrra.groupParticipantsUpdate(m.chat, [users], 'demote').then((res) => m.reply('Sukses demote target')).catch((err) => m.reply('Terjadi kesalahan'))
    }
    break

    case 'opengc':
    case 'gcopen':
    case 'open':
    case 'bukagc':
    case 'buka': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      Lyrra.groupSettingUpdate(m.chat, 'not_announcement')
      m.reply(`Sukses membuka grup`)
    }
    break

    case 'closegc':
    case 'gcclose':
    case 'close':
    case 'tutupgc':
    case 'tutup': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      Lyrra.groupSettingUpdate(m.chat, 'announcement')
      m.reply(`Sukses menutup grup`)
    }
    break

    case 'opengctime':
    case 'opentimegc':
    case 'opentime': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin();
      if (!isBotAdmins) return onlyBotAdmin();
      const timeUnits = {
        detik: 1000,
        menit: 60000,
        jam: 3600000,
        hari: 86400000
      };
      const unit = args[1]?.toLowerCase();
      const multiplier = timeUnits[unit];
      const duration = parseInt(args[0]);
      if (!multiplier || isNaN(duration) || duration <= 0) {
        return m.reply(`Pilih:\nDetik\nMenit\nJam\nHari\n\nContoh: ${p_c} 10 detik`);
      }
      const timer = duration * multiplier;
      m.reply(`Open time ${duration} ${unit} dimulai dari sekarang!`);
      const sendReminder = (message, delay) => {
        if (timer > delay) {
          setTimeout(() => {
            m.reply(message);
          }, timer - delay);
        }
      };
      sendReminder(`Pengingat: 10 detik lagi grup akan dibuka!`, 10000);
      setTimeout(() => {
        const open = `*[ OPEN TIME ]* Grup telah dibuka!`;
        Lyrra.groupSettingUpdate(from, 'not_announcement');
        m.reply(open);
      }, timer);
    }
    break

    case 'closegctime':
    case 'closetimegc':
    case 'closetime': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin();
      if (!isBotAdmins) return onlyBotAdmin();
      const timeUnits = {
        detik: 1000,
        menit: 60000,
        jam: 3600000,
        hari: 86400000
      };
      const unit = args[1]?.toLowerCase();
      const multiplier = timeUnits[unit];
      const duration = parseInt(args[0]);
      if (!multiplier || isNaN(duration) || duration <= 0) {
        return m.reply(`Pilih:\nDetik\nMenit\nJam\nHari\n\nContoh: ${p_c} 10 detik`);
      }
      const timer = duration * multiplier;
      m.reply(`Close time ${duration} ${unit} dimulai dari sekarang!`);
      const sendReminder = (message, delay) => {
        if (timer > delay) {
          setTimeout(() => {
            m.reply(message);
          }, timer - delay);
        }
      };
      sendReminder(`Pengingat: 10 detik lagi grup akan ditutup!`, 10000);
      setTimeout(() => {
        const close = `*[ CLOSE TIME ]* Grup telah ditutup!`;
        Lyrra.groupSettingUpdate(from, 'announcement');
        m.reply(close);
      }, timer);
    }
    break
    case 'setgcname':
    case 'setnamegc':
    case 'setsubjek': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args.length < 1) return m.reply(`Contoh: ${p_c} teks`)
      await Lyrra.groupUpdateSubject(from, text)
      m.reply(`Sukses mengganti nama grup`)
    }
    break

    case 'setgcdesk':
    case 'setdeksgc':
    case 'setdesk': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()

      let newText = text
      const isEdit = newText.includes('--edit')

      if (isEdit) newText = newText.replace('--edit', '').trim()

      if (!newText) return m.reply(`Contoh #1: ${p_c} teks\nContoh #2: ${p_c} teks --edit`)

      try {
        const groupMetadata = await Lyrra.groupMetadata(m.chat)
        let currentDescription = groupMetadata.desc
        if (isEdit && currentDescription) {
          newText = currentDescription + '\n' + newText
        }

        await Lyrra.groupUpdateDescription(m.chat, newText)
        m.reply('Sukses mengganti deskripsi grup')
      } catch (err) {
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'setppgroup':
    case 'setgcprofil':
    case 'setprofilgc':
    case 'setppgc': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
      await Lyrra.updateProfilePicture(m.chat, {
        url: media
      }).then(() => fs.unlinkSync(media)).catch((err) => fs.unlinkSync(media))
      m.reply("Sukses mengganti profil grup")
    }
    break

    case 'delgcprofile':
    case 'delprofilgc':
    case 'delppgc': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      await Lyrra.removeProfilePicture(from)
      await m.reply(`Sukses menghapus profil grup`)
    }
    break

    case 'getnamagc':
    case 'getgcname': {
      if (!m.isGroup) return onlyGrup()
      lyreply(`${groupMetadata.subject}`)
    }
    break

    case 'getgcdesk':
    case 'getdeskgc': {
      if (!m.isGroup) return onlyGrup()
      lyreply(`${groupMetadata.desc}`)
    }
    break

    case 'getgcprofil':
    case 'getprofilgc':
    case 'getppgc': {
      if (!m.isGroup) return onlyGrup()
      try {
        avatar = await Lyrra.profilePictureUrl(m.chat, "image")
      } catch {
        avatar = 'https://files.catbox.moe/nwvkbt.png'
      }
      Lyrra.sendMessage(m.chat, {
        image: {
          url: avatar
        },
        caption: `© ${wm}`
      }, {
        quoted: m
      })
    }
    break
    case 'getusername':
    case 'getname': {
      if (!m.isGroup) return onlyGrup()
      if (m.quoted) {
        let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
        let nama = Lyrra.getName(users)
        m.reply(nama)
      } else m.reply('Kutip pesan seseorang!')
    }
    break

    case 'getuserpp':
    case 'getppuser':
    case 'getpp': {
      let users;
      if (text) {
        users = text.replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      } else if (m.quoted) {
        users = m.mentionedJid[0] ?
          m.mentionedJid[0] :
          m.quoted ?
          m.quoted.sender :
          null;
      } else {
        return m.reply('Kutip pesan seseorang atau masukkan nomor!');
      }
      try {
        avatar = await Lyrra.profilePictureUrl(users, 'image');
      } catch {
        avatar =
          'https://files.catbox.moe/nwvkbt.png';
      }
      Lyrra.sendMessage(
        m.chat, {
          image: {
            url: avatar,
          },
          caption: `© ${wm}`,
        }, {
          quoted: m
        }
      );
    }
    break

    case 'infoget':
    case 'getinfo':
    case 'bioget':
    case 'getbio': {
      let users;
      if (text) {
        users = text.replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      } else if (m.quoted) {
        users = m.mentionedJid[0] ?
          m.mentionedJid[0] :
          m.quoted.sender;
      } else {
        return m.reply('Kutip pesan seseorang atau masukkan nomor!');
      }

      try {
        let p = await Lyrra.fetchStatus(users)
        await Lyrra.sendTextWithMentions(m.chat, `Bio @${users.split('@')[0]} : ` + p.status, m)
      } catch (e) {
        m.reply('Gagal mengambil bio atau pengguna tidak memiliki bio.');
        console.error(e)
      }
    }
    break

    case 'gcinfo':
    case 'infogroup':
    case 'infogrup':
    case 'infogc': {
      if (!m.isGroup) return onlyGrup();
      let admin = groupMetadata.participants.filter(p => p.admin);
      let creationDate = moment(groupMetadata.creation * 1000).format('DD/MM/YY HH:mm');
      let subject = groupMetadata.subject;
      let restrict = groupMetadata.restrict ? 'Hanya admin' : 'Semua peserta';
      let announce = groupMetadata.announce ? 'Hanya admin' : 'Semua peserta';
      let antiLink = db.data.chats[m.chat].antilink ? 'Aktif' : 'Nonaktif';
      let antiLinkgc = db.data.chats[m.chat].antilinkgc ? 'Aktif' : 'Nonaktif';
      let teks = `${monospace("INFO GROUP")}

Nama grup: ${subject}
Total admin: ${admin.length}
Total member: ${groupMetadata.participants.length}
Tgl dibuat: ${creationDate}

Mengedit info grup:
- ${restrict}
Mengirim pesan:
- ${announce}

Anti-link: ${antiLink}
Anti-linkgc: ${antiLinkgc}

Grup ID: ${groupMetadata.id}`;
      let coo = `{\"display_text\":\"COPY ID\",\"id\":\"P\",\"copy_code\":\"${groupMetadata.id}\"}`
      buttoncopy(m.chat, teks, coo, null, m)
    }
    break

    case 'topglobal': {
      const {
        createCanvas,
        loadImage
      } = require('canvas');
      const fs = require('fs');

      if (!m.isGroup) return onlyGrup();

      let ownerIds = JSON.parse(fs.readFileSync('./data/default-db/owner.json', 'utf-8')).map(id => id + '@s.whatsapp.net');
      let levelUsers = Object.keys(db.data.users)
        .filter(id => !ownerIds.includes(id))
        .map(id => ({
          id,
          name: db.data.users[id].nama || id.split("@")[0],
          number: id.split("@")[0],
          level: db.data.users[id].level,
          exp: db.data.users[id].exp,
          saldo: db.data.users[id].saldo,
          limit: db.data.users[id].limit
        }))
        .sort((a, b) => b.level !== a.level ? b.level - a.level : b.exp - a.exp);

      let teks = `*TOP GLOBAL - USERS*\n\n`;
      let arrTop = [];
      let total = Math.min(10, levelUsers.length);
      let top3Profiles = [];

      for (let i = 0; i < total; i++) {
        let userName = levelUsers[i].name;
        let userNumb = levelUsers[i].number;

        teks += `*@${userNumb}*\n`;
        teks += `• Level: ${levelUsers[i].level}\n`;
        teks += `• Exp: ${levelUsers[i].exp}\n`;
        teks += `• Money: ${levelUsers[i].saldo}\n`;
        teks += `• Limit: ${levelUsers[i].limit}\n\n`;

        arrTop.push(levelUsers[i].id);

        if (i < 3) {
          let ppUrl = await Lyrra.profilePictureUrl(levelUsers[i].id, 'image').catch(() => 'https://files.catbox.moe/nwvkbt.png');
          top3Profiles.push({
            username: userName,
            level: levelUsers[i].level,
            exp: levelUsers[i].exp,
            money: levelUsers[i].saldo,
            limit: levelUsers[i].limit,
            ppUrl
          });
        }
      }

      const width = 1600,
        height = 950;
      const canvas = createCanvas(width, height);
      const ctx = canvas.getContext('2d');

      let bg = await loadImage('https://files.catbox.moe/kr9e24.png');
      ctx.drawImage(bg, 0, 0, width, height);

      ctx.fillStyle = '#FFFFFF';
      ctx.font = 'bold 85px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('TOP 3 PENGGUNA TERATAS', width / 2, 180);

      ctx.strokeStyle = '#1E90FF';
      ctx.lineWidth = 6;
      ctx.beginPath();
      ctx.moveTo(250, 220);
      ctx.lineTo(width - 250, 220);
      ctx.stroke();

      let positions = [{
          x: width / 4,
          y: 520
        },
        {
          x: width / 2,
          y: 470
        },
        {
          x: (width / 4) * 3,
          y: 520
        }
      ];

      for (let i = 0; i < top3Profiles.length; i++) {
        let {
          username,
          level,
          exp,
          money,
          limit,
          ppUrl
        } = top3Profiles[i];
        let img = await loadImage(ppUrl);
        let {
          x,
          y
        } = positions[i];

        ctx.save();
        ctx.beginPath();
        ctx.arc(x, y, 120, 0, Math.PI * 2);
        ctx.closePath();
        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
        ctx.fill();
        ctx.restore();

        ctx.save();
        ctx.beginPath();
        ctx.arc(x, y, 110, 0, Math.PI * 2);
        ctx.closePath();
        ctx.fillStyle = '#1E90FF';
        ctx.fill();
        ctx.restore();

        ctx.save();
        ctx.beginPath();
        ctx.arc(x, y, 100, 0, Math.PI * 2);
        ctx.closePath();
        ctx.clip();
        ctx.drawImage(img, x - 100, y - 100, 200, 200);
        ctx.restore();

        ctx.fillStyle = '#FFFFFF';
        ctx.font = 'bold 50px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(username, x, y + 170);

        ctx.font = '32px Arial';
        ctx.fillStyle = '#B0C4DE';
        ctx.fillText(`Level: ${level}`, x, y + 220);
        ctx.fillText(`Exp: ${exp}`, x, y + 260);
        ctx.fillText(`Money: ${money}`, x, y + 300);
        ctx.fillText(`Limit: ${limit}`, x, y + 340);
      }

      let buffer = canvas.toBuffer();

      const button = [{
        "name": "quick_reply",
        "buttonParamsJson": `{\"display_text\":\"Top Local\",\"id\":\`${_p}toplocal\`}`
      }];

      await Lyrra.sendButtonImage(m.chat, null, teks, buffer, button, null, m);
    }
    break

    case 'toplocal': {
      if (!m.isGroup) return onlyGrup();

      let anggroup = groupMembers.map(a => a.id);
      let ownerIds = JSON.parse(fs.readFileSync('./data/default-db/owner.json', 'utf-8')).map(id => id + '@s.whatsapp.net');
      let levelUsers = Object.keys(db.data.users)
        .filter(id => !ownerIds.includes(id))
        .map(id => ({
          id,
          level: db.data.users[id].level,
          exp: db.data.users[id].exp
        }))
        .filter(user => anggroup.includes(user.id))
        .sort((a, b) => b.level !== a.level ? b.level - a.level : b.exp - a.exp);

      let top = '*── 「 TOP LOCAL - LEVEL 」 ──*\n\n';
      let arrTop = [];
      let total = Math.min(10, levelUsers.length);

      for (let i = 0; i < total; i++) {
        let {
          rank,
          rankid
        } = await ranke(levelUsers[i].id);
        let lev = db.data.users[levelUsers[i].id].level;
        let userName = levelUsers[i].id.split("@")[0];
        let moneyblc = db.data.users[levelUsers[i].id].saldo;
        let limitusr = db.data.users[levelUsers[i].id].limit;

        top += `${i + 1}. @${userName}\n`;
        top += ` ⏣ • Rank: ${rank} ${rankid}\n`;
        top += ` ⏣ • Level: ${lev}\n`;
        top += ` ⏣ • Exp: ${db.data.users[levelUsers[i].id].exp}\n`;
        top += ` ⏣ • Money: ${moneyblc}\n`;
        top += ` ⏣ • Limit: ${limitusr}\n\n`;

        arrTop.push(levelUsers[i].id);
      }

      mentions(top, arrTop, true);
    }
    break

case 'kickallmemb':  
case 'kickallmember':  
case 'allkick':  
case 'kickall': {  
  try {
    if (!isOwner) return onlyOwn()  
    let gcownMeta = await Lyrra.groupMetadata(m.chat)  
    const users = gcownMeta.participants.map(u => u.id).filter(v => v !== Lyrra.user.jid)  
    await Lyrra.groupParticipantsUpdate(m.chat, users, 'remove')  
    await m.reply('Berhasil Kick Semua Member...')  
  } catch {
    await m.reply('Terjadi kesalahan: ID group tidak valid, bot tidak bergabung ke group, atau bot tidak menjadi admin group.')
  }
}  
break

    case 'outgc':
    case 'gcout':
    case 'botgcout':
    case 'leavegc': {
      try {
        if (!isOwner) return onlyOwn()
        await Lyrra.groupLeave(m.chat)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'q':
    case 'quoted': {
      if (!m.quoted) return m.reply('Kutip pesan seseorang!')
      let quo = await Lyrra.serializeM(await m.getQuotedObj())
      if (!quo.quoted) return m.reply('Pesan yang kamu reply tidak dikirim oleh bot!')
      await quo.quoted.copyNForward(m.chat, true)
    }
    break

    case 'antibot': {
      if (!isOwner && !isAdmins) return onlyOa()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].antibot) return m.reply(`Sudah aktif sebelumnya`)
        db.data.chats[m.chat].antibot = true
        m.reply('Sukses mengaktifkan antibot!')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].antibot) return m.reply(`Sudah nonaktif sebelumnya`)
        db.data.chats[m.chat].antibot = false
        m.reply('Sukses menonaktifkan antibot!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    case 'antivideo': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === "on") {
        if (db.data.chats[m.chat].antivideo) return m.reply(`Udah aktif sebelumnya`)
        db.data.chats[m.chat].antivideo = true
        m.reply('Successfully Activate Anti Video In This Group')
      } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antivideo) return m.reply(`Udah nonaktif sebelumnya`)
        db.data.chats[m.chat].antivideo = false
        m.reply('Successfully Disabling Anti Video In This Group')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    case 'antivirtex': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === "on") {
        if (db.data.chats[m.chat].antivirtex) return m.reply(`Udah aktif sebelumnya`)
        db.data.chats[m.chat].antivirtex = true
        m.reply('Successfully Activate Antivirtex In This Group')
      } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antivirtex) return m.reply(`Udah nonaktif sebelumnya`)
        db.data.chats[m.chat].antivirtex = false
        m.reply('Successfully Disabling Antivirtex In This Group')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    case 'antidocument': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === "on") {
        if (db.data.chats[m.chat].antidocument) return m.reply(`Udah aktif sebelumnya`)
        db.data.chats[m.chat].antidocument = true
        m.reply('Successfully Activate Anti Document In This Group')
      } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antidocument) return m.reply(`Udah nonaktif sebelumnya`)
        db.data.chats[m.chat].antidocument = false
        m.reply('Successfully Disabling Anti Document In This Group')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    case 'antiaudio': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === "on") {
        if (db.data.chats[m.chat].antiaudio) return m.reply(`Udah aktif sebelumnya`)
        db.data.chats[m.chat].antiaudio = true
        m.reply('Successfully Activate Anti Audio In This Group')
      } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antiaudio) return m.reply(`Udah nonaktif sebelumnya`)
        db.data.chats[m.chat].antiaudio = false
        m.reply('Successfully Disabling Anti Audio In This Group')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    case 'antipromosi': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === "on") {
        if (db.data.chats[m.chat].antipromosi) return m.reply(`Udah aktif sebelumnya`)
        db.data.chats[m.chat].antipromosi = true
        m.reply('Successfully Activate Anti Promosi In This Group')
      } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antipromosi) return m.reply(`Udah nonaktif sebelumnya`)
        db.data.chats[m.chat].antipromosi = false
        m.reply('Successfully Disabling Anti Promosi In This Group')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    case 'antiimage': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === "on") {
        if (db.data.chats[m.chat].antiimage) return m.reply(`Udah aktif sebelumnya`)
        db.data.chats[m.chat].antiimage = true
        m.reply('Successfully Activate Anti Image In This Group')
      } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antiimage) return m.reply(`Udah nonaktif sebelumnya`)
        db.data.chats[m.chat].antiimage = false
        m.reply('Successfully Disabling Anti Image In This Group')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    case 'antiswtag':
    case 'antitagsw': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === "on") {
        if (db.data.chats[m.chat].antitagsw) return m.reply(`Udah aktif sebelumnya`)
        db.data.chats[m.chat].antitagsw = true
        m.reply('Successfully Activate Anti Status Mentions In This Group')
      } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antitagsw) return m.reply(`Udah nonaktif sebelumnya`)
        db.data.chats[m.chat].antitagsw = false
        m.reply('Successfully Disabling Anti Status Mentions In This Group')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'antitagsw2': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === "on") {
        if (db.data.chats[m.chat].antitagsw2) return m.reply(`Udah aktif sebelumnya`)
        db.data.chats[m.chat].antitagsw2 = true
        m.reply('Successfully Activate Anti Status Mentions v2 In This Group')
      } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antitagsw2) return m.reply(`Udah nonaktif sebelumnya`)
        db.data.chats[m.chat].antitagsw2 = false
        m.reply('Successfully Disabling Anti Status Mentions v2 In This Group')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'antisticker': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === "on") {
        if (db.data.chats[m.chat].antisticker) return m.reply(`Udah aktif sebelumnya`)
        db.data.chats[m.chat].antisticker = true
        m.reply('Successfully Activate Anti Sticker In This Group')
      } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antisticker) return m.reply(`Udah nonaktif sebelumnya`)
        db.data.chats[m.chat].antisticker = false
        m.reply('Successfully Disabling Anti Sticker In This Group')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    
    case 'antimessage':
    case 'antipesan': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === "on") {
        if (db.data.chats[m.chat].antipesan) return m.reply(`Udah aktif sebelumnya`)
        db.data.chats[m.chat].antipesan = true
        m.reply('Successfully Activate Anti Message In This Group')
      } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antipesan) return m.reply(`Udah nonaktif sebelumnya`)
        db.data.chats[m.chat].antipesan = false
        m.reply('Successfully Disabling Anti MessageIn In This Group')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break
    
    case 'antilink': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].antilink) return m.reply(`Sudah aktif sebelumnya`)
        db.data.chats[m.chat].antilink = true
        m.reply('Sukses mengaktifkan antilink!')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].antilink) return m.reply(`Sudah nonaktifkan sebelumnya`)
        db.data.chats[m.chat].antilink = false
        m.reply('Sukses menonaktifkan antilink!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'antilinkgrup':
    case 'antilinkgroup':
    case 'antilinkgc': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].antilinkgc) return m.reply(`Sudah aktif sebelumnya`)
        db.data.chats[m.chat].antilinkgc = true
        m.reply('Sukses mengaktifkan antilinkgc!')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].antilinkgc) return m.reply(`Sudah nonaktifkan sebelumnya`)
        db.data.chats[m.chat].antilinkgc = false
        m.reply('Sukses menonaktifkan antilinkgc!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'antilinkgrup2':
    case 'antilinkgroup2':
    case 'antilinkgc2': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].antilinkgc2) return m.reply(`Sudah aktif sebelumnya`)
        db.data.chats[m.chat].antilinkgc2 = true
        m.reply('Sukses mengaktifkan antilinkgc2!')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].antilinkgc2) return m.reply(`Sudah nonaktifkan sebelumnya`)
        db.data.chats[m.chat].antilinkgc2 = false
        m.reply('Sukses menonaktifkan antilinkgc2!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'antilinksaluran':
    case 'antilinkchannel':
    case 'antilinkch': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].antilinkch) return m.reply(`Sudah aktif sebelumnya`)
        db.data.chats[m.chat].antilinkch = true
        m.reply('Sukses mengaktifkan antilinkch!')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].antilinkch) return m.reply(`Sudah nonaktifkan sebelumnya`)
        db.data.chats[m.chat].antilinkch = false
        m.reply('Sukses menonaktifkan antilinkch!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'antilinksaluran2':
    case 'antilinkchannel2':
    case 'antilinkch2': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].antilinkch2) return m.reply(`Sudah aktif sebelumnya`)
        db.data.chats[m.chat].antilinkch2 = true
        m.reply('Sukses mengaktifkan antilinkch2!')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].antilinkch2) return m.reply(`Sudah nonaktifkan sebelumnya`)
        db.data.chats[m.chat].antilinkch2 = false
        m.reply('Sukses menonaktifkan antilinkch2!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'antitoxic': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].antitoxic) return m.reply(`Sudah aktif sebelumnya`)
        db.data.chats[m.chat].antitoxic = true
        m.reply('Sukses mengaktifkan antitoxic!')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].antitoxic) return m.reply(`Sudah nonaktifkan sebelumnya`)
        db.data.chats[m.chat].antitoxic = false
        m.reply('Sukses menonaktifkan antitoxic!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'h':
    case 'hidetag': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyOa()
      if (m.quoted) {
        await Lyrra.sendMessage(m.chat, {
          forward: m.quoted.fakeObj,
          mentions: participants.map(a => a.id)
        })
      }
      if (!m.quoted) {
        await Lyrra.sendMessage(m.chat, {
          text: q ? q : '',
          mentions: participants.map(a => a.id)
        }, {
          quoted: ftext
        })
      }
    }
    break

    case 'tagall': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyOa()
      if (!isBotAdmins) return onlyBotAdmin()
      let teks = `*👥 Tag All By Admin*

@${m.chat}
 
Pesan: ${q ? q : 'Tidak ada'}`
      Lyrra.sendMessage(m.chat, {
        text: teks,
        contextInfo: {
          mentionedJid: participants.map(a => a.id),
          groupMentions: [{
            groupJid: m.chat,
            groupSubject: "everyone"
          }]
        }
      }, {
        quoted: m
      })
    }
    break

    case 'totag': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyOa()
      if (!isBotAdmins) return onlyBotAdmin()
      if (!m.quoted) return m.reply(`Kutip pesan dengan caption ${p_c}`)
      await Lyrra.sendMessage(m.chat, {
        forward: m.quoted.fakeObj,
        mentions: participants.map(a => a.id)
      })
    }
    break

    case 'delete':
    case 'd':
    case 'del': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyOa()
      if (!isBotAdmins) return onlyBotAdmin()
      if (!m.quoted) return m.reply('Kutip pesan yang ingin dihapus!')
      let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
      await Lyrra.sendMessage(m.chat, {
        delete: {
          remoteJid: m.chat,
          id: m.quoted.id,
          participant: m.quoted.sender
        }
      })
    }
    break
    
    case 'bangc':
    case 'bangroup':
    case 'bannedgc':
    case 'bannedgroup': {
    if (!m.isGroup) return onlyGrup()
    if (!isOwner) return onlyOwn()
    if (db.data.chats[m.chat].gcbanned) return m.reply('Group sudah di banned sebelumnya')
    db.data.chats[m.chat].gcbanned = true
    m.reply('Sukses Banned Group!!')
    }
    break
    
    case 'unbangc':
    case 'unbangroup':
    case 'unbannedgc':
    case 'unbannedgroup': {
    if (!m.isGroup) return onlyGrup()
    if (!isOwner) return onlyOwn()
    if (!db.data.chats[m.chat].gcbanned) return m.reply('Group tidak dibanned sebelumnya')
    db.data.chats[m.chat].gcbanned = false
    m.reply('Sukses Unbanned Group!!')
    }
    break

    case 'gcmute':
    case 'mutegc':
    case 'mute': {
      if (!isOwner && !isAdmins) return onlyOa()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].mute) return m.reply('Sudah aktif sebelumnya')
        db.data.chats[m.chat].mute = true
        await m.reply('Sukses mute untuk grup ini.')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].mute) return m.reply('Sudah nonaktif sebelumnya')
        db.data.chats[m.chat].mute = false
        await m.reply('Sukses unmute untuk grup ini.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'afk': {
      if (!m.isGroup) return onlyGrup()
      if (m.key.fromMe) return m.reply('Bot tidak dapat AFK')
      if (isAfkOn) return m.reply('AFK sudah diaktifkan sebelumnya')
      let reason = text ? text : 'Tidak ada.'
      afk.addAfkUser(m.sender, Date.now(), reason, _afk)
      Lyrra.sendTextWithMentions(m.chat, `@${m.sender.split('@')[0]} sedang AFK\nAlasan: ${reason}`, m)
    }
    break

    case 'listonline':
    case 'liston': {
      if (!isOwner) return onlyOwn()
      const storeFilePath = './session/store.json'
      let storeData
      try {
        storeData = JSON.parse(fs.readFileSync(storeFilePath, 'utf-8'))
      } catch (error) {
        return m.reply('Gagal baca store.json, coba lagi nanti ya', m)
      }
      let id = args && /\d+\-\d+@g.us/.test(args[0]) ? args[0] : m.chat
      const online = storeData.presences && storeData.presences[id] ? Object.keys(storeData.presences) : []
      if (online.length === 0) {
        return m.reply('Saat ini tidak ada sesi online', m)
      }
      let teks = 'List Online:\n' + online.map(v => '• @' + v.replace(/@.+/, '')).join('\n')
      Lyrra.sendTeks(m.chat, teks, m, {
        mentions: online
      })
    }
    break

    case 'welcome': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins && !isOwner) return onlyOa()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].wlcm) return m.reply('Sudah diaktifkan sebelumnya')
        db.data.chats[m.chat].wlcm = true
        await m.reply('Sukses mengaktifkan autowelcome.')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].wlcm) return m.reply('Sudah di nonaktifkan sebelumnya')
        db.data.chats[m.chat].wlcm = false
        await m.reply('Sukses menonaktifkan autowelcome.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'goodbye': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins && !isOwner) return onlyOa()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].left) return m.reply('Sudah diaktifkan sebelumnya')
        db.data.chats[m.chat].left = true
        await m.reply('Sukses mengaktifkan goodbye.')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].left) return m.reply('Sudah dinonaktifkan sebelumnya')
        db.data.chats[m.chat].left = false
        await m.reply('Sukses menonaktifkan goodbye.')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'setwelcome': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins && !isOwner) return onlyOa()
      if (args.length < 1) return m.reply(`Contoh: ${p_c} <teks>\n\nFormat:\n@user - Tag user baru\n@group - Nama grup\n@desc - Deskripsi grup`);
      let teksnye = text ? text : ""
      await updateTextWelcome(m, teksnye)
      m.reply("Teks welcome berhasil diubah!");
    }
    break

    case 'setgoodbye': {
      if (!m.isGroup) return onlyGrup()
      if (!isAdmins && !isOwner) return onlyOa()
      if (args.length < 1) return m.reply(`Contoh: ${p_c} <teks>\n\nFormat:\n@user - Tag user baru\n@group - Nama grup\n@desc - Deskripsi grup`);
      let teksnye = text ? text : ""
      await updateTextLeft(m, teksnye)
      m.reply("Teks left berhasil diubah!");
    }
    break
    case 'readmore': {
      if (!text.split('|')[0]) return m.reply('Penggunaan : teks1|teks2')
      let teksAtas = text.split('|')[0] || ''
      let teksBawah = text.split('|')[1] || ''
      m.reply(`${teksAtas}` + readmore + `${teksBawah}`)
    }
    break
    // === Games Menu
    case 'utangga': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit gane kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      let {
        message,
        idGame
      } = mulaiGame(m.sender)
      let yao = `{\"display_text\":\"Gabung\",\"id\":\"${_p}join2 ${idGame}\"}`
      quickreply1(m.chat, message, yao, null, m)
      break
    }

    case 'join2': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      let idGame = args[0]
      let hasil = joinGame(idGame, m.sender)
      m.reply(hasil)
      break
    }

    case 'lempar': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      let hasil = mainGameAuto(m.sender)
      m.reply(hasil)
      break
    }

    case 'delutg': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      let hasil = hapusGameAuto(m.sender)
      m.reply(hasil)
      break
    }

    case 'family100':
    case 'f100': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      const response = await axios.get(`https://raw.githubusercontent.com/Leoo7z/Games/main/${command}.json`);
      const data = response.data;
      var {
        soal,
        jawaban
      } = pickRandom(data);
      console.log('Jawaban: ' + jawaban)
      let famil = []
      for (let i of jawaban) {
        let fefsh = i.split('/') ? i.split('/')[0] : i
        let iuhbs = fefsh.startsWith(' ') ? fefsh.replace(' ', '') : fefsh
        let axsfh = iuhbs.endsWith(' ') ? iuhbs.replace(iuhbs.slice(-1), '') : iuhbs
        famil.push(axsfh.toLowerCase())
      }
      await m.reply(`*GAME FAMILY 100*\n\nSoal: ${soal}\nTotal jawaban: ${jawaban.length}\n\nWaktu: ${gamewaktu} milidetik`)
      datareadcek.family100[from] = {
        soal: soal,
        jawaban: famil,
        hadiah: randomNomor(10, 20),
        waktu: setTimeout(async function () {
          let jwb = datareadcek.family100[from].jawaban
          if (from in datareadcek.family100) {
            let teks = `*WAKTU HABIS!*\nJawaban yang belum terjawab:\n`
            for (let i of jwb) {
              teks += `\n${i}`
            }
            m.reply(teks)
            delete datareadcek.family100[from];
          }
        }, gamewaktu)
      }
    }
    break

    case 'suit':
    case 'suitpvp': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (!m.isGroup) return onlyGrup()
      if (Object.values(datareadcek.suit).find(roof => roof.id.startsWith('suit') && [roof.p, roof.p2].includes(m.sender))) return m.reply(`Selesaikan suit mu yang sebelumnya!`)
      gue = `0@s.whatsapp.net`
      if (!froms) return m.reply(`Siapa yang ingin kamu tantang?\n\nContoh: ${p_c} @${gue.split('@')[0]}`)
      if (froms === botNumber) return m.reply(`Tidak bisa bermain dengan bot!`)
      if (Object.values(datareadcek.suit).find(roof => roof.id.startsWith('suit') && [roof.p, roof.p2].includes(froms))) return m.reply(`Orang nya lagi main sama yang lain!`)
      var hadiah = randomNomor(10, 20)
      let poin = 10
      let poin_lose = 10
      let timeout = 60000
      let id = 'suit_' + new Date() * 1
      datareadcek.suit[id] = {
        chat: await Lyrra.sendTeks(from, `@${m.sender.split('@')[0]} menantang @${froms.split('@')[0]} untuk bermain suit\n\nKirim *gas/gak* untuk bermain`, m),
        id: id,
        p: m.sender,
        p2: froms,
        status: 'Wait',
        hadiah: hadiah,
        waktu: setTimeout(() => {
          if (datareadcek.suit[id]) Lyrra.sendMessage(from, {
            text: `Waktu suit habis!`
          }, {
            quoted: m
          })
          delete datareadcek.suit[id]
        }, 60000),
        poin,
        poin_lose,
        timeout
      }
    }
    break

    case 'ttt':
    case 'ttc':
    case 'tictactoe': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (!m.isGroup) return onlyGrup()
      let TicTacToe = require("./lib-signal/games/tictactoe")
      this.game = this.game ? this.game : {}
      if (Object.values(this.game).find(room => room.id.startsWith('tictactoe') && [room.game.playerX, room.game.playerO].includes(m.sender))) return m.reply('Kamu masih didalam game!')
      let room = Object.values(this.game).find(room => room.state === 'WAITING' && (text ? room.name === text : true))
      if (room) {
        m.reply('Lawan bermain ditemukan!')
        room.o = m.chat
        room.game.playerO = m.sender
        room.state = 'PLAYING'
        let arr = room.game.render().map(v => {
          return {
            X: '❌',
            O: '⭕',
            1: '1️⃣',
            2: '2️⃣',
            3: '3️⃣',
            4: '4️⃣',
            5: '5️⃣',
            6: '6️⃣',
            7: '7️⃣',
            8: '8️⃣',
            9: '9️⃣',
          } [v]
        })
        let str = `Room ID: ${room.id}

${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

Menunggu @${room.game.currentTurn.split('@')[0]}

Ketik .nyerah untuk menyerah`
        if (room.x !== room.o) await Lyrra.sendText(room.x, str, m, {
          mentions: parseMention(str)
        })
        await Lyrra.sendText(room.o, str, m, {
          mentions: parseMention(str)
        })
      } else {
        room = {
          id: 'tictactoe-' + (+new Date),
          x: m.chat,
          o: '',
          game: new TicTacToe(m.sender, 'o'),
          state: 'WAITING'
        }
        if (text) room.name = text
        m.reply('Menunggu lawan bermain' + (text ? ` mengetik command dibawah ini ${p_c} ${text}` : ''))
        this.game[room.id] = room
      }
    }
    break

    case 'delttt':
    case 'delttc':
    case 'deltictactoe': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      let roomnya = Object.values(this.game).find(room => room.id.startsWith('tictactoe') && [room.game.playerX, room.game.playerO].includes(m.sender))
      if (!roomnya) return m.reply(`Kamu sedang tidak bermain tictactoe!`)
      delete this.game[roomnya.id]
      m.reply(`Game tictactoe telah diakhiri!`)
    }
    break

    case 'tebakbom':
    case 'petakbom': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (datareadcek.petakbom[m.sender]) return m.reply(`Sesi game mu belum terselesaikan, lanjutkan:\n\n${datareadcek.petakbom[sender].board.join("")}\n\nKetik ${_p}delpetakbom untuk menghapus sesi game`);

      function shuffle(array) {
        return array.sort(() => Math.random() - 0.5);
      }
      datareadcek.petakbom[m.sender] = {
        petak: shuffle([0, 0, 0, 2, 0, 2, 0, 2, 0]),
        board: ["1️⃣", "2️⃣", "3️⃣", "4️⃣", "5️⃣", "6️⃣", "7️⃣", "8️⃣", "9️⃣"],
        bomb: 3,
        lolos: 6,
        pick: 0,
        hadiah: randomNomor(5000, 10000),
        nyawa: ["❤️", "❤️", "❤️"]
      };
      await m.reply(`*PETAK BOM*

${datareadcek.petakbom[m.sender].board.slice(0, 3).join("")}
${datareadcek.petakbom[m.sender].board.slice(3, 6).join("")}
${datareadcek.petakbom[m.sender].board.slice(6).join("")}

Pillih angka diatas tetapi berhati-hati
lah, karena ada bom!

Bomb: ${datareadcek.petakbom[m.sender].bomb}
Nyawa: ${datareadcek.petakbom[m.sender].nyawa.join("")}`);
    }
    break

    case 'delpetakbom': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (!(m.sender in datareadcek.petakbom)) return m.reply(`Kamu sedang tidak bermain petakbom!`)
      delete datareadcek.petakbom[m.sender];
      m.reply(`Game petakbom telah diakhiri!`)
    }
    break

    case 'casino': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (!m.isGroup) return onlyGrup()
      if (!text) return m.reply(`Contoh: ${p_c} @tag nominal`)
      let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
      if (!m.mentionedJid[0] && !m.quoted && !text) return m.reply(`Tag/kutip pesan seseorang!`)
      if (fs.existsSync(`./data/${m.chat}.json`)) return m.reply(`Masih ada sesi sebelumnya\nKetik ${_p}delcasino untuk menghapus sesi`)
      if (!args[1]) return m.reply('Masukkan nominal nya!')
      if (args[1].includes('-')) return m.reply(`Jangan menggunakan -`)
      if (isNaN(parseInt(args[1]))) return m.reply('Nominal harus herupa angka!')
      var anu = cekSaldo(m.sender)
      var ani = cekSaldo(m.mentionedJid[0])
      if (anu < args[1] || anu == 'undefined') return m.reply(`Saldo tidak mencukupi, kumpulkan terlebih dahulu\nKetik ${_p}saldo untuk mengecek saldo mu`)
      if (ani < args[1] || ani == 'undefined') return m.reply(`Saldo lawan tidak mencukupi untuk bermain dengan mu`)
      var casinoo = setCasino(`${m.chat}`)
      casinoo.Z = m.sender.replace("@s.whatsapp.net", "")
      casinoo.Y = users
      casinoo.nominal = parseInt(args[1])
      fs.writeFileSync(`./data/${m.chat}.json`, JSON.stringify(casinoo, null, 2))
      var starGame = `*🎰 GAME CASINO 💰*\n\n• @${m.sender.replace("@s.whatsapp.net", "")}\nMenantang \n• ${args[0]}\n\nDengan nominal: Rp ${parseInt(args[1])}\nSilahkan tunggu ${args[0]} memilih Y/N`
      buton = `{\"display_text\":\"TERIMA\",\"id\":\"Y\"}`
      butoff = `{\"display_text\":\"TOLAK\",\"id\":\"N\"}`
      let msg = generateWAMessageFromContent(from, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              body: proto.Message.InteractiveMessage.Body.create({
                text: starGame
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: `${wm}`
              }),
              header: proto.Message.InteractiveMessage.Header.create({
                title: '',
                gifPlayback: true,
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  text: '-'
                }],
              }),
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999,
                isForwarded: false,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: chjid + '@newsletter',
                  newsletterName: `${wm}`,
                  serverMessageId: 145
                }
              }
            })
          }
        }
      }, {
        quoted: m
      })
      await Lyrra.relayMessage(m.chat, msg.message, {
        messageId: msg.key.id
      })
    }
    break

    case 'delcasino': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (fs.existsSync('./data/' + m.chat + '.json')) {
        var csn = JSON.parse(fs.readFileSync('./data/' + m.chat + '.json'))
        if (csn.Z.includes(m.sender)) {
          deleteCasino(m.chat)
          m.reply('Game casino telah diakhiri!')
        } else if (csn.Y.includes(m.sender)) {
          deleteCasino(m.chat)
          m.reply('Game casino telah diakhiri!')
        } else if (isOwner) {
          deleteCasino(m.chat)
          m.reply('Game casino telah diakhiri!')
        } else {
          m.reply('Hanya untuk pemain!')
        }
      } else {
        m.reply('Kamu sedang tidak bermain casino!')
      }
    }
    break

    case 'wwpc':
    case 'ww':
    case 'werewolf': {
      let {
        emoji_role,
        sesi,
        playerOnGame,
        playerOnRoom,
        playerExit,
        dataPlayer,
        dataPlayerById,
        getPlayerById,
        getPlayerById2,
        killWerewolf,
        killww,
        dreamySeer,
        sorcerer,
        protectGuardian,
        roleShuffle,
        roleChanger,
        roleAmount,
        roleGenerator,
        addTimer,
        startGame,
        playerHidup,
        playerMati,
        vote,
        voteResult,
        clearAllVote,
        getWinner,
        win,
        pagi,
        malam,
        skill,
        voteStart,
        voteDone,
        voting,
        run,
        run_vote,
        run_malam,
        runprefixagi
      } = require('./lib-signal/games/werewolf')
      let thumb = "https://user-images.githubusercontent.com/72728486/235316834-f9f84ba0-8df3-4444-81d8-db5270995e6d.jpg";
      const {
        sender,
        chat
      } = m;
      Lyrra.werewolf = Lyrra.werewolf ? Lyrra.werewolf : {};
      const ww = Lyrra.werewolf ? Lyrra.werewolf : {};
      const data = ww[chat];
      const value = args[0];
      const target = args[1];
      let byId = getPlayerById2(sender, parseInt(target), ww);
      if (value === "create") {
        if (!m.isGroup) return onlyGrup()
        if (chat in ww) return m.reply("Group masih dalam sesi permainan");
        if (playerOnGame(sender, ww) === true) return m.reply("Kamu masih dalam sesi game");
        ww[chat] = {
          room: chat,
          owner: sender,
          status: false,
          iswin: null,
          cooldown: null,
          day: 0,
          time: "malem",
          player: [],
          dead: [],
          voting: false,
          seer: false,
          guardian: [],
        };
        await m.reply("Room berhasil dibuat, ketik *.ww join* untuk bergabung");
      } else if (value === "join") {
        if (!m.isGroup) return onlyGrup()
        if (!ww[chat]) return m.reply("Belum ada sesi permainan");
        if (ww[chat].status === true) return m.reply("Sesi permainan sudah dimulai");
        if (ww[chat].player.length > 16) return m.reply("Maaf jumlah player telah penuh");
        if (playerOnRoom(sender, chat, ww) === true) return m.reply("Kamu sudah join dalam room ini");
        if (playerOnGame(sender, ww) === true) return m.reply("Kamu masih dalam sesi game");
        let data = {
          id: sender,
          number: ww[chat].player.length + 1,
          sesi: chat,
          status: false,
          role: false,
          effect: [],
          vote: 0,
          isdead: false,
          isvote: false,
        };
        ww[chat].player.push(data);
        let player = [];
        let text = `\n*⌂ W E R E W O L F - P L A Y E R*\n\n`;
        for (let i = 0; i < ww[chat].player.length; i++) {
          text += `${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace("@s.whatsapp.net", "")}\n`;
          player.push(ww[chat].player[i].id);
        }
        text += "\nJumlah player minimal adalah 5 dan maximal 15";
        Lyrra.sendMessage(m.chat, {
          text: text.trim(),
          contextInfo: {
            externalAdReply: {
              title: "W E R E W O L F",
              mediaType: 1,
              renderLargerThumbnail: true,
              thumbnail: await resize(thumb, 300, 175),
              sourceUrl: "",
              mediaUrl: thumb,
            },
            mentionedJid: player,
          },
        }, {
          quoted: m
        });
      } else if (value === "start") {
        if (!m.isGroup) return onlyGrup()
        if (!ww[chat]) return m.reply("Belum ada sesi permainan");
        if (ww[chat].player.length === 0) return m.reply("Room belum memiliki player");
        if (ww[chat].player.length < 5) return m.reply("Maaf jumlah player belum memenuhi syarat");
        if (playerOnRoom(sender, chat, ww) === false) return m.reply("Kamu belum join dalam room ini");
        if (ww[chat].cooldown > 0) {
          if (ww[chat].time === "voting") {
            clearAllVote(chat, ww);
            addTimer(chat, ww);
            return await run_vote(Lyrra, chat, ww);
          } else if (ww[chat].time === "malem") {
            clearAllVote(chat, ww);
            addTimer(chat, ww);
            return await run_malam(Lyrra, chat, ww);
          } else if (ww[chat].time === "pagi") {
            clearAllVote(chat, ww);
            addTimer(chat, ww);
            return await runprefixagi(Lyrra, chat, ww);
          }
        }
        if (ww[chat].status === true) return m.reply("Sesi permainan telah dimulai");
        if (ww[chat].owner !== sender) return m.reply(`Hanya @${ww[chat].owner.split("@")[0]} yang dapat memulai permainan`);
        let list1 = "";
        let list2 = "";
        let player = [];
        roleGenerator(chat, ww);
        addTimer(chat, ww);
        startGame(chat, ww);
        for (let i = 0; i < ww[chat].player.length; i++) {
          list1 += `(${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace("@s.whatsapp.net", "")}\n`;
          player.push(ww[chat].player[i].id);
        }
        for (let i = 0; i < ww[chat].player.length; i++) {
          list2 += `(${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace("@s.whatsapp.net", "")} ${ww[chat].player[i].role === "werewolf" || ww[chat].player[i].role === "sorcerer" ? `[${ww[chat].player[i].role}]` : ""}\n`;
          player.push(ww[chat].player[i].id);
        }
        for (let i = 0; i < ww[chat].player.length; i++) {
          if (ww[chat].player[i].role === "werewolf") {
            if (ww[chat].player[i].isdead != true) {
              var textt = `Hai ${Lyrra.getName(ww[chat].player[i].id)}, Kamu telah dipilih untuk memerankan *Werewolf* ${emoji_role("werewolf")} pada permainan kali ini, silahkan pilih salah satu player yang ingin kamu makan pada malam hari ini\n*LIST PLAYER*:\n${list2}\n\nKetik *.wwpc kill nomor* untuk membunuh player`;
              await Lyrra.sendMessage(ww[chat].player[i].id, {
                text: textt,
                mentions: player,
              });
            }
          } else if (ww[chat].player[i].role === "warga") {
            if (ww[chat].player[i].isdead != true) {
              let texttt = `*⌂ W E R E W O L F - G A M E*\n\nHai ${Lyrra.getName(ww[chat].player[i].id)} Peran kamu adalah *Warga Desa* ${emoji_role("warga")}, tetap waspada, mungkin *Werewolf* akan memakanmu malam ini, silakan masuk kerumah masing masing.\n*LIST PLAYER*:\n${list1}`;
              await Lyrra.sendMessage(ww[chat].player[i].id, {
                text: texttt,
                mentions: player,
              });
            }
          } else if (ww[chat].player[i].role === "seer") {
            if (ww[chat].player[i].isdead != true) {
              let texxt = `Hai ${Lyrra.getName(ww[chat].player[i].id)} Kamu telah terpilih untuk menjadi *Penerawang* ${emoji_role("seer")}. Dengan sihir yang kamu punya, kamu bisa mengetahui peran pemain pilihanmu.\n*LIST PLAYER*:\n${list1}\n\nKetik *.wwpc dreamy nomor* untuk melihat role player`;
              await Lyrra.sendMessage(ww[chat].player[i].id, {
                text: texxt,
                mentions: player,
              });
            }
          } else if (ww[chat].player[i].role === "guardian") {
            if (ww[chat].player[i].isdead != true) {
              let teext = `Hai ${Lyrra.getName(ww[chat].player[i].id)} Kamu terpilih untuk memerankan *Malaikat Pelindung* ${emoji_role("guardian")}, dengan kekuatan yang kamu miliki, kamu bisa melindungi para warga, silahkan pilih salah 1 player yang ingin kamu lindungi\n*LIST PLAYER*:\n${list1}\n\nKetik *.wwpc deff nomor* untuk melindungi player`;
              await Lyrra.sendMessage(ww[chat].player[i].id, {
                text: teext,
                mentions: player,
              });
            }
          } else if (ww[chat].player[i].role === "sorcerer") {
            if (ww[chat].player[i].isdead != true) {
              let textu = `Hai ${Lyrra.getName(ww[chat].player[i].id)} Kamu terpilih sebagai Penyihir ${emoji_role("sorcerer")}, dengan kekuasaan yang kamu punya, kamu bisa membuka identitas para player, silakan pilih 1 orang yang ingin kamu buka identitasnya\n*LIST PLAYER*:\n${list2}\n\nKetik *.wwpc sorcerer nomor* untuk melihat role player`;
              await Lyrra.sendMessage(ww[chat].player[i].id, {
                text: textu,
                mentions: player,
              });
            }
          }
        }
        await Lyrra.sendMessage(m.chat, {
          text: "*⌂ W E R E W O L F - G A M E*\n\nGame telah dimulai, para player akan memerankan perannya masing masing, silahkan cek chat pribadi untuk melihat role kalian. Berhati-hatilah para warga, mungkin malam ini adalah malah terakhir untukmu",
          contextInfo: {
            externalAdReply: {
              title: "W E R E W O L F",
              mediaType: 1,
              renderLargerThumbnail: true,
              thumbnail: await resize(thumb, 300, 175),
              sourceUrl: "",
              mediaUrl: thumb,
            },
            mentionedJid: player,
          },
        });
        await run(Lyrra, chat, ww);
      } else if (value === "kill") {
        let byId = getPlayerById2(sender, parseInt(target), ww);
        if (dataPlayer(sender, ww).role !== "werewolf") return m.reply("Peran ini bukan untuk kamu");
        if (byId.db.role === "sorcerer") return m.reply("Tidak bisa menggunakan skill untuk teman");
        if (playerOnGame(sender, ww) === false) return m.reply("Kamu tidak dalam sesi game")
        if (dataPlayer(sender, ww).status === true) return m.reply("Skill telah digunakan, skill hanya bisa digunakan sekali setiap malam")
        if (dataPlayer(sender, ww).isdead === true) return m.reply("Kamu sudah mati")
        if (!target || target.length < 1 || target.split('').length > 2) return m.reply(`Masukan nomor player \nContoh : \n${p_c} kill 1`)
        if (isNaN(target)) return m.reply("Gunakan hanya nomor")
        if (byId.db.isdead === true) return m.reply("Player sudah mati")
        if (byId.db.id === sender) return m.reply("Tidak bisa menggunakan skill untuk diri sendiri")
        if (byId === false) return m.reply("Player tidak terdaftar")
        reply("Berhasil membunuh player " + parseInt(target)).then(() => {
          dataPlayer(sender, ww).status = true;
          killWerewolf(sender, parseInt(target), ww);
        });
      } else if (value === "dreamy") {
        if (dataPlayer(sender, ww).role !== "seer") return m.reply("Peran ini bukan untuk kamu");
        if (playerOnGame(sender, ww) === false) return m.reply("Kamu tidak dalam sesi game")
        if (dataPlayer(sender, ww).status === true) return m.reply("Skill telah digunakan, skill hanya bisa digunakan sekali setiap malam")
        if (dataPlayer(sender, ww).isdead === true) return m.reply("Kamu sudah mati")
        if (!target || target.length < 1 || target.split('').length > 2) return m.reply(`Masukan nomor player \nContoh: ${p_c} kill 1`)
        if (isNaN(target)) return m.reply("Gunakan hanya nomor")
        let byId = getPlayerById2(sender, parseInt(target), ww)
        if (byId.db.isdead === true) return m.reply("Player sudah mati")
        if (byId.db.id === sender) return m.reply("Tidak bisa menggunakan skill untuk diri sendiri")
        if (byId === false) return m.reply("Player tidak terdaftar")
        let dreamy = dreamySeer(m.sender, parseInt(target), ww);
        reply(`Berhasil membuka identitas player ${target} adalah ${dreamy}`).then(() => {
          dataPlayer(sender, ww).status = true;
        });
      } else if (value === "deff") {
        if (dataPlayer(sender, ww).role !== "guardian") return m.reply("Peran ini bukan untuk kamu");
        if (playerOnGame(sender, ww) === false) return m.reply("Kamu tidak dalam sesi game")
        if (dataPlayer(sender, ww).status === true) return m.reply("Skill telah digunakan, skill hanya bisa digunakan sekali setiap malam")
        if (dataPlayer(sender, ww).isdead === true) return m.reply("Kamu sudah mati")
        if (!target || target.length < 1 || target.split('').length > 2) return m.reply(`Masukan nomor player \nContoh: ${p_c} kill 1`)
        if (isNaN(target)) return m.reply("Gunakan hanya nomor")
        let byId = getPlayerById2(sender, parseInt(target), ww)
        if (byId.db.isdead === true) return m.reply("Player sudah mati")
        if (byId.db.id === sender) return m.reply("Tidak bisa menggunakan skill untuk diri sendiri")
        if (byId === false) return m.reply("Player tidak terdaftar")
        reply(`Berhasil melindungi player ${target}`).then(() => {
          protectGuardian(m.sender, parseInt(target), ww);
          dataPlayer(sender, ww).status = true;
        });
      } else if (value === "sorcerer") {
        if (dataPlayer(sender, ww).role !== "sorcerer") return m.reply("Peran ini bukan untuk kamu");
        if (playerOnGame(sender, ww) === false) return m.reply("Kamu tidak dalam sesi game")
        if (dataPlayer(sender, ww).status === true) return m.reply("Skill telah digunakan, skill hanya bisa digunakan sekali setiap malam")
        if (dataPlayer(sender, ww).isdead === true) return m.reply("Kamu sudah mati")
        if (!target || target.length < 1 || target.split('').length > 2) return m.reply(`Masukan nomor player \nContoh: ${p_c} kill 1`)
        if (isNaN(target)) return m.reply("Gunakan hanya nomor")
        let byId = getPlayerById2(sender, parseInt(target), ww)
        if (byId.db.isdead === true) return m.reply("Player sudah mati")
        if (byId.db.id === sender) return m.reply("Tidak bisa menggunakan skill untuk diri sendiri")
        if (byId === false) return m.reply("Player tidak terdaftar")
        let sorker = sorcerer(sesi(m.sender), target);
        reply(`Berhasil membuka identitas player ${player} adalah ${sorker}`).then(() => {
          dataPlayer(sender, ww).status = true;
        });
      } else if (value === "vote") {
        if (!m.isGroup) return onlyGrup()
        if (!ww[chat]) return m.reply("Belum ada sesi permainan");
        if (ww[chat].status === false) return m.reply("Sesi permainan belum dimulai");
        if (ww[chat].time !== "voting") return m.reply("Sesi voting belum dimulai");
        if (playerOnRoom(sender, chat, ww) === false) return m.reply("Kamu bukan player");
        if (dataPlayer(sender, ww).isdead === true) return m.reply("Kamu sudah mati");
        if (!target || target.length < 1) return m.reply("Masukan nomor player");
        if (isNaN(target)) return m.reply("Gunakan hanya nomor");
        if (dataPlayer(sender, ww).isvote === true) return m.reply("Kamu sudah melakukan voting");
        b = getPlayerById(chat, sender, parseInt(target), ww);
        if (b.db.isdead === true) return m.reply(`Player ${target} sudah mati.`);
        if (ww[chat].player.length < parseInt(target)) return m.reply("Invalid");
        if (getPlayerById(chat, sender, parseInt(target), ww) === false) return m.reply("Player tidak terdaftar!");
        vote(chat, parseInt(target), sender, ww);
        return m.reply("Vote ✓");
      } else if (value == "exit") {
        if (!m.isGroup) return onlyGrup()
        if (!ww[chat]) return m.reply("Tidak ada sesi permainan");
        if (playerOnRoom(sender, chat, ww) === false) return m.reply("Kamu tidak dalam sesi permainan");
        if (ww[chat].status === true) return m.reply("Permainan sudah dimulai, kamu tidak bisa keluar");
        let exitww = `${sender.split("@")[0]} Keluar dari permainan`
        Lyrra.sendMessage(m.chat, {
          text: exitww,
          contextInfo: {
            externalAdReply: {
              title: "W E R E W O L F",
              mediaType: 1,
              renderLargerThumbnail: true,
              thumbnail: await resize(thumb, 300, 175),
              sourceUrl: "",
              mediaUrl: thumb,
            },
            mentionedJid: sender,
          },
        }, {
          quoted: m
        });
        playerExit(chat, sender, ww);
      } else if (value === "delete") {
        if (!m.isGroup) return onlyGrup()
        if (!ww[chat]) return m.reply("Tidak ada sesi permainan");
        if (ww[chat].owner !== sender) return m.reply(`Hanya @${ww[chat].owner.split("@")[0]} yang dapat menghapus sesi permainan ini`);
        reply("Sesi permainan berhasil dihapus").then(() => {
          delete ww[chat];
        });
      } else if (value === "player") {
        if (!ww[chat]) return m.reply("Tidak ada sesi permainan");
        if (playerOnRoom(sender, chat, ww) === false) return m.reply("Kamu tidak dalam sesi permainan");
        if (ww[chat].player.length === 0) return m.reply("Sesi permainan belum memiliki player");
        let player = [];
        let text = "\n*⌂ W E R E W O L F - G A M E*\n\nLIST PLAYER:\n";
        for (let i = 0; i < ww[chat].player.length; i++) {
          text += `(${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace("@s.whatsapp.net", "")} ${ww[chat].player[i].isdead === true ? `☠️ ${ww[chat].player[i].role}` : ""}\n`;
          player.push(ww[chat].player[i].id);
        }
        Lyrra.sendMessage(m.chat, {
          text: text,
          contextInfo: {
            externalAdReply: {
              title: "W E R E W O L F",
              mediaType: 1,
              renderLargerThumbnail: true,
              thumbnail: await resize(thumb, 300, 175),
              sourceUrl: "",
              mediaUrl: thumb,
            },
            mentionedJid: player,
          },
        }, {
          quoted: m
        });
      } else {
        let text = `\n*⌂ W E R E W O L F - G A M E*\n\nPermainan Sosial Yang Berlangsung Dalam Beberapa Putaran/ronde. Para Pemain Dituntut Untuk Mencari Seorang Penjahat Yang Ada Dipermainan. Para Pemain Diberi Waktu, Peran, Serta Kemampuannya Masing-masing Untuk Bermain Permainan Ini\n\n*⌂ C O M M A N D*\n`;
        text += ` • ww create\n`;
        text += ` • ww join\n`;
        text += ` • ww start\n`;
        text += ` • ww exit\n`;
        text += ` • ww delete\n`;
        text += ` • ww player\n`;
        text += `\nPermainan ini dapat dimainkan oleh 5 sampai 15 orang.`;
        Lyrra.sendMessage(m.chat, {
          text: text.trim(),
          contextInfo: {
            externalAdReply: {
              title: "W E R E W O L F",
              mediaType: 1,
              renderLargerThumbnail: true,
              thumbnail: await resize(thumb, 300, 175),
              sourceUrl: web,
              mediaUrl: thumb,
            },
          },
        }, {
          quoted: m
        });
      }
    }
    break

    case 'kuis':
    case 'tebakkimia':
    case 'tebakbendera':
    case 'susunkata':
    case 'tebaklirik':
    case 'tebakkata':
    case 'tebakkalimat':
    case 'asahotak': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (from in datareadcek[command]) return m.reply('Masih ada soal yang belum diselesaikan!');

      const response = await axios.get(`https://raw.githubusercontent.com/Leoo7z/Games/main/${command}.json`);
      //Menggunakan get axios untuk ambil data dari github 
      const data = response.data;

      var {
        soal,
        jawaban
      } = pickRandom(data);
      console.log('Jawaban: ' + jawaban)
      /* Menggunakan var dan console 
      untuk ambil variabel dr axios get
      */
      await m.reply(`*GAME ${command}* \nSoal: ${soal}\nPetunjuk: ${jawaban.replace(/[b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z]/gi, '-')}\nWaktu: ${gamewaktu} milidetik\n\nKetik .nyerah untuk menyerah`)

      datareadcek.asahotak[m.chat] = {
        soal: soal,
        jawaban: jawaban.toLowerCase(),
        hadiah: randomNomor(10, 20),
        waktu: setTimeout(function () {
            if (datareadcek.asahotak[m.chat])
              m.reply(`*WAKTU HABIS!*\nJawaban dari soal:\n${soal}\n\nAdalah: ${jawaban}`);
            delete
            datareadcek.asahotak[m.chat];
          },
          gamewaktu)
      }
    }
    break
    case 'tebakgambar': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (from in datareadcek.tebakgambar) return m.reply('Masih ada sesi yang belum diselesaikan!');
      const response = await axios.get(`https://raw.githubusercontent.com/Leoo7z/Games/main/${command}.json`);
      const data = response.data;
      var {
        img,
        jawaban,
        deskripsi
      } = pickRandom(data);
      console.log('Jawaban: ' + jawaban)
      var teks1 = `*GAME TEBAK GAMBAR*\nPetunjuk: ${jawaban.replace(/[b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z]/gi, '-')}\nDeskripsi: ${deskripsi}\nWaktu: ${gamewaktu} milidetik\n\nKetik .nyerah untuk menyerah`
      await Lyrra.sendMessage(from, {
        image: {
          url: img
        },
        caption: teks1
      }, {
        quoted: m
      })
      datareadcek.tebakgambar[from] = {
        soal: img,
        jawaban: jawaban.toLowerCase(),
        hadiah: randomNomor(10, 20),
        waktu: setTimeout(function () {
          if (datareadcek.tebakgambar[from]) m.reply(`*WAKTU HABIS!*\nJawaban: ${datareadcek.tebakgambar[from].jawaban}`);
          delete datareadcek.tebakgambar[from];
        }, gamewaktu)
      }
    }
    break

    case 'tebakanime': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (m.chat in datareadcek.tebakanime) return m.reply('Masih ada sesi yang belum diselesaikan!');
      const response = await axios.get(`https://raw.githubusercontent.com/Leoo7z/Games/main/${command}.json`);
      const data = response.data;
      var {
        image,
        jawaban
      } = pickRandom(data);
      console.log('Jawaban: ' + jawaban)
      var teks1 = `*GAME TEBAK ANIME*\nPetunjuk: ${jawaban.replace(/[b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z]/gi, '-')}\nWaktu: ${gamewaktu} milidetik\n\nKetik .nyerah untuk menyerah`
      await Lyrra.sendMessage(from, {
        image: {
          url: image
        },
        caption: teks1
      }, {
        quoted: m
      })
      datareadcek.tebakanime[m.chat] = {
        soal: image,
        jawaban: jawaban.toLowerCase(),
        hadiah: randomNomor(10, 20),
        waktu: setTimeout(function () {
          if (datareadcek.tebakanime[m.chat]) m.reply(`*WAKTU HABIS!*\nJawaban: ${datareadcek.tebakanime[m.chat].jawaban}`);
          delete datareadcek.tebakanime[m.chat];
        }, gamewaktu)
      }
    }
    break

    case 'tebaklagu': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (m.chat in datareadcek.tebaklagu) return m.reply('Masih ada sesi yang belum diselesaikan!');
      const response = await axios.get(`https://raw.githubusercontent.com/Leoo7z/Games/main/${command}.json`);
      const data = response.data;
      var {
        soal,
        artis,
        jawaban
      } = pickRandom(data);
      console.log('Jawaban: ' + jawaban)
      if (jawaban.toLowerCase() == 'Audio tidak ditemukan, silahkan request ulang!') return m.reply('Terjadi kesalahan')
      var teks1 = `*GAME TEBAK LAGU*\nPetunjuk: ${jawaban.replace(/[b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z]/gi, '-')}\nArtis: ${artis}\nWaktu: ${gamewaktu} milidetik\n\nKetik .nyerah untuk menyerah`
      Lyrra.sendMessage(from, {
        audio: {
          url: soal
        },
        mimetype: 'audio/mpeg',
        ptt: true
      }, {
        quoted: m
      })
      await Lyrra.sendMessage(from, {
        text: teks1
      }, {
        quoted: m
      })
      datareadcek.tebaklagu[m.chat] = {
        soal: soal,
        jawaban: jawaban.toLowerCase(),
        hadiah: randomNomor(10, 20),
        waktu: setTimeout(function () {
          if (datareadcek.tebaklagu[m.chat]) m.reply(`*WAKTU HABIS!*\nJawaban: ${datareadcek.tebaklagu[m.chat].jawaban}`);
          delete datareadcek.tebaklagu[m.chat];
        }, gamewaktu)
      }
    }
    break

    case 'caklontong': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (from in datareadcek.caklontong) return m.reply('Masih ada sesi yang belum diselesaikan!');
      const response = await axios.get(`https://raw.githubusercontent.com/Leoo7z/Games/main/${command}.json`);
      const data = response.data;
      var {
        soal,
        jawaban,
        deskripsi
      } = pickRandom(data);
      console.log(`Jawaban: ${jawaban}\n${deskripsi}`)
      await m.reply(`*GAME CAK LONTONG*\nSoal: ${soal}\nPetunjuk: ${jawaban.replace(/[b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z]/gi, '-')}\nWaktu: ${gamewaktu} milidetik\n\nKetik .nyerah untuk menyerah`)
      datareadcek.caklontong[from] = {
        soal: soal,
        jawaban: jawaban.toLowerCase(),
        hadiah: randomNomor(10, 20),
        waktu: setTimeout(function () {
          if (datareadcek.caklontong[from]) m.reply(`*WAKTU HABIS!*\nJawaban: ${jawaban}\n${deskripsi}`)
          delete datareadcek.caklontong[from];
        }, gamewaktu)
      }
    }
    break

    case 'math':
    case 'kuismath': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (from in datareadcek.kuismath) return m.reply('Masih ada sesi yang belum diselesaikan!');
      let {
        genMath,
        modes
      } = require('./lib-signal/games/math')
      if (!q) return m.reply(`*MODE*\n• ${Object.keys(modes).join('\n• ')}\n\nContoh: ${p_c} easy`)
      if (!(Object.keys(modes)).includes(args[0])) return m.reply('Silahkan pilih modenya yang benar!')
      var {
        soal,
        jawaban,
        waktu,
        hadiah
      } = await genMath(q.toLowerCase()).catch((err) => m.reply('Silahkan pilih modenya yang benar!'))
      console.log('Jawaban: ' + jawaban)
      await m.reply(`*GAME KUIS MATH*\nSoal: Berapa hasil dari ${soal.toLowerCase()}\nWaktu: ${waktu / 1000} milidetik\n\nKetik .nyerah untuk menyerah`)
      datareadcek.kuismath[from] = {
        soal: soal,
        jawaban: jawaban,
        hadiah: randomNomor(2000, hadiah),
        waktu: setTimeout(function () {
          if (datareadcek.kuismath[from]) m.reply(`*WAKTU HABIS!*\nJawaban: ${jawaban}`)
          delete datareadcek.kuismath[from];
        }, waktu)
      }
    }
    break

    case 'tebakgame': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      let anu = await fetchJson('https://raw.githubusercontent.com/qisyana/scrape/main/tebakgame.json')
      let result = anu[Math.floor(Math.random() * anu.length)]
      datareadcek.tebakgame[m.chat] = [
        await Lyrra.sendMessage(m.chat, {
          image: {
            url: result.img
          },
          caption: `Apa nama Game diatas?\n\nWaktu: ${(120000 / 1000).toFixed(2)} milidetik\n\nKetik .nyerah untuk menyerah`
        }, {
          quoted: m
        }), result, 250,
        setTimeout(() => {
          if (datareadcek.tebakgame[m.chat]) {
            m.reply(waktuHabis(result.jawaban))
            delete datareadcek.tebakgame[m.chat]
          }
        }, 120000)
      ]
    }
    break

    case 'slot': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (!m.isGroup) return onlyGrup()
      try {
        let _spin1 = pickRandom(['1', '2', '3', '4', '5'])
        let _spin2 = pickRandom(['1', '2', '3', '4', '5'])
        let _spin3 = pickRandom(['1', '2', '3', '4', '5'])
        let _spin4 = pickRandom(['1', '2', '3', '4', '5'])
        let _spin5 = pickRandom(['1', '2', '3', '4', '5'])
        let _spin6 = pickRandom(['1', '2', '3', '4', '5'])
        let _spin7 = pickRandom(['1', '2', '3', '4', '5'])
        let _spin8 = pickRandom(['1', '2', '3', '4', '5'])
        let _spin9 = pickRandom(['1', '2', '3', '4', '5'])
        let spin1 = (_spin1 * 1)
        let spin2 = (_spin2 * 1)
        let spin3 = (_spin3 * 1)
        let spin4 = (_spin4 * 1)
        let spin5 = (_spin5 * 1)
        let spin6 = (_spin6 * 1)
        let spin7 = (_spin7 * 1)
        let spin8 = (_spin8 * 1)
        let spin9 = (_spin9 * 1)
        let spins1 = (spin1 == 1 ? '🍊' : spin1 == 2 ? '🍇' : spin1 == 3 ? '🍉' : spin1 == 4 ? '🍌' : spin1 == 5 ? '🍍' : '')
        let spins2 = (spin2 == 1 ? '🍊' : spin2 == 2 ? '🍇' : spin2 == 3 ? '🍉' : spin2 == 4 ? '🍌' : spin2 == 5 ? '🍍' : '')
        let spins3 = (spin3 == 1 ? '🍊' : spin3 == 2 ? '🍇' : spin3 == 3 ? '🍉' : spin3 == 4 ? '🍌' : spin3 == 5 ? '🍍' : '')
        let spins4 = (spin4 == 1 ? '🍊' : spin4 == 2 ? '🍇' : spin4 == 3 ? '🍉' : spin4 == 4 ? '🍌' : spin4 == 5 ? '🍍' : '')
        let spins5 = (spin5 == 1 ? '🍊' : spin5 == 2 ? '🍇' : spin5 == 3 ? '🍉' : spin5 == 4 ? '🍌' : spin5 == 5 ? '🍍' : '')
        let spins6 = (spin6 == 1 ? '🍊' : spin6 == 2 ? '🍇' : spin6 == 3 ? '🍉' : spin6 == 4 ? '🍌' : spin6 == 5 ? '🍍' : '')
        let spins7 = (spin7 == 1 ? '🍊' : spin7 == 2 ? '🍇' : spin7 == 3 ? '🍉' : spin7 == 4 ? '🍌' : spin7 == 5 ? '🍍' : '')
        let spins8 = (spin8 == 1 ? '🍊' : spin8 == 2 ? '🍇' : spin8 == 3 ? '🍉' : spin8 == 4 ? '🍌' : spin8 == 5 ? '🍍' : '')
        let spins9 = (spin9 == 1 ? '🍊' : spin9 == 2 ? '🍇' : spin9 == 3 ? '🍉' : spin9 == 4 ? '🍌' : spin9 == 5 ? '🍍' : '')
        let WinOrLose
        if (spin1 == 1 && spin2 == 1 && spin3 == 1 && spin4 == 1 && spin5 == 1 && spin6 == 1 && spin7 == 1 && spin8 == 1 && spin9 == 1 || spin1 == 2 && spin2 == 2 && spin3 == 2 && spin4 == 2 && spin5 == 2 && spin6 == 2 && spin7 == 2 && spin8 == 2 && spin9 == 2 || spin1 == 3 && spin2 == 3 && spin3 == 3 && spin4 == 3 && spin5 == 3 && spin6 == 3 && spin7 == 3 && spin8 == 3 && spin9 == 3 || spin1 == 4 && spin2 == 4 && spin3 == 4 && spin4 == 4 && spin5 == 4 && spin6 == 4 && spin7 == 4 && spin8 == 4 && spin9 == 4 || spin1 == 5 && spin2 == 5 && spin3 == 5 && spin4 == 5 && spin5 == 5 && spin6 == 5 && spin7 == 5 && spin8 == 5 && spin9 == 5) {
          WinOrLose = "Kamu menang lagi dan mendapatkan 100 saldo!"
          addSaldo(tagg, 100)
        } else if (spin4 == 1 && spin5 == 1 && spin6 == 1 || spin4 == 2 && spin5 == 2 && spin6 == 2 || spin4 == 3 && spin5 == 3 && spin6 == 3 || spin4 == 4 && spin5 == 4 && spin6 == 4 || spin4 == 5 && spin5 == 5 && spin6 == 5) {
          WinOrLose = "Kamu menang dan mendapatkan 50 saldo!"
          addSaldo(tagg, 50)
        } else if (spin1 == 1 && spin2 == 1 && spin3 == 1 || spin1 == 2 && spin2 == 2 && spin3 == 2 || spin1 == 3 && spin2 == 4 && spin3 == 3 || spin1 == 4 && spin2 == 4 && spin3 == 4 || spin1 == 5 && spin2 == 5 && spin3 == 5 || spin1 == 6 && spin2 == 6 && spin3 == 6 || spin1 == 7 && spin2 == 7 && spin3 == 7 || spin1 == 8 && spin2 == 8 && spin3 == 8 || spin1 == 9 && spin2 == 9 && spin3 == 9) {
          WinOrLose = "Kamu menang dalam pertandingan ini!\n+ 10 saldo"
          addSaldo(tagg, 10)
        } else {
          WinOrLose = "Kamu kalah dalam pertandingan ini!"
        }
        ditt(`Memutar...`, `Memutar..`, `Memutar...`, `*—————— 「 GAME  SLOT 」 ——————*

${spins1} ${spins2} ${spins3}
${spins4} ${spins5} ${spins6}
${spins7} ${spins8} ${spins9}

${WinOrLose}`.trim(), )
      } catch (err) {
        m.reply('Terjadi kesalahan')
      }
    }
    break
    case 'nyerah': {
      if (db.data.users[m.sender].glimit < 1) return m.reply(`Limit game kamu sudah habis`)
      db.data.users[m.sender].glimit -= 1
      if (m.chat in datareadcek.tebakgambar) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.tebakgambar[m.chat]
        clearTimeout(waktu)
        delete datareadcek.tebakgambar[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.tebakkalimat) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.tebakkalimat[m.chat]
        clearTimeout(waktu)
        delete datareadcek.tebakkalimat[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.tebakkata) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.tebakkata[m.chat]
        clearTimeout(waktu)
        delete datareadcek.tebakkata[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.tebaklirik) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.tebaklirik[m.chat]
        clearTimeout(waktu)
        delete datareadcek.tebaklirik[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.tebakanime) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.tebakanime[m.chat]
        clearTimeout(waktu)
        delete datareadcek.tebakanime[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.tebaklagu) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.tebaklagu[m.chat]
        clearTimeout(waktu)
        delete datareadcek.tebaklagu[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.kuis) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.kuis[m.chat]
        clearTimeout(waktu)
        delete datareadcek.kuis[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.tebakkimia) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.tebakkimia[m.chat]
        clearTimeout(waktu)
        delete datareadcek.tebakkimia[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.tebakbendera) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.tebakbendera[m.chat]
        clearTimeout(waktu)
        delete datareadcek.tebakbendera[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.siapakahaku) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.siapakahaku[m.chat]
        clearTimeout(waktu)
        delete datareadcek.siapakahaku[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.asahotak) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.asahotak[m.chat]
        clearTimeout(waktu)
        delete datareadcek.asahotak[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.susunkata) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.susunkata[m.chat]
        clearTimeout(waktu)
        delete datareadcek.susunkata[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.caklontong) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.caklontong[m.chat]
        clearTimeout(waktu)
        delete datareadcek.caklontong[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.kuismath) {
        let {
          soal,
          jawaban,
          hadiah,
          waktu
        } = datareadcek.kuismath[m.chat]
        clearTimeout(waktu)
        delete datareadcek.kuismath[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `*KAMU MENYERAH*\nSoal: ${soal}\nJawaban: ${jawaban}`
        }, {
          quoted: m
        })
      }
      if (m.chat in datareadcek.tebakgame) {
        clearTimeout(datareadcek.tebakgame[m.chat][3])
        delete datareadcek.tebakgame[m.chat]
        return Lyrra.sendMessage(m.chat, {
          text: `Yahh, masa nyerah :(`
        }, {
          quoted: m
        })
      }
    }
    break

    // === Rpg Menu



    // === Store Menu

    case 'tambah': {
      if (!text.includes('+')) return m.reply(`Contoh: ${p_c} angka+angka+...`);
      const arg = args.join(' ');
      const angkaArray = arg.split('+').map(Number);
      const hasil = angkaArray.reduce((acc, num) => acc + num, 0);
      if (isNaN(hasil)) {
        m.reply('Angka tidak valid. Pastikan untuk memasukkan angka yang benar.');
      } else {
        m.reply(`Hasil: ${toRupiah(hasil)}`);
      }
    }
    break

    case 'kurang': {
      if (!text.includes('-')) return m.reply(`Contoh: ${p_c} angka-angka-...`);
      const arg = args.join(' ');
      const angkaArray = arg.split('-').map(Number);
      const hasil = angkaArray.reduce((acc, num) => acc - num);
      if (isNaN(hasil)) {
        m.reply('Angka tidak valid. Pastikan untuk memasukkan angka yang benar.');
      } else {
        m.reply(`Hasil: ${toRupiah(hasil)}`);
      }
    }
    break

    case 'kali': {
      if (!text.includes('*')) return m.reply(`Contoh: ${p_c} angka*angka*...`);
      const arg = args.join(' ');
      const angkaArray = arg.split('*').map(Number);
      const hasil = angkaArray.reduce((acc, num) => acc * num, 1);
      if (isNaN(hasil)) {
        m.reply('Angka tidak valid. Pastikan untuk memasukkan angka yang benar.');
      } else {
        m.reply(`Hasil: ${toRupiah(hasil)}`);
      }
    }
    break

    case 'bagi': {
      if (!text.includes('/')) return m.reply(`Contoh: ${p_c} angka/angka/...`);
      const arg = args.join(' ');
      const angkaArray = arg.split('/').map(Number);
      const hasil = angkaArray.reduce((acc, num) => acc / num);
      if (isNaN(hasil)) {
        m.reply('Angka tidak valid. Pastikan untuk memasukkan angka yang benar.');
      } else {
        m.reply(`Hasil: ${toRupiah(hasil)}`);
      }
    }
    break

    case 'buygold':
    case 'topupg': {
      if (!text) return m.reply(`Masukkan nominal gold yang ingin dibeli.\nContoh: ${p_c} 1`);
      const hargaPerGold = 7000;
      const nominal = parseInt(args[0]);
      if (isNaN(nominal) || nominal <= 0) return m.reply('Minimal pembelian 1 gold')
      const totalHarga = nominal * hargaPerGold;
      const saldoSaatIni = cekSaldo(m.sender);
      if (saldoSaatIni < totalHarga) {
        return m.reply(`Info Harga ${nominal} Gold\nSaldo kamu: ${toRupiah(saldoSaatIni)}\nHarga total: Rp. ${toRupiah(totalHarga)}\n\nSaldo kamu tidak cukup.`);
      }

      addGold(m.sender, nominal);
      minSaldo(m.sender, totalHarga);
      const hargaPerGoldFormatted = toRupiah(hargaPerGold);
      const totalHargaFormatted = toRupiah(totalHarga);
      const saldoAkhirFormatted = toRupiah(cekSaldo(m.sender));

      await m.reply(`🔔 Transaksi Berhasil! 🔔\n\n✨ Kamu berhasil membeli ${nominal} gold. ✨\n\nRincian Pembelian:\n${nominal} gold x Rp. ${hargaPerGoldFormatted} = Rp. ${totalHargaFormatted}\n\n💵 Saldo kamu sekarang: Rp. ${saldoAkhirFormatted}`)
    }
    break

    case 'buysaldo':
    case 'topups': {
      if (!text) return m.reply(`Masukkan nominal saldo yang ingin dibeli.\nContoh: ${p_c} 1500`)
      const hargaPer1500Saldo = 1000;
      const nominal = parseInt(args[0]);
      if (isNaN(nominal) || nominal < 1500) return m.reply('Minimal pembelian 1500 saldo')
      const totalLimit = Math.ceil(nominal / 1500) * hargaPer1500Saldo;
      const limitSaatIni = cekLimit(m.sender)

      if (limitSaatIni < totalLimit) {
        return m.reply(`Informasi Pembelian Saldo\n\nNominal saldo: ${nominal}\nHarga per 1500 saldo: ${toRupiah(hargaPer1500Saldo)} limit\nTotal limit yang dibutuhkan: ${toRupiah(totalLimit)} limit\n\nLimit kamu saat ini: ${toRupiah(limitSaatIni)}\n\nLimit kamu tidak cukup untuk melakukan pembelian.`);
      }

      addSaldo(m.sender, nominal)
      minLimit(m.sender, totalLimit)
      const hargaPer1500SaldoFormatted = toRupiah(hargaPer1500Saldo);
      const totalLimitFormatted = toRupiah(totalLimit);
      const limitAkhirFormatted = toRupiah(cekLimit(m.sender));
      await m.reply(`🔔 Transaksi Berhasil! 🔔\n\n✨ Kamu berhasil membeli ${nominal} saldo. ✨\n\nRincian Pembelian:\n${nominal} saldo x Rp. ${hargaPer1500SaldoFormatted} (per 1500 saldo) = Rp. ${totalLimitFormatted} limit\n\n💵 Limit kamu sekarang: Rp. ${limitAkhirFormatted}`);
    }
    break

    case 'deposit': {
      if (!isPc) return onlyPrivat()
      if (db.data.users[m.sender].status_deposit) return m.reply("Masih ada transaksi yang belum diselesaikan, ketik *.bataldeposit* untuk membatalkan transaksi!");
      if (!text) {
        return Lyrra.sendMessage(m.chat, {
          buttons: [{
            buttonId: 'action',
            buttonText: {
              displayText: 'Pilih Nominal Deposit'
            },
            type: 4,
            nativeFlowInfo: {
              name: 'single_select',
              paramsJson: JSON.stringify({
                title: 'Pilih Nominal Deposit',
                sections: [{
                  title: 'List Nominal Deposit',
                  rows: [{
                      title: 'Rp50.000',
                      description: "Deposit Rp50.000",
                      id: `${_p}deposit 50000`
                    },
                    {
                      title: 'Rp45.000',
                      description: "Deposit Rp45.000",
                      id: `${_p}deposit 45000`
                    },
                    {
                      title: 'Rp40.000',
                      description: "Deposit Rp40.000",
                      id: `${_p}deposit 40000`
                    },
                    {
                      title: 'Rp35.000',
                      description: "Deposit Rp35.000",
                      id: `${_p}deposit 35000`
                    },
                    {
                      title: 'Rp30.000',
                      description: "Deposit Rp30.000",
                      id: `${_p}deposit 30000`
                    },
                    {
                      title: 'Rp25.000',
                      description: "Deposit Rp25.000",
                      id: `${_p}deposit 25000`
                    },
                    {
                      title: 'Rp20.000',
                      description: "Deposit Rp20.000",
                      id: `${_p}deposit 20000`
                    },
                    {
                      title: 'Rp15.000',
                      description: "Deposit Rp15.000",
                      id: `${_p}deposit 15000`
                    },
                    {
                      title: 'Rp10.000',
                      description: "Deposit Rp10.000",
                      id: `${_p}deposit 10000`
                    },
                    {
                      title: 'Rp5.000',
                      description: "Deposit Rp5.000",
                      id: `${_p}deposit 5000`
                    },
                    {
                      title: 'Rp1.000',
                      description: "Deposit Rp1.000",
                      id: `${_p}deposit 1000`
                    },
                  ]
                }]
              })
            }
          }],
          footer: `${storename}`,
          headerType: 1,
          viewOnce: true,
          text: `Silahkan Pilih Nominal Deposit Dibawah  
Atau Kamu Bisa Mengetik Secara  
Manual Dengan Cara :  

.deposit [Nominal]  
*contoh :*  
.deposit 5000`,
          contextInfo: {
            isForwarded: true,
            mentionedJid: [m.sender],
          },
        }, {
          quoted: m
        });
      }

      let amount = Number(args[0]);
      if (isNaN(amount) || amount < 1000 || amount > 50000) return m.reply("Nominal tidak valid! Minimal deposit Rp1.000 dan maksimal Rp50.000.");

      amount += randomNomor(200, 500);
      const get = await axios.get(`https://restapi-v2.simplebot.my.id/orderkuota/createpayment?apikey=${global.apiNevers}&amount=${amount}&codeqr=${Enc(global.qrisOrderKuota)}`);

      const teks3 = `
*── INFORMASI PEMBAYARAN*  

*• ID :* ${get.data.result.idtransaksi}  
*• Total Pembayaran :* Rp${await toRupiah(get.data.result.jumlah)}  
*• Jenis :* Deposit  
*• Expired :* 5 menit  

*Note :*  
Qris pembayaran berlaku dalam 5 menit.  
Jika sudah melewati 5 menit, pembayaran dinyatakan tidak valid!  
Jika pembayaran berhasil, bot akan otomatis mengirim notifikasi status pembayaran kamu.  
`;
      let msgQr = await Lyrra.sendMessage(m.chat, {
        footer: `${storename}`,
        buttons: [{
          buttonId: `${_p}bataldeposit`,
          buttonText: {
            displayText: 'Batalkan Deposit'
          },
          type: 1
        }],
        headerType: 1,
        viewOnce: true,
        image: {
          url: get.data.result.imageqris.url
        },
        caption: teks3,
        contextInfo: {
          mentionedJid: [m.sender]
        }
      });

      db.data.users[m.sender].status_deposit = true;
      db.data.users[m.sender].saweria = {
        msg: msgQr,
        chat: m.sender,
        idDeposit: get.data.result.idtransaksi,
        amount: get.data.result.jumlah.toString(),
        exp: function () {
          setTimeout(async () => {
            if (db.data.users[m.sender].status_deposit) {
              await Lyrra.sendMessage(db.data.users[m.sender].saweria.chat, {
                text: "Pembayaran telah expired!"
              }, {
                quoted: db.data.users[m.sender].saweria.msg
              });
              db.data.users[m.sender].status_deposit = false;
              delete db.data.users[m.sender].saweria;
            }
          }, 300000);
        }
      };

      await db.data.users[m.sender].saweria.exp();

      while (db.data.users[m.sender].status_deposit) {
        await sleep(8000);
        const resultcek = await axios.get(`https://restapi-v2.simplebot.my.id/orderkuota/cekstatus?apikey=${global.apiNevers}&merchant=${global.merchantIdOrderKuota}&keyorkut=${Enc(global.apiOrderKuota)}`);
        if (db.data.users[m.sender].saweria && resultcek?.data?.result?.amount == db.data.users[m.sender].saweria.amount) {
          db.data.users[m.sender].status_deposit = false;

          await Lyrra.sendMessage(db.data.users[m.sender].saweria.chat, {
            text: `
*PEMBAYARAN BERHASIL DITERIMA ✅*  

*• ID :* ${db.data.users[m.sender].saweria.idDeposit}  
*• Total Pembayaran :* Rp${await toRupiah(db.data.users[m.sender].saweria.amount)}  
*• Jenis :* Deposit  
`
          }, {
            quoted: m
          });
          addEwallet(m.sender, amount);
          delete db.data.users[m.sender].saweria;
          Lyrra.sendTextWithMentions(owner + '@s.whatsapp.net', `User @${m.sender.split("@")[0]} Berhasil Deposit Dengan Nominal Rp${toRupiah(amount)}`, null)
        }
      }
    }
    break

    case 'bataldeposit': {
      if (!isPc) return onlyPrivat()
      if (!db.data.users[m.sender].status_deposit) return m.reply("Kamu Tidak Memiliki Status Pembayaran!");
      db.data.users[m.sender].status_deposit = false
      delete db.data.users[m.sender].saweria
      m.reply('Deposit Berhasil Dibatalkan')
    }
    break

    case 'belipanel':
    case 'panelbuy':
    case 'buypanel': {
      if (!isPc) return onlyPrivat()
      const t = text.split('-');
      let username = t[0] || 'user';
      let nomor = t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.quoted ? m.quoted.sender : m.mentionedJid[0];

      if (!username || !nomor) return m.reply(`⚠️ Format salah! Contoh: ${prefix + command} username-nomor`);

      const pilihanUkuran = {
        '1gb': {
          tipepanel: '1GB',
          harga: panel.p1gb,
          memo: 1024,
          disk: 1024,
          cpu: 30
        },
        '2gb': {
          tipepanel: '2GB',
          harga: panel.p2gb,
          memo: 2048,
          disk: 2048,
          cpu: 50
        },
        '3gb': {
          tipepanel: '3GB',
          harga: panel.p3gb,
          memo: 3072,
          disk: 3072,
          cpu: 60
        },
        '4gb': {
          tipepanel: '4GB',
          harga: panel.p4gb,
          memo: 4096,
          disk: 4096,
          cpu: 80
        },
        '5gb': {
          tipepanel: '5GB',
          harga: panel.p5gb,
          memo: 5120,
          disk: 5120,
          cpu: 90
        },
        '6gb': {
          tipepanel: '6GB',
          harga: panel.p6gb,
          memo: 6144,
          disk: 6144,
          cpu: 100
        },
        '7gb': {
          tipepanel: '7GB',
          harga: panel.p7gb,
          memo: 7168,
          disk: 7168,
          cpu: 120
        },
        '8gb': {
          tipepanel: '8GB',
          harga: panel.p8gb,
          memo: 8192,
          disk: 8192,
          cpu: 140
        },
        '9gb': {
          tipepanel: '9GB',
          harga: panel.p9gb,
          memo: 9216,
          disk: 9216,
          cpu: 150
        },
        '10gb': {
          tipepanel: '10GB',
          harga: panel.p10gb,
          memo: 10240,
          disk: 10240,
          cpu: 190
        },
        'unli': {
          tipepanel: 'Unlimited',
          harga: panel.punli,
          memo: 0,
          disk: 0,
          cpu: 0
        }
      };

      let rows = Object.entries(pilihanUkuran).map(([key, value]) => ({
        title: `${value.tipepanel} - Rp${toRupiah(value.harga)}`,
        description: `Pilih Panel ${value.tipepanel} Harga Rp${toRupiah(value.harga)}`,
        id: `${_p}createpanel ${key}-${username}-${nomor.replace('@s.whatsapp.net', '')}`
      }));

      return Lyrra.sendMessage(m.chat, {
        buttons: [{
          buttonId: 'action',
          buttonText: {
            displayText: 'Pilih Ukuran Panel'
          },
          type: 4,
          nativeFlowInfo: {
            name: 'single_select',
            paramsJson: JSON.stringify({
              title: 'Pilih Ukuran Panel',
              sections: [{
                title: 'List Panel',
                rows
              }]
            })
          }
        }],
        footer: `${storename}`,
        headerType: 1,
        viewOnce: true,
        text: `✅ *Username:* ${username}\n📞 *Nomor:* ${nomor.replace('@s.whatsapp.net', '')}\n\n⚠️ *Pilih ukuran panel di bawah ini!*`,
        contextInfo: {
          mentionedJid: [m.sender]
        }
      }, {
        quoted: m
      });
    }
    break

    case 'buatpanel':
    case 'createpanel': {
      if (!isPc) return onlyPrivat()
      const pilihanUkuran = {
        '1gb': {
          tipepanel: '1GB',
          harga: panel.p1gb,
          memo: 1024,
          disk: 1024,
          cpu: 30
        },
        '2gb': {
          tipepanel: '2GB',
          harga: panel.p2gb,
          memo: 2048,
          disk: 2048,
          cpu: 50
        },
        '3gb': {
          tipepanel: '3GB',
          harga: panel.p3gb,
          memo: 3072,
          disk: 3072,
          cpu: 60
        },
        '4gb': {
          tipepanel: '4GB',
          harga: panel.p4gb,
          memo: 4096,
          disk: 4096,
          cpu: 80
        },
        '5gb': {
          tipepanel: '5GB',
          harga: panel.p5gb,
          memo: 5120,
          disk: 5120,
          cpu: 90
        },
        '6gb': {
          tipepanel: '6GB',
          harga: panel.p6gb,
          memo: 6144,
          disk: 6144,
          cpu: 100
        },
        '7gb': {
          tipepanel: '7GB',
          harga: panel.p7gb,
          memo: 7168,
          disk: 7168,
          cpu: 120
        },
        '8gb': {
          tipepanel: '8GB',
          harga: panel.p8gb,
          memo: 8192,
          disk: 8192,
          cpu: 140
        },
        '9gb': {
          tipepanel: '9GB',
          harga: panel.p9gb,
          memo: 9216,
          disk: 9216,
          cpu: 150
        },
        '10gb': {
          tipepanel: '10GB',
          harga: panel.p10gb,
          memo: 10240,
          disk: 10240,
          cpu: 190
        },
        'unli': {
          tipepanel: 'Unlimited',
          harga: panel.punli,
          memo: 0,
          disk: 0,
          cpu: 0
        }
      };

      const t = text.split('-');
      const ukuran = t[0];
      const username = t[1];
      const nomor = t[2] + '@s.whatsapp.net';

      if (!pilihanUkuran[ukuran]) return m.reply(`⚠️ Ukuran tidak valid! Pilih salah satu dari: ${Object.keys(pilihanUkuran).join(', ')}`);

      const {
        harga,
        tipepanel,
        memo,
        disk,
        cpu
      } = pilihanUkuran[ukuran];

      if (db.data.users[m.sender].ewallet < harga) {
        return m.reply(`❌ *Ewallet tidak cukup!*\n\n💰 *Ewallet kamu:* Rp${toRupiah(db.data.users[m.sender].ewallet)}\n💳 *Harga panel ${tipepanel}:* Rp${toRupiah(harga)}\nSilahkan Deposit Terlebih Dahulu.\n\n*Example :*\n${_p}deposit <nominal>`);
      }

      const email = `${username}@gmail.com`;
      const password = randomKarakter(5);

      const userResponse = await fetch(`${domain}api/application/users`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey}`
        },
        body: JSON.stringify({
          email,
          username,
          first_name: username,
          last_name: username,
          language: "en",
          password
        })
      });

      const userData = await userResponse.json();
      if (userData.errors) return m.reply(JSON.stringify(userData.errors[0], null, 2));

      const user = userData.attributes;

      const eggResponse = await fetch(`${domain}api/application/nests/5/eggs/${global.eggs}`, {
        method: 'GET',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey}`
        }
      });

      const eggData = await eggResponse.json();
      const startupCmd = eggData.attributes.startup;

      const serverResponse = await fetch(`${domain}api/application/servers`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey}`
        },
        body: JSON.stringify({
          name: username,
          description: "Cpanel",
          user: user.id,
          egg: parseInt(global.eggs),
          docker_image: "ghcr.io/parkervcp/yolks:nodejs_18",
          startup: startupCmd,
          environment: {
            INST: "npm",
            USER_UPLOAD: "0",
            AUTO_UPDATE: "0",
            CMD_RUN: "npm start",
            JS_FILE: "./x-system/index.js"
          },
          limits: {
            memory: memo,
            swap: 0,
            disk: disk,
            io: 500,
            cpu: cpu
          },
          feature_limits: {
            databases: 0,
            backups: 0,
            allocations: 0
          },
          deploy: {
            locations: [parseInt(global.locc)],
            dedicated_ip: false,
            port_range: []
          }
        })
      });

      const serverData = await serverResponse.json();
      if (serverData.errors) return m.reply(JSON.stringify(serverData.errors[0], null, 2));

      const server = serverData.attributes;

      const info = `✅ *BERIKUT DATA PANEL ANDA*\n\n🔹 *Username:* ${user.username}\n🔹 *Password:* ${password}\n🔹 *Server:* ${domain}\n🔹 *Server ID:* ${server.id}\n\n📌 Simpan data panelmu baik-baik!`;

      await Lyrra.sendMessage(nomor, {
        text: info
      }, {
        quoted: floc
      });
      minEwallet(m.sender, harga);
      m.reply(`🎉 *SUKSES MEMBUAT CPANEL!*\n\n📌 *Detail Panel:*\n➤ *ID User:* ${user.id}\n➤ *ID Server:* ${server.id}\n➤ *RAM:* ${memo} MB\n➤ *Disk:* ${disk} MB\n➤ *CPU:* ${cpu}%\n\n🔑 Username dan password telah dikirim ke nomor target.`);
    }
    break

    case 'adpbuy':
    case 'beliadp':
    case 'buypaneladmin':
    case 'buyadminpanel':
    case 'buyadp': {
      if (!isPc) return onlyPrivat()
      let t = text.split(',');
      if (t.length < 3) return m.reply(`Contoh: ${p_c} email,username,name,nomor`);
      let email = t[0];
      let username = t[1];
      let name = t[2];
      let u = m.quoted ? m.quoted.sender : t[3] ? t[3].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      if (!u) return m.reply(`Contoh: ${p_c} email,username,name,nomor`)
      if (db.data.users[m.sender].ewallet < panel.adp) return m.reply(`Ewallet kamu kurang\n\nEwallet kamu Rp.${toRupiah(db.data.users[m.sender].ewallet)}\nHarga Adp: Rp.${toRupiah(panel.adp)}`)
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = username + "admin"
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": name,
          "last_name": "Admin",
          "root_admin": true,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      m.reply(`${monospace("BERHASIL  CADMIN!")}
• ID: ${user.id}
• UUID: ${user.uuid}
• Email: ${user.email}

Data lainnya sudah terkirim ke
privat chat...`)
      let teksnyo = `*BERIKUT DATA ADMIN PANEL ANDA* 

• ID: ${user.id}
• UUID: ${user.uuid}
• Email: ${user.email}
• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data admin panel baik-baik`
      sendbutton(u, teksnyo, ftext)
      minEwallet(m.sender, panel.adp)
    }
    break

    case 'belireseller':
    case 'belires':
    case 'buyreseller':
    case 'buyres': {
      if (!isPc) return onlyPrivat()
      if (!args[0]) return m.reply(`Masukkan Nomor\nContoh: ${p_c} nomor`)
      if (db.data.users[m.sender].ewallet < panel.ress) {
        return m.reply(`❌ *Ewallet tidak cukup!*\n\n💰 *Ewallet kamu:* Rp${toRupiah(db.data.users[m.sender].ewallet)}\n💳 *Harga Reseller :* Rp${toRupiah(panel.ress)}\nSilahkan Deposit Terlebih Dahulu.\n\n*Example :*\n${_p}deposit <nominal>`);
      }
      bnnd = text.split("|")[0].replace(/[^0-9]/g, '')
      let cekseler = await Lyrra.onWhatsApp(bnnd + `@s.whatsapp.net`)
      if (cekseler.length == 0) return m.reply(`Masukkan nomor yang aktif!`)
      res.push(bnnd)
      fs.writeFileSync('./data/default-db/reseller.json', JSON.stringify(res))
      m.reply(`Berhasil Buyreseller`)
      minEwallet(m.sender, panel.adp)
    }
    break

    case 'buy1gb': {
      if (db.data.users[m.sender].ewallet < panel.p1gb) return m.reply(`Ewallet kamu kurang\n\nEwallet kamu Rp. ${toRupiah(db.data.users[m.sender].ewallet)}\nHarga panel 1GB: Rp.${toRupiah(panel.p1gb)}`)
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "1050"
      let cpu = "30"
      let disk = "1050"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang membuat server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panel ini baik-baik`
      let msg = generateWAMessageFromContent(from, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              body: proto.Message.InteractiveMessage.Body.create({
                text: ctf
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: `Buy Using Saldo`
              }),
              header: proto.Message.InteractiveMessage.Header.create({

                title: '',
                gifPlayback: true,
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  text: '-'
                }],
              }),
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999,
                isForwarded: false,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: chjid + '@newsletter',
                  newsletterName: `${wm}`,
                  serverMessageId: 145
                }
              }
            })
          }
        }
      }, {
        quoted: m
      })
      await Lyrra.relayMessage(u, msg.message, {
        messageId: msg.key.id
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      await sleep(1000)
      m.reply(`Sukses membayar seharga Rp.${toRupiah(panel.p1gb)}`)
      minEwallet(m.sender, panel.p1gb)
    }
    break

    case 'buy2gb': {
      if (db.data.users[m.sender].ewallet < panel.p2gb) return m.reply(`Ewallet kamu kurang\n\nEwallet kamu Rp. ${toRupiah(db.data.users[m.sender].ewallet)}\nHarga panel 2GB: Rp.${toRupiah(panel.p2gb)}`)
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "2050"
      let cpu = "60"
      let disk = "2050"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang membuat server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panel ini baik-baik`
      let msg = generateWAMessageFromContent(from, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              body: proto.Message.InteractiveMessage.Body.create({
                text: ctf
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: `Buy Using Saldo`
              }),
              header: proto.Message.InteractiveMessage.Header.create({

                title: '',
                gifPlayback: true,
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  text: '-'
                }],
              }),
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999,
                isForwarded: false,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: chjid + '@newsletter',
                  newsletterName: `${wm}`,
                  serverMessageId: 145
                }
              }
            })
          }
        }
      }, {
        quoted: m
      })
      await Lyrra.relayMessage(u, msg.message, {
        messageId: msg.key.id
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      await sleep(1000)
      m.reply(`Sukses membayar seharga Rp.${toRupiah(panel.p2gb)}`)
      minEwallet(m.sender, panel.p2gb)
    }
    break

    case 'buy3gb': {
      if (db.data.users[m.sender].ewallet < panel.p3gb) return m.reply(`Saldo kamu kurang\n\nSaldo kamu Rp. ${toRupiah(db.data.users[m.sender].ewallet)}\nHarga panel 3GB: Rp.${toRupiah(panel.p3gb)}`)
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "3050"
      let cpu = "120"
      let disk = "3050"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang membuat server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panel ini baik-baik`
      let msg = generateWAMessageFromContent(from, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              body: proto.Message.InteractiveMessage.Body.create({
                text: ctf
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: `Buy Using Ewallet`
              }),
              header: proto.Message.InteractiveMessage.Header.create({

                title: '',
                gifPlayback: true,
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  text: '-'
                }],
              }),
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999,
                isForwarded: false,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: chjid + '@newsletter',
                  newsletterName: `${wm}`,
                  serverMessageId: 145
                }
              }
            })
          }
        }
      }, {
        quoted: m
      })
      await Lyrra.relayMessage(u, msg.message, {
        messageId: msg.key.id
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      await sleep(1000)
      m.reply(`Sukses membayar seharga Rp.${toRupiah(panel.p3gb)}`)
      minEwallet(m.sender, panel.p3gb)
    }
    break

    case 'buy4gb': {
      if (db.data.users[m.sender].ewallet < panel.p4gb) return m.reply(`Saldo kamu kurang\n\nSaldo kamu Rp. ${toRupiah(db.data.users[m.sender].ewallet)}\nHarga panel 4GB: Rp.${toRupiah(panel.p4gb)}`)
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "4050"
      let cpu = "120"
      let disk = "4050"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang membuat server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panel ini baik-baik`
      let msg = generateWAMessageFromContent(from, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              body: proto.Message.InteractiveMessage.Body.create({
                text: ctf
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: `Buy Using Ewallet`
              }),
              header: proto.Message.InteractiveMessage.Header.create({

                title: '',
                gifPlayback: true,
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  text: '-'
                }],
              }),
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999,
                isForwarded: false,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: chjid + '@newsletter',
                  newsletterName: `${wm}`,
                  serverMessageId: 145
                }
              }
            })
          }
        }
      }, {
        quoted: m
      })
      await Lyrra.relayMessage(u, msg.message, {
        messageId: msg.key.id
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      await sleep(1000)
      m.reply(`Sukses membayar seharga Rp.${toRupiah(panel.p4gb)}`)
      minEwallet(m.sender, panel.p4gb)
    }
    break

    case 'buy5gb': {
      if (db.data.users[m.sender].ewallet < panel.p5gb) return m.reply(`Saldo kamu kurang\n\nSaldo kamu Rp. ${toRupiah(db.data.users[m.sender].ewallet)}\nHarga panel 5GB: Rp.${toRupiah(panel.p5gb)}`)
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "5050"
      let cpu = "120"
      let disk = "5050"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang membuat server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panel ini baik-baik`
      let msg = generateWAMessageFromContent(from, {
        viewOnceMessage: {
          message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              body: proto.Message.InteractiveMessage.Body.create({
                text: ctf
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: `Buy Using Ewallet`
              }),
              header: proto.Message.InteractiveMessage.Header.create({

                title: '',
                gifPlayback: true,
                subtitle: '',
                hasMediaAttachment: false
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                  text: '-'
                }],
              }),
              contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999,
                isForwarded: false,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: chjid + '@newsletter',
                  newsletterName: `${wm}`,
                  serverMessageId: 145
                }
              }
            })
          }
        }
      }, {
        quoted: m
      })
      await Lyrra.relayMessage(u, msg.message, {
        messageId: msg.key.id
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      await sleep(1000)
      m.reply(`Sukses membayar seharga Rp.${toRupiah(panel.p5gb)}`)
      minEwallet(m.sender, panel.p5gb)
    }
    break

    case 'list': {
  if (db_respon_list.length === 0) return m.reply(`Belum ada list respon didalam database!`)
  if (!isAlreadyResponListGroup(m.chat, db_respon_list)) return m.reply(`Belum ada list respon didalam grup ini!`)
  let teks = `Halo ${db.data.users[m.sender].nama}, Berikut adalah list respon digrup ini.\n\n`
  for (let i of db_respon_list) {
    if (i.id === m.chat) {
      teks += `- ${i.key.toUpperCase()} (${i.mediaType})\n`
    }
  }
  teks += `\n\nUntuk melihat detail produk, silahkan kirim nama produk yang ada Didalam list respon. Misal ${db_respon_list[0].key.toUpperCase()}, maka kirim pesan ${db_respon_list[0].key.toUpperCase()} Kepada Bot`
  Lyrra.sendMessage(m.chat, {
    text: teks,
    mentions: [m.sender]
  }, {
    quoted: m
  })
}
break

case 'addlist': {
  if (!m.isGroup) return onlyGrup()
  if (!isOwner && !isAdmins) return onlyAdmin()
  
  let q = m.quoted ? m.quoted : m
  let mime = (q.msg || q).mimetype || ""
  
  var args1 = body.replace(p_c, '').trim().split("|")[0].toLowerCase()
  var args2 = body.split("|")[1]
  
  if (!body.includes("|")) return m.reply(`Gunakan dengan cara ${p_c}addlist key|respon\n\nContoh: ${p_c}addlist tes|apa`)
  if (isAlreadyResponList(m.chat, args1, db_respon_list)) return m.reply(`List respon dengan key: ${args1}\nSudah ada digrup ini!`)
  
  if (m.quoted.mtype === "stickerMessage") {
    let media = await Lyrra.downloadAndSaveMediaMessage(q)
    const url = await CatBox(media)
    addResponList(m.chat, args1, args2, 'sticker', url, db_respon_list)
    m.reply(`Sukses addlist respon\nKey: ${args1}\nTipe: sticker`)
    if (fs.existsSync(media)) fs.unlinkSync(media)
  }
  else if (/image/.test(mime)) {
    let media = await Lyrra.downloadAndSaveMediaMessage(q)
    const url = await CatBox(media)
    addResponList(m.chat, args1, args2, 'image', url, db_respon_list)
    m.reply(`Sukses addlist respon\nKey: ${args1}\nTipe: image`)
    if (fs.existsSync(media)) fs.unlinkSync(media)
  } 
  else if (/video/.test(mime)) {
    let media = await Lyrra.downloadAndSaveMediaMessage(q)
    const url = await CatBox(media)
    addResponList(m.chat, args1, args2, 'video', url, db_respon_list)
    m.reply(`Sukses addlist respon\nKey: ${args1}\nTipe: video`)
    if (fs.existsSync(media)) fs.unlinkSync(media)
  }
  else if (/audio/.test(mime)) {
    let media = await Lyrra.downloadAndSaveMediaMessage(q)
    const url = await CatBox(media)
    addResponList(m.chat, args1, args2, 'audio', url, db_respon_list)
    m.reply(`Sukses addlist respon\nKey: ${args1}\nTipe: audio`)
    if (fs.existsSync(media)) fs.unlinkSync(media)
  }
  else {
    addResponList(m.chat, args1, args2, 'text', '-', db_respon_list)
    m.reply(`Sukses addlist respon\nKey: ${args1}\nTipe: text`)
  }
  }
  break

case 'dellist': {
  if (!m.isGroup) return onlyGrup()
  if (!isOwner && !isAdmins) return onlyAdmin()
  if (db_respon_list.length === 0) return m.reply(`Belum ada list respon didalam database!`)
  if (!text) return m.reply(`Gunakan dengan xara ${p_c}dellist key\n\nContoh: ${p_c}dellist tes`)
  if (!isAlreadyResponList(m.chat, text.toLowerCase(), db_respon_list)) return m.reply(`List respon dengan key: ${text}\ntidak ada didalam grup ini!`)
  delResponList(m.chat, text.toLowerCase(), db_respon_list)
  m.reply(`Sukses dellist respon dengan key: ${text}`)
  }
  break

case 'update':
case 'updatelist': {
  if (!m.isGroup) return onlyGrup()
  if (!isOwner && !isAdmins) return onlyAdmin()
  
  let quotedMsg = m.quoted ? m.quoted : m
  let mime = (quotedMsg.msg || quotedMsg).mimetype || ""
  
  var args1 = body.replace(p_c, '').trim().split("|")[0].toLowerCase()
  var args2 = body.split("|")[1]
  
  if (!body.includes("|")) return m.reply(`Gunakan dengan cara ${p_c}update key|respon\n\nContoh: ${p_c}update tes|apa`)
  if (!isAlreadyResponListGroup(m.chat, db_respon_list)) return m.reply(`Maaf, untuk key *${args1}* belum terdaftar digrup ini!`)
  
  if (m.quoted.mtype === "stickerMessage") {
    let media = await Lyrra.downloadAndSaveMediaMessage(q)
    const url = await CatBox(media)
    addResponList(m.chat, args1, args2, 'sticker', url, db_respon_list)
    m.reply(`Sukses addlist respon\nKey: ${args1}\nTipe: sticker`)
    if (fs.existsSync(media)) fs.unlinkSync(media)
  }
  else if (/image/.test(mime)) {
    let media = await Lyrra.downloadAndSaveMediaMessage(quotedMsg)
    const url = await CatBox(media)
    updateResponList(m.chat, args1, args2, 'image', url, db_respon_list)
    m.reply(`Berhasil update respon list dengan key *${args1}*\nTipe: image`)
    if (fs.existsSync(media)) fs.unlinkSync(media)
  } 
  else if (/video/.test(mime)) {
    let media = await Lyrra.downloadAndSaveMediaMessage(quotedMsg)
    const url = await CatBox(media)
    updateResponList(m.chat, args1, args2, 'video', url, db_respon_list)
    m.reply(`Berhasil update respon list dengan key *${args1}*\nTipe: video`)
    if (fs.existsSync(media)) fs.unlinkSync(media)
  }
  else if (/audio/.test(mime)) {
    let media = await Lyrra.downloadAndSaveMediaMessage(quotedMsg)
    const url = await CatBox(media)
    updateResponList(m.chat, args1, args2, 'audio', url, db_respon_list)
    m.reply(`Berhasil update respon list dengan key *${args1}*\nTipe: audio`)
    if (fs.existsSync(media)) fs.unlinkSync(media)
  }
  else {
    updateResponList(m.chat, args1, args2, 'text', '-', db_respon_list)
    m.reply(`Berhasil update respon list dengan key *${args1}*\nTipe: text`)
  }
  }
  break

    case 'addsewagc':
    case 'addsewagrup':
    case 'addsewa': {
      if (!isOwner) return onlyOwn()
      if (args.length < 2) return m.reply(`Contoh: ${p_c} linknya 30d`)

      let url = args[0]
      url = url.split('https://chat.whatsapp.com/')[1]
      if (!url) return m.reply(`Link grup tidak valid!`)
      if (!args[1]) return m.reply(`Mau berapa lama?`)

      try {
        const groupId = await Lyrra.groupAcceptInvite(url)
        if (_sewa.checkSewaGroup(groupId, sewa)) {
          return m.reply(`Bot sudah disewa oleh grup tersebut!`)
        }

        const groupMetadata = await Lyrra.groupMetadata(groupId)
        if (groupMetadata.joinApprovalMode) {
          return m.reply(`Bot tidak dapat bergabung karena "Setujui anggota baru" aktif`)
        }

        const expiration = _sewa.getSewaExpired(m.chat, sewa)
        if (expiration === 'Permanen') {
          return
        }
        const remainingTime = ms(expiration - Date.now())

        _sewa.addSewaGroup(groupId, args[1], sewa)
        m.reply(`Berhasil menyewa bot untuk grup ini selama ${args[1]}`)
        await Lyrra.sendMessage(groupId, {
          text: `*</> VIP USER </>*

*Subscribe Info* :
- ID : ${groupId.split("@")[0]}
- Expired : ${remainingTime.days} Days
- Countdown : ${remainingTime.days} Days, ${remainingTime.hours} Hours, ${remainingTime.minutes} Minutes.

*Benefit Info* :
- Feature : 2000++
- Management : Yes 
- Request : 1/5s
- VIP Access : No
- Grup Priority : Yes
- Protection : Yes`,
          contextInfo: {
            forwardingScore: 9999,
            isForwarded: false,
            externalAdReply: {
              title: "GROUP SEWA 💫",
              body: 'Unlock Sewa Access',
              previewType: "PHOTO",
              thumbnailUrl: "https://pomf2.lain.la/f/yy6atxpc.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: false
            }
          }
        }, {
          quoted: null
        })
      } catch (err) {
        console.error(err)
        m.reply(`Terjadi kesalahan: ${err}`)
      }
    }
    break

    case 'delsewagrup':
    case 'delsewa': {
      if (!isOwner) return onlyOwn()
      if (!m.isGroup) return onlyGrup()

      const isSewa = _sewa.checkSewaGroup(m.chat, sewa)
      if (!isSewa) return m.reply(`Bot tidak disewa oleh grup ini`)

      const position = _sewa.getSewaPosition(m.chat, sewa)
      sewa.splice(position, 1)
      fs.writeFileSync('./data/default-db/sewa.json', JSON.stringify(sewa, null, 2))
      m.reply(`Berhasil menghapus sewa untuk grup ini`)
    }
    break

    case 'ceksewagrup':
    case 'checksewa':
    case 'ceksewa': {
      if (!m.isGroup) return onlyGrup()
      const isSewa = _sewa.checkSewaGroup(m.chat, sewa)
      if (!isSewa) return m.reply(`Bot tidak disewa oleh grup ini`)

      const expiration = _sewa.getSewaExpired(m.chat, sewa)
      if (expiration === 'Permanen') {
        return m.reply(`Sewa untuk grup ini permanen`)
      }

      const remainingTime = ms(expiration - Date.now())
      const sewanya = `Sewa akan habis dalam ${remainingTime.days} hari, ${remainingTime.hours} jam, ${remainingTime.minutes} menit`
      m.reply(sewanya)
    }
    break

    case 'listsewa': {
      async function getGroupName(groupId) {
        try {
          const groupData = await Lyrra.groupMetadata(groupId);
          return groupData.subject || 'undefined'
        } catch {
          return 'undefined'
        }
      }

      let message = 'List sewa bot:\n\n'
      for (const entry of sewa) {
        const groupName = await getGroupName(entry.id)
        message += `Nama grup: ${groupName}\nID: ${entry.id}\n`
        if (entry.expired === 'Permanen') {
          message += 'Expired: Permanen\n\n'
        } else {
          const remainingTime = ms(entry.expired - Date.now())
          message += `Expired: ${remainingTime.days} hari, ${remainingTime.hours} jam, ${remainingTime.minutes} menit\n\n`
        }
      }

      Lyrra.sendMessage(m.chat, {
        text: message
      }, {
        quoted: m
      })
    }
    break

    case 'adduserprem':
    case 'addpremuser':
    case 'addprem': {
      if (!isOwner) return onlyOwn();
      if (args.length < 2) return m.reply(`Contoh: ${p_c} tag/no 30d`);

      let users = m.mentionedJid[0] ?
        m.mentionedJid[0] :
        m.quoted ?
        m.quoted.sender :
        args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net';

      if (!users.includes('@s.whatsapp.net')) {
        users += '@s.whatsapp.net';
      }

      if (!users) return m.reply(`Tag user atau masukkan nomor!`);
      if (!args[1]) return m.reply(`Mau berapa lama?`);

      if (_prem.checkPremUser(users, prem)) {
        return m.reply(`Akses sudah premium di nomor tersebut!`);
      }

      try {
        _prem.addPremUser(users, args[1], prem)
        const expiration = _prem.getPremExpired(users, prem);
        if (expiration === 'Permanen') {
          return
        }
        const gcounti = setting.gcount
        const gcount = gcounti.prem
        const remainingTimeMs = ms(expiration - Date.now())
        if (remainingTimeMs <= 0) return
        const mbps = randomNomor(99, 999)
        const reqh = randomNomor(1, 100)
        Lyrra.sendTextWithMentions(m.chat, `Berhasil menambahkan premium selama ${args[1]} untuk @${users.replace(/[^0-9]/g, '')}`, m)
        db.data.users[users].limit += gcount
        await Lyrra.sendMessage(users, {
          text: `*</> VIP USER </>*

*Subscribe Info* :
- User : @${users.split("@")[0]}
- Expired : ${remainingTimeMs.days} Days
- Countdown : ${remainingTimeMs.days} Days, ${remainingTimeMs.hours} Hours, ${remainingTimeMs.minutes} Minutes.

*Benefit Info* :
- Download : ${mbps} MB++
- Limit : Unlimited
- Request : ${reqh}/s
- VIP Access : Unlocked
- User Priority : Unlocked`,
          contextInfo: {
            mentionedJid: [users],
            forwardingScore: 9999,
            isForwarded: false,
            externalAdReply: {
              title: "PREMIUM USER 💳",
              body: 'Unlock Premium Acsess',
              previewType: "PHOTO",
              thumbnailUrl: "https://pomf2.lain.la/f/dynqtljb.jpg",
              sourceUrl: "-",
              mediaType: 1,
              renderLargerThumbnail: false
            }
          }
        }, {
          quoted: null
        })
      } catch (err) {
        console.error(err);
        m.reply(`❌ Terjadi kesalahan: ${err.message || err}`);
      }
    }
    break

    case 'delprem':
    case 'delpremium': {
      if (!isOwner) return onlyOwn();
      if (!args[0]) return m.reply(`Contoh: ${p_c} tag/kutip`);

      let users = m.mentionedJid[0] ?
        m.mentionedJid[0] :
        m.quoted ?
        m.quoted.sender :
        q.split('|')[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net';

      if (!users.includes('@s.whatsapp.net')) {
        users += '@s.whatsapp.net';
      }

      const index = _prem.getPremPosition(users, prem);
      if (index === -1) return m.reply('User tidak ditemukan di daftar premium!');

      prem.splice(index, 1);
      fs.writeFileSync('./data/default-db/premium.json', JSON.stringify(prem, null, 2));
      m.reply('Berhasil menghapus premium');
    }
    break

    case 'cekpremuser':
    case 'cekuserprem':
    case 'checkprem':
    case 'cekprem': {
      let senderId = m.sender;
      if (!senderId.includes('@s.whatsapp.net')) {
        senderId += '@s.whatsapp.net';
      }

      const isPrem = _prem.checkPremUser(senderId, prem);
      if (!isPrem) return m.reply(`Kamu tidak memiliki akses premium.`);

      const expiration = _prem.getPremExpired(senderId, prem);
      if (expiration === 'Permanen') {
        return m.reply(`Premium kamu permanen.`);
      }

      const remainingTimeMs = ms(expiration - Date.now())
      if (remainingTimeMs <= 0) return m.reply(`Masa premium kamu sudah habis.`);

      m.reply(`Premium akan habis dalam ${remainingTimeMs.days} hari, ${remainingTimeMs.hours} jam, ${remainingTimeMs.minutes} menit.`);
    }
    break

    case 'listprem':
    case 'listpremium':
    case 'listpremiums': {
      if (!isOwner) return onlyOwn()
      let message = 'List premium bot:\n\n'
      for (const entry of prem) {
        message += `User: @${entry.id.replace(/[^0-9]/g, '')}\n`
        if (entry.expired === 'Permanen') {
          message += 'Expired: Permanen\n\n'
        } else {
          const remainingTime = ms(entry.expired - Date.now())
          message += `Expired: ${remainingTime.days} hari, ${remainingTime.hours} jam, ${remainingTime.minutes} menit\n\n`
        }
      }
      Lyrra.sendTextWithMentions(m.chat, message, m)
    }
    break

    case 'addproduk': {
      if (!isOwner && !isReseller) return onlyOr()
      if (!text.includes(',')) return m.reply(`Contoh: ${p_c} nama_produk, harga, stok`)
      const [productName, price, stock] = args.join(' ').split(',').map(item => item.trim())
      const harga = parseInt(price, 10)
      const jumlahStok = parseInt(stock, 10)
      if (!productName || isNaN(harga) || isNaN(jumlahStok)) {
        m.reply('Format tidak valid. Pastikan untuk memasukkan nama produk, harga, dan jumlah stok.')
      } else {
        const productExists = cekProduknye(productName)
        if (productExists) {
          m.reply(`Produk dengan nama "${productName}" sudah ada.`)
        } else {
          addprodukzz(productName, harga, jumlahStok)
          m.reply(`Produk "${productName}" telah ditambahkan dengan harga ${toRupiah(harga)} dan stok sebanyak ${jumlahStok} unit.`)
        }
      }
    }
    break

    case 'hapusproduk':
    case 'hapusproduct':
    case 'deleteproduct':
    case 'delproduct':
    case 'deleteproduk':
    case 'delproduk': {
      if (!isOwner && !isReseller) return onlyOr()
      if (!text) return m.reply(`Contoh: ${p_c} nama_produk`)
      const productName = text.trim()
      if (!productName) {
        m.reply('Nama produk tidak valid.')
      } else {
        const productExists = cekProduknye(productName)
        if (productExists) {
          delprodukzz(productName)
          m.reply(`Produk "${productName}" telah dihapus.`)
        } else {
          m.reply(`Produk "${productName}" tidak ditemukan.`)
        }
      }
    }
    break

    case 'produkupdate':
    case 'productupdate':
    case 'updateproduct':
    case 'updateproduk': {
      if (!isOwner && !isReseller) return onlyOr()
      if (!text.includes(',')) return m.reply(`Contoh: ${p_c} nama_produk, harga, stok`)
      const [productName, price, stock] = args.join(' ').split(',').map(item => item.trim())
      const harga = parseInt(price, 10)
      const jumlahStok = parseInt(stock, 10)
      if (!productName || isNaN(harga) || isNaN(jumlahStok)) {
        m.reply('Format tidak valid. Pastikan untuk memasukkan nama produk, harga, dan jumlah stok.')
      } else {
        const productExists = cekProduknye(productName)
        if (productExists) {
          updprodukzz(productName, harga, jumlahStok)
          m.reply(`Produk "${productName}" telah diperbarui dengan harga ${toRupiah(harga)} dan stok sebanyak ${jumlahStok} unit.`)
        } else {
          m.reply(`Produk "${productName}" tidak ditemukan.`)
        }
      }
    }
    break

case 'productlist':
case 'produklist':
case 'listproduct':
case 'listproduk': {
  const products = getprodukdb();
  const discounts = getDisczz();
  
  if (products.length === 0) {
    return m.reply('Tidak ada produk yang tersedia saat ini.');
  }

  let teks = `🛒 *Daftar Produk Tersedia* 🛒\n📌 Total Produk: ${products.length}\n\nPilih salah satu produk di bawah untuk melihat detail dan melakukan pemesanan.\n`;
  
  let rows = products.map(product => {
    const discount = discounts.find(d => d.produk.toLowerCase() === product.nama.toLowerCase());
    let hargaAsli = toRupiah(product.harga);
    let hargaDiskon = discount ? toRupiah(discount.harga_diskon) : hargaAsli;
    let discountText = discount ? ` ~Rp${hargaAsli}~ ➝ Rp${hargaDiskon} (${persenDiskonnya(product.harga, discount.harga_diskon)}%)` : `Rp${hargaAsli}`;
    
    return {
      title: product.nama,
      description: `💰 Harga: ${discountText}\n📦 Stok: ${product.stok} unit`,
      id: `${_p}beliproduk ${product.nama.toLowerCase()}, 1`
    };
  });

  let thumbbs = './media/payment.jpg';
  if (!fs.existsSync(thumb)) {
    thumbbs = './media/thumbnail1.jpg';
  }

  try {
    await Lyrra.sendMessage(m.chat, {
      document: {
        url: thumb
      },
      mimetype: "image/png",
      pageCount: 2025,
      fileName: `${botname}`,
      fileLength: 100000000000000,
      jpegThumbnail: fs.readFileSync(thumbbs),
      caption: teks,
      buttons: [{
        buttonId: 'action',
        buttonText: {
          displayText: 'Pilih Produk'
        },
        type: 4,
        nativeFlowInfo: {
          name: 'single_select',
          paramsJson: JSON.stringify({
            title: 'List Produk Tersedia',
            sections: [{
              title: "Pilih Product Untuk Membeli",
              rows: rows
            }]
          })
        }
      }],
      footer: `${wm}`,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: chjid + "@newsletter",
          newsletterName: `${wm}`,
          serverMessageId: 143
        },
        businessMessageForwardInfo: {
          businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
        }
      },
      headerType: 1,
      viewOnce: true
    }, {
      quoted: m
    });
  } catch (error) {
    console.error('Error sending product list:', error);
    let fallbackText = `*Daftar Produk*\n\n` + 
      products.map(p => `➤ ${p.nama}\n   💰 Rp${toRupiah(p.harga)}\n   📦 Stok: ${p.stok}`).join('\n\n');
    m.reply(fallbackText);
  }
}
break

    case 'discount':
    case 'diskon': {
      if (!isOwner && !isReseller) return onlyOr()
      if (!text.includes(',')) return m.reply(`Contoh: ${p_c} nama_produk, harga_diskon, tgl-bln-th`)
      const [productName, discountPriceStr, expirationDate] = args.join(' ').split(',').map(item => item.trim())
      const discountPrice = parseInt(discountPriceStr, 10)
      if (!productName || isNaN(discountPrice) || !expirationDate) {
        m.reply('Format tidak valid. Pastikan untuk memasukkan nama produk, harga diskon, dan tanggal kadaluarsa yang valid.')
      } else {
        const products = getprodukDariFile()
        const product = products.find(p => p.nama.toLowerCase() === productName.toLowerCase())
        if (!product) {
          m.reply(`Produk "${productName}" tidak ditemukan.`)
        } else {
          addDisczz(productName, discountPrice, expirationDate)
          const discountPercentage = persenDiskonnya(product.harga, discountPrice)
          m.reply(`Diskon untuk produk "${productName}" berhasil ditambahkan.\nHarga diskon: Rp${discountPrice}, Berlaku hingga: ${expirationDate} (${discountPercentage}%)`)
        }
      }
    }
    break

    case 'restock':
    case 'restok': {
      if (!isOwner && !isReseller) return onlyOr()
      if (!text.includes(',')) return m.reply(`Contoh: ${p_c} nama_produk, jumlah_stok`)
      const [productName, stockStr] = args.join(' ').split(',').map(item => item.trim())
      const jumlahStok = parseInt(stockStr, 10)
      if (!productName || isNaN(jumlahStok) || jumlahStok <= 0) {
        m.reply('Format tidak valid. Pastikan untuk memasukkan nama produk dan jumlah stok yang valid.')
      } else {
        const restockedProduct = ngerestokk(productName, jumlahStok)
        if (restockedProduct) {
          m.reply(`Stok produk "${restockedProduct.nama}" telah ditambahkan. Stok saat ini: ${restockedProduct.stok} unit.`)
        } else {
          m.reply(`Produk "${productName}" tidak ditemukan.`)
        }
      }
    }
    break

    case 'buyproduct':
    case 'beliproduct':
    case 'buyproduk':
    case 'beliproduk': {
      if (!isPc) return onlyPrivat()
      if (!text.includes(',')) return m.reply(`Contoh: ${p_c} nama_produk, jumlah`)
      const [productName, quantity] = args.join(' ').split(',').map(item => item.trim())
      const jumlah = parseInt(quantity, 10)
      if (!productName || isNaN(jumlah) || jumlah <= 0) {
        return m.reply('Format tidak valid. Pastikan untuk memasukkan nama produk dan jumlah yang valid.')
      }
      const products = getprodukDariFile();
      const product = products.find(p => p.nama.toLowerCase() === productName.toLowerCase())

      if (!product) {
        return m.reply(`Produk "${productName}" tidak ditemukan.`)
      }
      if (product.stok < jumlah) {
        return m.reply(`Stok untuk produk "${productName}" tidak mencukupi. Tersisa ${product.stok} unit.`)
      }
      const discounts = getDisczz()
      const discount = discounts.find(d => d.produk.toLowerCase() === product.nama.toLowerCase())
      const totalHarga = discount ? discount.harga_diskon * jumlah : product.harga * jumlah
      const transactionId = cIdTrnya()
      m.reply(`
Kamu membeli ${jumlah} produk "${productName}"
Total harga: ${toRupiah(totalHarga)}

Silahkan transfer terlebih dahulu ketik 
${_p}payment untuk melihat metode 
pembayaran yang tersedia

Ketik ini...
${_p}confirm ${transactionId}
${_p}cancel ${transactionId}
`)
      saveTrnye({
        id: transactionId,
        productName,
        jumlah,
        totalHarga,
        status: 'process',
        buyer: m.sender
      })
      product.stok -= jumlah
      simpenProduknya(products)
    }
    break

    case 'konfirm':
    case 'confirm': {
      if (!isPc) return onlyPrivat()
      const transactionId = text.trim().split(' ')[0]
      if (!transactionId) return m.reply(`Contoh: ${p_c} id_transaksi`)
      const transaction = getTrId(transactionId)
      if (!transaction) {
        return m.reply(`Transaksi dengan ID "${transactionId}" tidak ditemukan.`)
      }
      if (transaction.status !== 'process') {
        return m.reply('ID transaksi tidak valid atau tidak dalam status menunggu bukti transfer.')
      }
      transaction.status = 'success'
      simpenSmTr(getSmTr().map(t => t.id === transactionId ? transaction : t))
      m.reply(`Transaksi dengan ID "${transactionId}" telah berhasil dikonfirmasi.`)
    }
    break

    case 'cancel': {
      if (!isPc) return onlyPrivat()
      const transactionId = text.trim().split(' ')[0]
      if (!transactionId) return m.reply(`Contoh: ${p_c} id_transaksi`)
      const transaction = getTrId(transactionId)
      if (!transaction) {
        return m.reply(`Transaksi dengan ID "${transactionId}" tidak ditemukan`)
      }
      if (transaction.status !== 'process') {
        return m.reply('ID transaksi tidak valid atau tidak dalam status menunggu bukti transfer')
      }

      const products = getprodukDariFile()
      const product = products.find(p => p.nama.toLowerCase() === transaction.productName.toLowerCase())
      if (product) {
        product.stok += transaction.jumlah
        simpenProduknya(products)
      }
      transaction.status = 'canceled'
      simpenSmTr(getSmTr().map(t => t.id === transactionId ? transaction : t))
      m.reply(`Transaksi dengan ID "${transactionId}" telah dibatalkan`)
    }
    break

    case 'thistory': {
      if (!isPc) return onlyPrivat()
      const option = text.trim().split(' ')[0]
      const userId = m.sender
      const transactions = getSmTr()
      if (option === 'all') {
        const userTransactions = transactions.filter(t => t.buyer === userId)

        if (userTransactions.length === 0) {
          m.reply('Kamu belum memiliki transaksi')
        } else {
          let message = 'Riwayat Transaksi Kamu:\n\n'
          userTransactions.forEach(transaction => {
            message += `ID: ${transaction.id}\nProduk: ${transaction.productName}\nJumlah: ${transaction.jumlah}\nTotal Harga: ${toRupiah(transaction.totalHarga)}\nStatus: ${transaction.status}\n\n`
          })
          m.reply(message)
        }
      } else if (option) {
        const transaction = getTrId(option)
        if (!transaction) {
          m.reply(`Transaksi dengan ID "${option}" tidak ditemukan`);
        } else if (transaction.buyer !== userId) {
          m.reply('Kamu tidak memiliki akses ke transaksi ini')
        } else {
          const message = `ID: ${transaction.id}\nProduk: ${transaction.productName}\nJumlah: ${transaction.jumlah}\nTotal Harga: ${toRupiah(transaction.totalHarga)}\nStatus: ${transaction.status}`
          m.reply(message)
        }
      } else {
        m.reply(`Contoh: ${p_c} all atau id_transaksi`)
      }
    }
    break

    case 'batalbeli': {
      const transactionPath = './data/gateway-db/gateway/' + m.sender.split("@")[0] + '.json'

      if (!fs.existsSync(transactionPath)) return m.reply("Tidak ada transaksi yang sedang berlangsung.")

      fs.unlinkSync(transactionPath)
      m.reply('Transaksi telah dibatalkan.')
    }
    break

    case 'anonymous':
    case 'anonymouschat': {
      if (!isPc) return onlyPrivat()
      m.reply(`Hai ${db.data.users[m.sender].nama} selamat datang di Anonymous chat!\n\nKetik ${_p}start untuk memulai sesi chat`)
    }
    break

    case 'start':
    case 'mulai': {
      if (!isPc) return onlyPrivat()
      this.anonymous = this.anonymous ? this.anonymous : {}
      if (Object.values(this.anonymous).find(room => room.check(m.sender))) {
        m.reply(`Kamu masih berada di dalam sesi Anonymous!\n\n${_p}leave untuk keluar dari sesi chat`)
        return false
      }
      let room = Object.values(this.anonymous).find(room => room.state === 'WAITING' && !room.check(m.sender))
      if (room) {
        Lyrra.sendMessage(room.a, {
          text: `Berhasil menemukan partner. Sekarang kamu dapat mengirim pesan!\n\n${_p}skip untuk mencari partner lain\n${_p}leave untuk menghentikan sesi chat`
        })
        room.b = m.sender
        room.state = 'CHATTING'
        m.reply(`Berhasil menemukan partner. Sekarang kamu dapat mengirim pesan!\n\n${_p}skip untuk mencari partner lain\n${_p}leave untuk menghentikan sesi chat`)
      } else {
        let id = +new Date
        this.anonymous[id] = {
          id,
          a: m.sender,
          b: '',
          state: 'WAITING',
          check: function (who = '') {
            return [this.a, this.b].includes(who)
          },
          other: function (who = '') {
            return who === this.a ? this.b : who === this.b ? this.a : ''
          },
        }
        m.reply(`Menunggu partner...`)
      }
    }
    break

    case 'leave':
    case 'keluar': {
      if (!isPc) return onlyPrivat()
      this.anonymous = this.anonymous ? this.anonymous : {}
      let room = Object.values(this.anonymous).find(room => room.check(m.sender))
      if (!room) {
        m.reply(`Kamu sedang tidak berada di sesi Anonymous!\n\n${_p}start untuk memulai sesi chat`)
        return false
      }
      m.reply('Berhasil keluar dari Anonymous chat!')
      let other = room.other(m.sender)
      if (other) await Lyrra.sendText(other, `Partner telah meninggalkan sesi Anonymous!`, m)
      delete this.anonymous[room.id]
      if (command === 'leave')
        break
    }
    break

    case 'skip':
    case 'next':
    case 'lanjut': {
      if (!isPc) return onlyPrivat()
      this.anonymous = this.anonymous ? this.anonymous : {}
      let romeo = Object.values(this.anonymous).find(room => room.check(m.sender))
      if (!romeo) {
        m.reply(`Kamu sedang tidak berada di sesi Anonymous!\n\n${_p}start untuk mencari partner`)
        return false
      }
      let other = romeo.other(m.sender)
      if (other) await Lyrra.sendText(other, `Partner telah meninggalkan sesi Anonymous!`, m)
      delete this.anonymous[romeo.id]
      let room = Object.values(this.anonymous).find(room => room.state === 'WAITING' && !room.check(m.sender))
      if (room) {
        Lyrra.sendMessage(room.a, {
          text: `Berhasil menemukan partner. Sekarang kamu dapat mengirim pesan!\n\n${_p}skip untuk mencari partner lain\n${_p}leave untuk menghentikan sesi chat`
        })
        room.b = m.sender
        room.state = 'CHATTING'
        m.reply(`Berhasil menemukan partner. Sekarang kamu dapat mengirim pesan!\n\n${_p}skip untuk mencari partner lain\n${_p}leave untuk menghentikan sesi chat`)
      } else {
        let id = +new Date
        this.anonymous[id] = {
          id,
          a: m.sender,
          b: '',
          state: 'WAITING',
          check: function (who = '') {
            return [this.a, this.b].includes(who)
          },
          other: function (who = '') {
            return who === this.a ? this.b : who === this.b ? this.a : ''
          },
        }
        m.reply(`Menunggu partner...`)
      }
    }
    break

    case 'confes':
    case 'menfes':
    case 'confess':
    case 'menfess': {
      this.menfes = this.menfes ? this.menfes : {}
      const roof = Object.values(this.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender))
      if (m.isGroup) return onlyPrivat()
      if (roof) return m.reply("Kamu masih berada dalam sesi menfess")
      if (!text) return m.reply(`Contoh: ${p_c} Nama, 628xx, Menfes nih\n`)
      if (!text.includes(',')) return m.reply(`Contoh: ${p_c} Nama, 628xxx, Menfes nih\n`)

      const parts = text.split(',').map(item => item.trim());
      if (parts.length < 3) return m.reply(`Format salah! Contoh: ${p_c} Nama, 628xx, Menfes nih\n`);

      const [namaNya, nomorNyaRaw, pesanNya] = parts;
      let nomorNya = nomorNyaRaw.startsWith('0') ? '62' + nomorNyaRaw.slice(1) : nomorNyaRaw;

      if (isNaN(nomorNya)) return m.reply(`Nomor tidak valid! Contoh: ${p_c} Nama, 628xx, Menfes nih\n`);

      const yoi = `Dari: ${namaNya}\nPesan: ${pesanNya}\n\nKlik *Terima* untuk menerima menfess\nKlik *Tolak* untuk menolak menfess`;
      const id = m.sender;

      this.menfes[id] = {
        id,
        a: m.sender,
        b: `${nomorNya}@s.whatsapp.net`,
        state: 'WAITING'
      };

      try {
        await Lyrra.sendMessage(`${nomorNya}@s.whatsapp.net`, {
          text: yoi,
          footer: `${wm}`,
          buttons: [{
              buttonId: `${_p}balasmenfes`,
              buttonText: {
                displayText: 'Terima'
              },
              type: 1
            },
            {
              buttonId: `${_p}tolakmenfes`,
              buttonText: {
                displayText: 'Tolak'
              },
              type: 1
            }
          ],
          headerType: 1,
          viewOnce: true
        })
        m.reply('Pesan berhasil dikirim ke nomor tujuan. Semoga dibales ya')
      } catch (error) {
        console.error(error)
        m.reply('Pesan gagal dikirim. Periksa kembali nomor tujuan.')
      }
    }
    break

    case 'balasconfes':
    case 'balasmenfes':
    case 'balasconfess':
    case 'balasmenfess': {
      roof = Object.values(this.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender))
      if (!roof) return m.reply("Belum ada sesi menfess")
      find = Object.values(this.menfes).find(menpes => menpes.state == 'WAITING')
      let room = Object.values(this.menfes).find(room => [room.a, room.b].includes(m.sender) && room.state === 'WAITING')
      let other = [room.a, room.b].find(user => user !== m.sender)
      find.b = m.sender
      find.state = 'CHATTING'
      this.menfes[find.id] = {
        ...find
      }
      await Lyrra.sendMessage(other, {
        text: `_@${m.sender.split("@")[0]} telah menerima menfess kamu, sekarang kamu bisa chat lewat bot ini_\n\n*NOTE:*\nJika ingin berhenti dari menfess, silahkan ketik .stopmenfess`,
        mentions: [m.sender]
      })
      Lyrra.sendMessage(m.chat, {
        text: `_Menfess telah diterima, sekarang kamu bisa chatan lewat bot ini_\n\n*NOTE:*\nJika ingin berhenti dari menfess, silahkan ketik .stopmenfess`
      })
    }
    break

    case 'tolakconfes':
    case 'tolakmenfes':
    case 'tolakconfess':
    case 'tolakmenfess': {
      roof = Object.values(this.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender))
      if (!roof) return m.reply("Belum ada sesi menfess")
      let room = Object.values(this.menfes).find(room => [room.a, room.b].includes(m.sender) && room.state === 'WAITING')
      let other = [room.a, room.b].find(user => user !== m.sender)
      find = Object.values(this.menfes).find(menpes => menpes.state == 'WAITING')
      Lyrra.sendMessage(other, {
        text: `_Uppsss... @${m.sender.split("@")[0]} Menolak menfess kamu_`,
        mentions: [m.sender]
      })
      m.reply("Menfess berhasil di tolak")
      delete this.menfes[roof.id]
    }
    break

    case 'stopconfes':
    case 'stopmenfes':
    case 'stopconfess':
    case 'stopmenfess': {
      find = Object.values(this.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender))
      if (!find) return m.reply("Belum ada sesi menfess")
      const to = find.a == m.sender ? find.b : find.a
      Lyrra.sendMessage(to, {
        text: `Teman chat telah menghentikan menfess ini`,
        mentions: [m.sender]
      })
      m.reply("Menfess berhasil di stop")
      delete this.menfes[find.id]
    }
    break

    // === Cpanel Menu

    case 'listserver': {
      if (!isOwner) return onlyOwn()
      let page = args[0] ? args[0] : '1';
      let f = await fetch(domain + "api/application/servers?page=" + page, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      });
      let res = await f.json();
      let servers = res.data;
      let sections = [];
      let messageText = "Berikut list server nya:\n\n";
      for (let server of servers) {
        let s = server.attributes;
        let f3 = await fetch(domain + "api/client/servers/" + s.uuid.split`-` [0] + "/resources", {
          "method": "GET",
          "headers": {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "Authorization": "Bearer " + capikey
          }
        });
        let data = await f3.json();
        let status = data.attributes ? data.attributes.current_state : s.status;
        messageText += `ID server: ${s.id}\n`;
        messageText += `Nama server: ${s.name}\n`;
        messageText += `Status: ${status}\n\n`;
      }
      messageText += `Halaman: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
      messageText += `Total server: ${res.meta.pagination.count}`;
      await Lyrra.sendMessage(m.chat, {
        text: messageText
      }, {
        quoted: m
      });
      if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
        m.reply(`Contoh: ${p_c} ${res.meta.pagination.current_page + 1} untuk melihat halaman selanjutnya`);
      }
    }
    break

    case 'delserver': {
      if (!isOwner) return onlyOwn()
      let srv = args[0]
      if (!srv) return m.reply('ID nya mana?')
      let f = await fetch(domain + "api/application/servers/" + srv, {
        "method": "DELETE",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        }
      })
      let res = f.ok ? {
        errors: null
      } : await f.json()
      if (res.errors) return m.reply('Server tidak ditemukan!')
      m.reply('Sukses menghapus server!')
    }
    break

    case 'listuser': {
      if (!isOwner) return onlyOwn()
      let page = args[0] ? args[0] : '1';
      let f = await fetch(domain + "api/application/users?page=" + page, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      });
      let res = await f.json();
      let users = res.data;
      let messageText = "Berikut list user nya:\n\n";
      for (let user of users) {
        let u = user.attributes;
        messageText += `ID: ${u.id} - Status: ${u.attributes?.user?.server_limit === null ? 'Tidak aktif' : 'Aktif'}\n`;
        messageText += `${u.username}\n`;
        messageText += `${u.first_name} ${u.last_name}\n\n`;
      }
      messageText += `Halaman: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
      messageText += `Total user: ${res.meta.pagination.count}`;
      await Lyrra.sendMessage(m.chat, {
        text: messageText
      }, {
        quoted: m
      });
      if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
        m.reply(`Contoh: ${p_c} ${res.meta.pagination.current_page + 1} untuk melihat halaman selanjutnya`);
      }
    }
    break

    case 'deluser': {
      if (!isOwner) return onlyOwn()
      let usr = args[0]
      if (!usr) return m.reply('ID nya mana?')
      let f = await fetch(domain + "api/application/users/" + usr, {
        "method": "DELETE",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      let res = f.ok ? {
        errors: null
      } : await f.json()
      if (res.errors) return m.reply('User tidak ditemukan!')
      m.reply('Sukses menghapus user!')
    }
    break

    case 'addadmin': {
      if (!isOwner) return onlyOwn()
      let t = text.split(',');
      if (t.length < 3) return m.reply(`Contoh: ${p_c} email,username,name,nomor`);
      let email = t[0];
      let username = t[1];
      let name = t[2];
      let u = m.quoted ? m.quoted.sender : t[3] ? t[3].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      if (!u) return m.reply(`Contoh: ${p_c} email,username,name,nomor`);
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = username + "admin"
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": name,
          "last_name": "Admin",
          "root_admin": true,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      m.reply(`${monospace("BERHASIL  CADMIN!")}
• ID: ${user.id}
• UUID: ${user.uuid}
• Email: ${user.email}

Data lainnya sudah terkirim ke
privat chat...`)
      let teksnyo = `*BERIKUT DATA ADMIN PANEL ANDA* 

• ID: ${user.id}
• UUID: ${user.uuid}
• Email: ${user.email}
• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data admin panel baik-baik`
      sendbutton(u, teksnyo, ftext)
    }
    break

    case 'deladmin': {
      if (!isOwner) return onlyOwn()
      if (!args[0]) return m.reply(`Untuk melihat ID silahkan ketik ${_p}listadmin`)
      let cek = await fetch(domain + "api/application/users?page=1", {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      let res2 = await cek.json();
      let users = res2.data;
      let getid = null
      let idadmin = null
      await users.forEach(async (e) => {
        if (e.attributes.id == args[0] && e.attributes.root_admin == true) {
          getid = e.attributes.username
          idadmin = e.attributes.id
          let delusr = await fetch(domain + `api/application/users/${idadmin}`, {
            "method": "DELETE",
            "headers": {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "Authorization": "Bearer " + apikey
            }
          })
          let res = delusr.ok ? {
            errors: null
          } : await delusr.json()
        }
      })
      if (idadmin == null) return m.reply("ID admin tidak ditemukan!")
      m.reply(`Berhasil del admin panel *${getid}*`)
    }
    break

    case 'listadmin': {
      if (!isOwner) return onlyOwn()
      let page = args[0] ? args[0] : '1';
      let f = await fetch(domain + "api/application/users?page=" + page, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      });
      let res = await f.json();
      let users = res.data;
      let messageText = "Berikut List Admin:\n\n";
      for (let user of users) {
        let u = user.attributes;
        if (u.root_admin) {
          messageText += `ID: ${u.id} - Status: ${u.attributes?.user?.server_limit === null ? 'Inactive' : 'Active'}\n`;
          messageText += `${u.username}\n`;
          messageText += `${u.first_name} ${u.last_name}\n\n`;
        }
      }
      messageText += `Halaman: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
      messageText += `Total: ${res.meta.pagination.count}`;
      await Lyrra.sendMessage(m.chat, {
        text: messageText
      }, {
        quoted: m
      });
      if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
        m.reply(`Contoh: ${p_c} ${res.meta.pagination.current_page + 1} untuk melihat halaman selanjutnya`);
      }
    }
    break
    
    case 'cpanel': {
    if (!isOwner && !isReseller) return onlyOr()
    const t = text.split('-');
    if (t.length < 2) return m.reply(`Format: ${_p}cpanel username-nomor\nContoh: ${_p}cpanel johndoe-628123456789`);
    
    const [username, nomor] = t;
    if (!username || !nomor) return m.reply(`Format salah! Contoh: ${_p}cpanel username-nomor`);
    Lyrra.sendMessage(
  m.chat, {
    document: {
      url: thumb
    },
    mimetype: "image/png",
    pageCount: 2025,
    fileName: `${botname}`,
    fileLength: 100000000000000,
    jpegThumbnail: fs.readFileSync('./media/thumbnail1.jpg'),
    caption: `📌 *Pembuatan CPanel* 📌\n\nUntuk: ${username}\nNomor: ${nomor}\n\nSilakan pilih paket:`,
    contextInfo: {
      mentionedJid: [m.sender],
      forwardingScore: 999,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
        newsletterJid: chjid + "@newsletter",
        newsletterName: `${wm}`,
        serverMessageId: 143
      },
      businessMessageForwardInfo: {
        businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
      }
    },
    footer: `${wm}`,
    buttons: [{
      buttonId: 'action',
      buttonText: {
        displayText: 'Pilih Paket CPanel'
      },
      type: 4,
      nativeFlowInfo: {
        name: 'single_select',
        paramsJson: JSON.stringify({
          title: 'PILIH CPANEL',
          sections: [
            {
              title: "Server 1",
              highlight_label: "SERVER 1 RESOURCES",
              rows: [
                {
                  title: 'V1-1GB',
                  description: "RAM 1GB | Disk 1GB",
                  id: `${_p}createcpanel1 1gb-${username}-${nomor}`
                },
                {
                  title: 'V1-2GB',
                  description: "RAM 2GB | Disk 2GB",
                  id: `${_p}createcpanel1 2gb-${username}-${nomor}`
                },
                {
                  title: 'V1-3GB',
                  description: "RAM 3GB | Disk 3GB",
                  id: `${_p}createcpanel1 3gb-${username}-${nomor}`
                },
                {
                  title: 'V1-4GB',
                  description: "RAM 4GB | Disk 4GB",
                  id: `${_p}createcpanel1 4gb-${username}-${nomor}`
                },
                {
                  title: 'V1-5GB',
                  description: "RAM 5GB | Disk 5GB",
                  id: `${_p}createcpanel1 5gb-${username}-${nomor}`
                },
                {
                  title: 'V1-6GB',
                  description: "RAM 6GB | Disk 6GB",
                  id: `${_p}createcpanel1 6gb-${username}-${nomor}`
                },
                {
                  title: 'V1-7GB',
                  description: "RAM 7GB | Disk 7GB",
                  id: `${_p}createcpanel1 7gb-${username}-${nomor}`
                },
                {
                  title: 'V1-8GB',
                  description: "RAM 8GB | Disk 8GB",
                  id: `${_p}createcpanel1 8gb-${username}-${nomor}`
                },
                {
                  title: 'V1-9GB',
                  description: "RAM 9GB | Disk 9GB",
                  id: `${_p}createcpanel1 9gb-${username}-${nomor}`
                },
                {
                  title: 'V1-10GB',
                  description: "RAM 10GB | Disk 10GB",
                  id: `${_p}createcpanel1 10gb-${username}-${nomor}`
                },
                {
                  title: 'V1-UNLIMITED',
                  description: "Unlimited Resources",
                  id: `${_p}createcpanel1 unli-${username}-${nomor}`
                }
              ]
            },
            {
              title: "Server 2",
              highlight_label: "SERVER 2 RESOURCES",
              rows: [
                {
                  title: 'V2-1GB',
                  description: "RAM 1GB | Disk 1GB",
                  id: `${_p}createcpanel2 1gb-${username}-${nomor}`
                },
                {
                  title: 'V2-2GB',
                  description: "RAM 2GB | Disk 2GB",
                  id: `${_p}createcpanel2 2gb-${username}-${nomor}`
                },
                {
                  title: 'V2-3GB',
                  description: "RAM 3GB | Disk 3GB",
                  id: `${_p}createcpanel2 3gb-${username}-${nomor}`
                },
                {
                  title: 'V2-4GB',
                  description: "RAM 4GB | Disk 4GB",
                  id: `${_p}createcpanel2 4gb-${username}-${nomor}`
                },
                {
                  title: 'V2-5GB',
                  description: "RAM 5GB | Disk 5GB",
                  id: `${_p}createcpanel2 5gb-${username}-${nomor}`
                },
                {
                  title: 'V2-6GB',
                  description: "RAM 6GB | Disk 6GB",
                  id: `${_p}createcpanel2 6gb-${username}-${nomor}`
                },
                {
                  title: 'V2-7GB',
                  description: "RAM 7GB | Disk 7GB",
                  id: `${_p}createcpanel2 7gb-${username}-${nomor}`
                },
                {
                  title: 'V2-8GB',
                  description: "RAM 8GB | Disk 8GB",
                  id: `${_p}createcpanel2 8gb-${username}-${nomor}`
                },
                {
                  title: 'V2-9GB',
                  description: "RAM 9GB | Disk 9GB",
                  id: `${_p}createcpanel2 9gb-${username}-${nomor}`
                },
                {
                  title: 'V2-10GB',
                  description: "RAM 10GB | Disk 10GB",
                  id: `${_p}createcpanel2 10gb-${username}-${nomor}`
                },
                {
                  title: 'V2-UNLIMITED',
                  description: "Unlimited Resources",
                  id: `${_p}createcpanel2 unli-${username}-${nomor}`
                }
              ]
            },
            {
              title: "Server 3",
              highlight_label: "SERVER 3 RESOURCES",
              rows: [
                {
                  title: 'V3-1GB',
                  description: "RAM 1GB | Disk 1GB",
                  id: `${_p}createcpanel3 1gb-${username}-${nomor}`
                },
                {
                  title: 'V3-2GB',
                  description: "RAM 2GB | Disk 2GB",
                  id: `${_p}createcpanel3 2gb-${username}-${nomor}`
                },
                {
                  title: 'V3-3GB',
                  description: "RAM 3GB | Disk 3GB",
                  id: `${_p}createcpanel3 3gb-${username}-${nomor}`
                },
                {
                  title: 'V3-4GB',
                  description: "RAM 4GB | Disk 4GB",
                  id: `${_p}createcpanel3 4gb-${username}-${nomor}`
                },
                {
                  title: 'V3-5GB',
                  description: "RAM 5GB | Disk 5GB",
                  id: `${_p}createcpanel3 5gb-${username}-${nomor}`
                },
                {
                  title: 'V3-6GB',
                  description: "RAM 6GB | Disk 6GB",
                  id: `${_p}createcpanel3 6gb-${username}-${nomor}`
                },
                {
                  title: 'V3-7GB',
                  description: "RAM 7GB | Disk 7GB",
                  id: `${_p}createcpanel3 7gb-${username}-${nomor}`
                },
                {
                  title: 'V3-8GB',
                  description: "RAM 8GB | Disk 8GB",
                  id: `${_p}createcpanel3 8gb-${username}-${nomor}`
                },
                {
                  title: 'V3-9GB',
                  description: "RAM 9GB | Disk 9GB",
                  id: `${_p}createcpanel3 9gb-${username}-${nomor}`
                },
                {
                  title: 'V3-10GB',
                  description: "RAM 10GB | Disk 10GB",
                  id: `${_p}createcpanel3 10gb-${username}-${nomor}`
                },
                {
                  title: 'V3-UNLIMITED',
                  description: "Unlimited Resources",
                  id: `${_p}createcpanel3 unli-${username}-${nomor}`
                }
              ]
            },
            {
              title: "Server 4",
              highlight_label: "SERVER 4 RESOURCES",
              rows: [
                {
                  title: 'V4-1GB',
                  description: "RAM 1GB | Disk 1GB",
                  id: `${_p}createcpanel4 1gb-${username}-${nomor}`
                },
                {
                  title: 'V4-2GB',
                  description: "RAM 2GB | Disk 2GB",
                  id: `${_p}createcpanel4 2gb-${username}-${nomor}`
                },
                {
                  title: 'V4-3GB',
                  description: "RAM 3GB | Disk 3GB",
                  id: `${_p}createcpanel4 3gb-${username}-${nomor}`
                },
                {
                  title: 'V4-4GB',
                  description: "RAM 4GB | Disk 4GB",
                  id: `${_p}createcpanel4 4gb-${username}-${nomor}`
                },
                {
                  title: 'V4-5GB',
                  description: "RAM 5GB | Disk 5GB",
                  id: `${_p}createcpanel4 5gb-${username}-${nomor}`
                },
                {
                  title: 'V4-6GB',
                  description: "RAM 6GB | Disk 6GB",
                  id: `${_p}createcpanel4 6gb-${username}-${nomor}`
                },
                {
                  title: 'V4-7GB',
                  description: "RAM 7GB | Disk 7GB",
                  id: `${_p}createcpanel4 7gb-${username}-${nomor}`
                },
                {
                  title: 'V4-8GB',
                  description: "RAM 8GB | Disk 8GB",
                  id: `${_p}createcpanel4 8gb-${username}-${nomor}`
                },
                {
                  title: 'V4-9GB',
                  description: "RAM 9GB | Disk 9GB",
                  id: `${_p}createcpanel4 9gb-${username}-${nomor}`
                },
                {
                  title: 'V4-10GB',
                  description: "RAM 10GB | Disk 10GB",
                  id: `${_p}createcpanel4 10gb-${username}-${nomor}`
                },
                {
                  title: 'V4-UNLIMITED',
                  description: "Unlimited Resources",
                  id: `${_p}createcpanel4 unli-${username}-${nomor}`
                }
              ]
            },
            {
              title: "Server 5",
              highlight_label: "SERVER 5 RESOURCES",
              rows: [
                {
                  title: 'V5-1GB',
                  description: "RAM 1GB | Disk 1GB",
                  id: `${_p}createcpanel5 1gb-${username}-${nomor}`
                },
                {
                  title: 'V5-2GB',
                  description: "RAM 2GB | Disk 2GB",
                  id: `${_p}createcpanel5 2gb-${username}-${nomor}`
                },
                {
                  title: 'V5-3GB',
                  description: "RAM 3GB | Disk 3GB",
                  id: `${_p}createcpanel5 3gb-${username}-${nomor}`
                },
                {
                  title: 'V5-4GB',
                  description: "RAM 4GB | Disk 4GB",
                  id: `${_p}createcpanel5 4gb-${username}-${nomor}`
                },
                {
                  title: 'V5-5GB',
                  description: "RAM 5GB | Disk 5GB",
                  id: `${_p}createcpanel5 5gb-${username}-${nomor}`
                },
                {
                  title: 'V5-6GB',
                  description: "RAM 6GB | Disk 6GB",
                  id: `${_p}createcpanel5 6gb-${username}-${nomor}`
                },
                {
                  title: 'V5-7GB',
                  description: "RAM 7GB | Disk 7GB",
                  id: `${_p}createcpanel5 7gb-${username}-${nomor}`
                },
                {
                  title: 'V5-8GB',
                  description: "RAM 8GB | Disk 8GB",
                  id: `${_p}createcpanel5 8gb-${username}-${nomor}`
                },
                {
                  title: 'V5-9GB',
                  description: "RAM 9GB | Disk 9GB",
                  id: `${_p}createcpanel5 9gb-${username}-${nomor}`
                },
                {
                  title: 'V5-10GB',
                  description: "RAM 10GB | Disk 10GB",
                  id: `${_p}createcpanel5 10gb-${username}-${nomor}`
                },
                {
                  title: 'V5-UNLIMITED',
                  description: "Unlimited Resources",
                  id: `${_p}createcpanel5 unli-${username}-${nomor}`
                }
              ]
            }
          ]
        })
      }
    }],
    headerType: 1,
    viewOnce: true
  }, {
    quoted: m
  })
}
break

    case 'createcpanel1': {
      if (!isOwner && !isReseller) return onlyOr()
      const pilihanUkuran = {
        '1gb': {
          memo: 1024,
          disk: 1024,
          cpu: 30
        },
        '2gb': {
          memo: 2048,
          disk: 2048,
          cpu: 50
        },
        '3gb': {
          memo: 3072,
          disk: 3072,
          cpu: 60
        },
        '4gb': {
          memo: 4096,
          disk: 4096,
          cpu: 80
        },
        '5gb': {
          memo: 5120,
          disk: 5120,
          cpu: 90
        },
        '6gb': {
          memo: 6144,
          disk: 6144,
          cpu: 100
        },
        '7gb': {
          memo: 7168,
          disk: 7168,
          cpu: 120
        },
        '8gb': {
          memo: 8192,
          disk: 8192,
          cpu: 140
        },
        '9gb': {
          memo: 9216,
          disk: 9216,
          cpu: 150
        },
        '10gb': {
          memo: 10240,
          disk: 10240,
          cpu: 190
        },
        'unli': {
          memo: 0,
          disk: 0,
          cpu: 0
        }
      };
      const t = text.split('-');
      if (t.length < 3) {
        const pilihan = Object.keys(pilihanUkuran)
          .map((ukuran, i) => `• ${i + 1}. ${ukuran}`)
          .join('\n');
        return m.reply(`Silakan pilih ukuran disk:\n\n${pilihan}\n\nContoh: ${p_c} 1gb-username-nomer`);
      }
      const ukuran = t[0];
      if (!pilihanUkuran[ukuran]) {
        return m.reply(`Ukuran tidak valid! Pilih salah satu dari: ${Object.keys(pilihanUkuran).join(', ')}`);
      }
      const username = t[1];
      let u = t[2] ? t[2].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      if (!u) return m.reply("Nomor tidak valid! Contoh: 1gb-username-nomer");
      const {
        memo,
        disk,
        cpu
      } = pilihanUkuran[ukuran];
      const email = `${username}@gmail.com`;
      const password = randomKarakter(5);
      const userResponse = await fetch(`${domain}api/application/users`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey}`
        },
        body: JSON.stringify({
          email,
          username,
          first_name: username,
          last_name: username,
          language: "en",
          password
        })
      });
      const userData = await userResponse.json();
      if (userData.errors) return m.reply(JSON.stringify(userData.errors[0], null, 2));

      const user = userData.attributes;
      const eggResponse = await fetch(`${domain}api/application/nests/5/eggs/${global.eggs}`, {
        method: 'GET',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey}`
        }
      });
      const eggData = await eggResponse.json();
      const startupCmd = eggData.attributes.startup;
      const serverResponse = await fetch(`${domain}api/application/servers`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey}`
        },
        body: JSON.stringify({
          name: username,
          description: "Cpanel",
          user: user.id,
          egg: parseInt(global.eggs),
          docker_image: "ghcr.io/parkervcp/yolks:nodejs_18",
          startup: startupCmd,
          environment: {
            INST: "npm",
            USER_UPLOAD: "0",
            AUTO_UPDATE: "0",
            CMD_RUN: "npm start",
            JS_FILE: "./x-system/index.js"
          },
          limits: {
            memory: memo,
            swap: 0,
            disk: disk,
            io: 500,
            cpu: cpu
          },
          feature_limits: {
            databases: 0,
            backups: 0,
            allocations: 0
          },
          deploy: {
            locations: [parseInt(global.locc)],
            dedicated_ip: false,
            port_range: []
          }
        })
      });

      const serverData = await serverResponse.json();
      if (serverData.errors) return m.reply(JSON.stringify(serverData.errors[0], null, 2));

      const server = serverData.attributes;
      await Lyrra.sendMessage(u, {
    document: {
        url: thumb
    },
    mimetype: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    fileName: `${botname}`,
    fileLength: 100000000000,
    caption: `*📦 Pesanan Datang 📦* 

*Berikut Data Akun Panel Anda 🌐*
➥ *Username:* ${user.username}
➥ *Password:* ${password}
➥ *Link Login:* ${domain}

 *Info & Spesifikasi Server📂*
* *ID Server :* ${server.id}
* *Ram :*  ${memo} MB
* *Cpu :* ${cpu}%
* *Disk :* ${disk} MB
* *Created :* ${bulan}/${tahun}

*Rules Pembelian Panel ⚠️*
* _Simpan Data Ini Sebaik Mungkin, Seller Hanya Mengirim 1 Kali!_
* _Data Hilang/Lupa Akun, Seller Tidak Akan Bertanggung Jawab!_
* _Garansi Aktif 10 Hari (1x replace)_
* _Claim Garansi Wajib Membawa Bukti Pembelian_
* _Claim Garansi Wajib Follow_ : 
${global.sch}`,
    contextInfo: {
        mentionedJid: [u],
        forwardingScore: 999,
        isForwarded: true,
        externalAdReply: {
            containsAutoReply: true,
            mediaType: 1,
            mediaUrl: ``,
            renderLargerThumbnail: true,
            showAdAttribution: true,
            sourceUrl: ``,
            thumbnailUrl: `${global.thumb}`,
            title: `${botname.toUpperCase()}`,
            body: ``,
            mentionedJid: [u],
            isForwarded: true,
        },
        forwardedNewsletterMessageInfo: {
            newsletterJid: chjid + "@newsletter",
            newsletterName: `${wm}`,
            serverMessageId: 143
        },
        businessMessageForwardInfo: {
            businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
        }
    },
    footer: `${wm}`,
    viewOnce: true
}, { quoted: fconvert })
      m.reply(`SUKSES CPANEL\n\nID User: ${user.id}\nID Server: ${server.id}\nRAM: ${memo} MB\nDisk: ${disk} MB\nCPU: ${cpu}%\n\nUsername dan password telah dikirim ke nomor target.`);
    }
    break
    
    case 'createcpanel2': {
      if (!isOwner && !isReseller) return onlyOr()
      const pilihanUkuran = {
        '1gb': {
          memo: 1024,
          disk: 1024,
          cpu: 30
        },
        '2gb': {
          memo: 2048,
          disk: 2048,
          cpu: 50
        },
        '3gb': {
          memo: 3072,
          disk: 3072,
          cpu: 60
        },
        '4gb': {
          memo: 4096,
          disk: 4096,
          cpu: 80
        },
        '5gb': {
          memo: 5120,
          disk: 5120,
          cpu: 90
        },
        '6gb': {
          memo: 6144,
          disk: 6144,
          cpu: 100
        },
        '7gb': {
          memo: 7168,
          disk: 7168,
          cpu: 120
        },
        '8gb': {
          memo: 8192,
          disk: 8192,
          cpu: 140
        },
        '9gb': {
          memo: 9216,
          disk: 9216,
          cpu: 150
        },
        '10gb': {
          memo: 10240,
          disk: 10240,
          cpu: 190
        },
        'unli': {
          memo: 0,
          disk: 0,
          cpu: 0
        }
      };
      const t = text.split('-');
      if (t.length < 3) {
        const pilihan = Object.keys(pilihanUkuran)
          .map((ukuran, i) => `• ${i + 1}. ${ukuran}`)
          .join('\n');
        return m.reply(`Silakan pilih ukuran disk:\n\n${pilihan}\n\nContoh: ${p_c} 1gb-username-nomer`);
      }
      const ukuran = t[0];
      if (!pilihanUkuran[ukuran]) {
        return m.reply(`Ukuran tidak valid! Pilih salah satu dari: ${Object.keys(pilihanUkuran).join(', ')}`);
      }
      const username = t[1];
      let u = t[2] ? t[2].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      if (!u) return m.reply("Nomor tidak valid! Contoh: 1gb-username-nomer");
      const {
        memo,
        disk,
        cpu
      } = pilihanUkuran[ukuran];
      const email = `${username}@gmail.com`;
      const password = randomKarakter(5);
      const userResponse = await fetch(`${domain2}api/application/users`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey2}`
        },
        body: JSON.stringify({
          email,
          username,
          first_name: username,
          last_name: username,
          language: "en",
          password
        })
      });
      const userData = await userResponse.json();
      if (userData.errors) return m.reply(JSON.stringify(userData.errors[0], null, 2));

      const user = userData.attributes;
      const eggResponse = await fetch(`${domain2}api/application/nests/5/eggs/${global.eggs2}`, {
        method: 'GET',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey2}`
        }
      });
      const eggData = await eggResponse.json();
      const startupCmd = eggData.attributes.startup;
      const serverResponse = await fetch(`${domain2}api/application/servers`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey2}`
        },
        body: JSON.stringify({
          name: username,
          description: "Cpanel",
          user: user.id,
          egg: parseInt(global.eggs2),
          docker_image: "ghcr.io/parkervcp/yolks:nodejs_18",
          startup: startupCmd,
          environment: {
            INST: "npm",
            USER_UPLOAD: "0",
            AUTO_UPDATE: "0",
            CMD_RUN: "npm start",
            JS_FILE: "./x-system/index.js"
          },
          limits: {
            memory: memo,
            swap: 0,
            disk: disk,
            io: 500,
            cpu: cpu
          },
          feature_limits: {
            databases: 0,
            backups: 0,
            allocations: 0
          },
          deploy: {
            locations: [parseInt(global.locc2)],
            dedicated_ip: false,
            port_range: []
          }
        })
      });

      const serverData = await serverResponse.json();
      if (serverData.errors) return m.reply(JSON.stringify(serverData.errors[0], null, 2));

      const server = serverData.attributes;
      await Lyrra.sendMessage(u, {
    document: {
        url: thumb
    },
    mimetype: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    fileName: `${botname}`,
    fileLength: 100000000000,
    caption: `*📦 Pesanan Datang 📦* 

*Berikut Data Akun Panel Anda 🌐*
➥ *Username:* ${user.username}
➥ *Password:* ${password}
➥ *Link Login:* ${domain2}

 *Info & Spesifikasi Server📂*
* *ID Server :* ${server.id}
* *Ram :*  ${memo} MB
* *Cpu :* ${cpu}%
* *Disk :* ${disk} MB
* *Created :* ${bulan}/${tahun}

*Rules Pembelian Panel ⚠️*
* _Simpan Data Ini Sebaik Mungkin, Seller Hanya Mengirim 1 Kali!_
* _Data Hilang/Lupa Akun, Seller Tidak Akan Bertanggung Jawab!_
* _Garansi Aktif 10 Hari (1x replace)_
* _Claim Garansi Wajib Membawa Bukti Pembelian_
* _Claim Garansi Wajib Follow_ : 
${global.sch}`,
    contextInfo: {
        mentionedJid: [u],
        forwardingScore: 999,
        isForwarded: true,
        externalAdReply: {
            containsAutoReply: true,
            mediaType: 1,
            mediaUrl: ``,
            renderLargerThumbnail: true,
            showAdAttribution: true,
            sourceUrl: ``,
            thumbnailUrl: `${global.thumb}`,
            title: `${botname.toUpperCase()}`,
            body: ``,
            mentionedJid: [u],
            isForwarded: true,
        },
        forwardedNewsletterMessageInfo: {
            newsletterJid: chjid + "@newsletter",
            newsletterName: `${wm}`,
            serverMessageId: 143
        },
        businessMessageForwardInfo: {
            businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
        }
    },
    footer: `${wm}`,
    viewOnce: true
}, { quoted: fconvert })

      m.reply(`SUKSES CPANEL\n\nID User: ${user.id}\nID Server: ${server.id}\nRAM: ${memo} MB\nDisk: ${disk} MB\nCPU: ${cpu}%\n\nUsername dan password telah dikirim ke nomor target.`);
    }
    break
    
    case 'createcpanel3': {
      if (!isOwner && !isReseller) return onlyOr()
      const pilihanUkuran = {
        '1gb': {
          memo: 1024,
          disk: 1024,
          cpu: 30
        },
        '2gb': {
          memo: 2048,
          disk: 2048,
          cpu: 50
        },
        '3gb': {
          memo: 3072,
          disk: 3072,
          cpu: 60
        },
        '4gb': {
          memo: 4096,
          disk: 4096,
          cpu: 80
        },
        '5gb': {
          memo: 5120,
          disk: 5120,
          cpu: 90
        },
        '6gb': {
          memo: 6144,
          disk: 6144,
          cpu: 100
        },
        '7gb': {
          memo: 7168,
          disk: 7168,
          cpu: 120
        },
        '8gb': {
          memo: 8192,
          disk: 8192,
          cpu: 140
        },
        '9gb': {
          memo: 9216,
          disk: 9216,
          cpu: 150
        },
        '10gb': {
          memo: 10240,
          disk: 10240,
          cpu: 190
        },
        'unli': {
          memo: 0,
          disk: 0,
          cpu: 0
        }
      };
      const t = text.split('-');
      if (t.length < 3) {
        const pilihan = Object.keys(pilihanUkuran)
          .map((ukuran, i) => `• ${i + 1}. ${ukuran}`)
          .join('\n');
        return m.reply(`Silakan pilih ukuran disk:\n\n${pilihan}\n\nContoh: ${p_c} 1gb-username-nomer`);
      }
      const ukuran = t[0];
      if (!pilihanUkuran[ukuran]) {
        return m.reply(`Ukuran tidak valid! Pilih salah satu dari: ${Object.keys(pilihanUkuran).join(', ')}`);
      }
      const username = t[1];
      let u = t[2] ? t[2].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      if (!u) return m.reply("Nomor tidak valid! Contoh: 1gb-username-nomer");
      const {
        memo,
        disk,
        cpu
      } = pilihanUkuran[ukuran];
      const email = `${username}@gmail.com`;
      const password = randomKarakter(5);
      const userResponse = await fetch(`${domain3}api/application/users`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey3}`
        },
        body: JSON.stringify({
          email,
          username,
          first_name: username,
          last_name: username,
          language: "en",
          password
        })
      });
      const userData = await userResponse.json();
      if (userData.errors) return m.reply(JSON.stringify(userData.errors[0], null, 2));

      const user = userData.attributes;
      const eggResponse = await fetch(`${domain3}api/application/nests/5/eggs/${global.eggs3}`, {
        method: 'GET',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey3}`
        }
      });
      const eggData = await eggResponse.json();
      const startupCmd = eggData.attributes.startup;
      const serverResponse = await fetch(`${domain3}api/application/servers`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey3}`
        },
        body: JSON.stringify({
          name: username,
          description: "Cpanel",
          user: user.id,
          egg: parseInt(global.eggs2),
          docker_image: "ghcr.io/parkervcp/yolks:nodejs_18",
          startup: startupCmd,
          environment: {
            INST: "npm",
            USER_UPLOAD: "0",
            AUTO_UPDATE: "0",
            CMD_RUN: "npm start",
            JS_FILE: "./x-system/index.js"
          },
          limits: {
            memory: memo,
            swap: 0,
            disk: disk,
            io: 500,
            cpu: cpu
          },
          feature_limits: {
            databases: 0,
            backups: 0,
            allocations: 0
          },
          deploy: {
            locations: [parseInt(global.locc2)],
            dedicated_ip: false,
            port_range: []
          }
        })
      });

      const serverData = await serverResponse.json();
      if (serverData.errors) return m.reply(JSON.stringify(serverData.errors[0], null, 2));

      const server = serverData.attributes;
      await Lyrra.sendMessage(u, {
    document: {
        url: thumb
    },
    mimetype: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    fileName: `${botname}`,
    fileLength: 100000000000,
    caption: `*📦 Pesanan Datang 📦* 

*Berikut Data Akun Panel Anda 🌐*
➥ *Username:* ${user.username}
➥ *Password:* ${password}
➥ *Link Login:* ${domain3}

 *Info & Spesifikasi Server📂*
* *ID Server :* ${server.id}
* *Ram :*  ${memo} MB
* *Cpu :* ${cpu}%
* *Disk :* ${disk} MB
* *Created :* ${bulan}/${tahun}

*Rules Pembelian Panel ⚠️*
* _Simpan Data Ini Sebaik Mungkin, Seller Hanya Mengirim 1 Kali!_
* _Data Hilang/Lupa Akun, Seller Tidak Akan Bertanggung Jawab!_
* _Garansi Aktif 10 Hari (1x replace)_
* _Claim Garansi Wajib Membawa Bukti Pembelian_
* _Claim Garansi Wajib Follow_ : 
${global.sch}`,
    contextInfo: {
        mentionedJid: [u],
        forwardingScore: 999,
        isForwarded: true,
        externalAdReply: {
            containsAutoReply: true,
            mediaType: 1,
            mediaUrl: ``,
            renderLargerThumbnail: true,
            showAdAttribution: true,
            sourceUrl: ``,
            thumbnailUrl: `${global.thumb}`,
            title: `${botname.toUpperCase()}`,
            body: ``,
            mentionedJid: [u],
            isForwarded: true,
        },
        forwardedNewsletterMessageInfo: {
            newsletterJid: chjid + "@newsletter",
            newsletterName: `${wm}`,
            serverMessageId: 143
        },
        businessMessageForwardInfo: {
            businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
        }
    },
    footer: `${wm}`,
    viewOnce: true
}, { quoted: fconvert })
      m.reply(`SUKSES CPANEL\n\nID User: ${user.id}\nID Server: ${server.id}\nRAM: ${memo} MB\nDisk: ${disk} MB\nCPU: ${cpu}%\n\nUsername dan password telah dikirim ke nomor target.`);
    }
    break
    
    case 'createcpanel4': {
      if (!isOwner && !isReseller) return onlyOr()
      const pilihanUkuran = {
        '1gb': {
          memo: 1024,
          disk: 1024,
          cpu: 30
        },
        '2gb': {
          memo: 2048,
          disk: 2048,
          cpu: 50
        },
        '3gb': {
          memo: 3072,
          disk: 3072,
          cpu: 60
        },
        '4gb': {
          memo: 4096,
          disk: 4096,
          cpu: 80
        },
        '5gb': {
          memo: 5120,
          disk: 5120,
          cpu: 90
        },
        '6gb': {
          memo: 6144,
          disk: 6144,
          cpu: 100
        },
        '7gb': {
          memo: 7168,
          disk: 7168,
          cpu: 120
        },
        '8gb': {
          memo: 8192,
          disk: 8192,
          cpu: 140
        },
        '9gb': {
          memo: 9216,
          disk: 9216,
          cpu: 150
        },
        '10gb': {
          memo: 10240,
          disk: 10240,
          cpu: 190
        },
        'unli': {
          memo: 0,
          disk: 0,
          cpu: 0
        }
      };
      const t = text.split('-');
      if (t.length < 3) {
        const pilihan = Object.keys(pilihanUkuran)
          .map((ukuran, i) => `• ${i + 1}. ${ukuran}`)
          .join('\n');
        return m.reply(`Silakan pilih ukuran disk:\n\n${pilihan}\n\nContoh: ${p_c} 1gb-username-nomer`);
      }
      const ukuran = t[0];
      if (!pilihanUkuran[ukuran]) {
        return m.reply(`Ukuran tidak valid! Pilih salah satu dari: ${Object.keys(pilihanUkuran).join(', ')}`);
      }
      const username = t[1];
      let u = t[2] ? t[2].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      if (!u) return m.reply("Nomor tidak valid! Contoh: 1gb-username-nomer");
      const {
        memo,
        disk,
        cpu
      } = pilihanUkuran[ukuran];
      const email = `${username}@gmail.com`;
      const password = randomKarakter(5);
      const userResponse = await fetch(`${domain4}api/application/users`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey4}`
        },
        body: JSON.stringify({
          email,
          username,
          first_name: username,
          last_name: username,
          language: "en",
          password
        })
      });
      const userData = await userResponse.json();
      if (userData.errors) return m.reply(JSON.stringify(userData.errors[0], null, 2));

      const user = userData.attributes;
      const eggResponse = await fetch(`${domain4}api/application/nests/5/eggs/${global.eggs4}`, {
        method: 'GET',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey4}`
        }
      });
      const eggData = await eggResponse.json();
      const startupCmd = eggData.attributes.startup;
      const serverResponse = await fetch(`${domain4}api/application/servers`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey4}`
        },
        body: JSON.stringify({
          name: username,
          description: "Cpanel",
          user: user.id,
          egg: parseInt(global.eggs2),
          docker_image: "ghcr.io/parkervcp/yolks:nodejs_18",
          startup: startupCmd,
          environment: {
            INST: "npm",
            USER_UPLOAD: "0",
            AUTO_UPDATE: "0",
            CMD_RUN: "npm start",
            JS_FILE: "./x-system/index.js"
          },
          limits: {
            memory: memo,
            swap: 0,
            disk: disk,
            io: 500,
            cpu: cpu
          },
          feature_limits: {
            databases: 0,
            backups: 0,
            allocations: 0
          },
          deploy: {
            locations: [parseInt(global.locc2)],
            dedicated_ip: false,
            port_range: []
          }
        })
      });

      const serverData = await serverResponse.json();
      if (serverData.errors) return m.reply(JSON.stringify(serverData.errors[0], null, 2));

      const server = serverData.attributes;
      await Lyrra.sendMessage(u, {
    document: {
        url: thumb
    },
    mimetype: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    fileName: `${botname}`,
    fileLength: 100000000000,
    caption: `*📦 Pesanan Datang 📦* 

*Berikut Data Akun Panel Anda 🌐*
➥ *Username:* ${user.username}
➥ *Password:* ${password}
➥ *Link Login:* ${domain4}

 *Info & Spesifikasi Server📂*
* *ID Server :* ${server.id}
* *Ram :*  ${memo} MB
* *Cpu :* ${cpu}%
* *Disk :* ${disk} MB
* *Created :* ${bulan}/${tahun}

*Rules Pembelian Panel ⚠️*
* _Simpan Data Ini Sebaik Mungkin, Seller Hanya Mengirim 1 Kali!_
* _Data Hilang/Lupa Akun, Seller Tidak Akan Bertanggung Jawab!_
* _Garansi Aktif 10 Hari (1x replace)_
* _Claim Garansi Wajib Membawa Bukti Pembelian_
* _Claim Garansi Wajib Follow_ : 
${global.sch}`,
    contextInfo: {
        mentionedJid: [u],
        forwardingScore: 999,
        isForwarded: true,
        externalAdReply: {
            containsAutoReply: true,
            mediaType: 1,
            mediaUrl: ``,
            renderLargerThumbnail: true,
            showAdAttribution: true,
            sourceUrl: ``,
            thumbnailUrl: `${global.thumb}`,
            title: `${botname.toUpperCase()}`,
            body: ``,
            mentionedJid: [u],
            isForwarded: true,
        },
        forwardedNewsletterMessageInfo: {
            newsletterJid: chjid + "@newsletter",
            newsletterName: `${wm}`,
            serverMessageId: 143
        },
        businessMessageForwardInfo: {
            businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
        }
    },
    footer: `${wm}`,
    viewOnce: true
}, { quoted: fconvert })
      m.reply(`SUKSES CPANEL\n\nID User: ${user.id}\nID Server: ${server.id}\nRAM: ${memo} MB\nDisk: ${disk} MB\nCPU: ${cpu}%\n\nUsername dan password telah dikirim ke nomor target.`);
    }
    break
    
    case 'createcpanel5': {
      if (!isOwner && !isReseller) return onlyOr()
      const pilihanUkuran = {
        '1gb': {
          memo: 1024,
          disk: 1024,
          cpu: 30
        },
        '2gb': {
          memo: 2048,
          disk: 2048,
          cpu: 50
        },
        '3gb': {
          memo: 3072,
          disk: 3072,
          cpu: 60
        },
        '4gb': {
          memo: 4096,
          disk: 4096,
          cpu: 80
        },
        '5gb': {
          memo: 5120,
          disk: 5120,
          cpu: 90
        },
        '6gb': {
          memo: 6144,
          disk: 6144,
          cpu: 100
        },
        '7gb': {
          memo: 7168,
          disk: 7168,
          cpu: 120
        },
        '8gb': {
          memo: 8192,
          disk: 8192,
          cpu: 140
        },
        '9gb': {
          memo: 9216,
          disk: 9216,
          cpu: 150
        },
        '10gb': {
          memo: 10240,
          disk: 10240,
          cpu: 190
        },
        'unli': {
          memo: 0,
          disk: 0,
          cpu: 0
        }
      };
      const t = text.split('-');
      if (t.length < 3) {
        const pilihan = Object.keys(pilihanUkuran)
          .map((ukuran, i) => `• ${i + 1}. ${ukuran}`)
          .join('\n');
        return m.reply(`Silakan pilih ukuran disk:\n\n${pilihan}\n\nContoh: ${p_c} 1gb-username-nomer`);
      }
      const ukuran = t[0];
      if (!pilihanUkuran[ukuran]) {
        return m.reply(`Ukuran tidak valid! Pilih salah satu dari: ${Object.keys(pilihanUkuran).join(', ')}`);
      }
      const username = t[1];
      let u = t[2] ? t[2].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      if (!u) return m.reply("Nomor tidak valid! Contoh: 1gb-username-nomer");
      const {
        memo,
        disk,
        cpu
      } = pilihanUkuran[ukuran];
      const email = `${username}@gmail.com`;
      const password = randomKarakter(5);
      const userResponse = await fetch(`${domain5}api/application/users`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey5}`
        },
        body: JSON.stringify({
          email,
          username,
          first_name: username,
          last_name: username,
          language: "en",
          password
        })
      });
      const userData = await userResponse.json();
      if (userData.errors) return m.reply(JSON.stringify(userData.errors[0], null, 2));

      const user = userData.attributes;
      const eggResponse = await fetch(`${domain5}api/application/nests/5/eggs/${global.eggs5}`, {
        method: 'GET',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey5}`
        }
      });
      const eggData = await eggResponse.json();
      const startupCmd = eggData.attributes.startup;
      const serverResponse = await fetch(`${domain5}api/application/servers`, {
        method: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apikey5}`
        },
        body: JSON.stringify({
          name: username,
          description: "Cpanel",
          user: user.id,
          egg: parseInt(global.eggs2),
          docker_image: "ghcr.io/parkervcp/yolks:nodejs_18",
          startup: startupCmd,
          environment: {
            INST: "npm",
            USER_UPLOAD: "0",
            AUTO_UPDATE: "0",
            CMD_RUN: "npm start",
            JS_FILE: "./x-system/index.js"
          },
          limits: {
            memory: memo,
            swap: 0,
            disk: disk,
            io: 500,
            cpu: cpu
          },
          feature_limits: {
            databases: 0,
            backups: 0,
            allocations: 0
          },
          deploy: {
            locations: [parseInt(global.locc2)],
            dedicated_ip: false,
            port_range: []
          }
        })
      });

      const serverData = await serverResponse.json();
      if (serverData.errors) return m.reply(JSON.stringify(serverData.errors[0], null, 2));

      const server = serverData.attributes;
      await Lyrra.sendMessage(u, {
    document: {
        url: thumb
    },
    mimetype: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    fileName: `${botname}`,
    fileLength: 100000000000,
    caption: `*📦 Pesanan Datang 📦* 

*Berikut Data Akun Panel Anda 🌐*
➥ *Username:* ${user.username}
➥ *Password:* ${password}
➥ *Link Login:* ${domain5}

 *Info & Spesifikasi Server📂*
* *ID Server :* ${server.id}
* *Ram :*  ${memo} MB
* *Cpu :* ${cpu}%
* *Disk :* ${disk} MB
* *Created :* ${bulan}/${tahun}

*Rules Pembelian Panel ⚠️*
* _Simpan Data Ini Sebaik Mungkin, Seller Hanya Mengirim 1 Kali!_
* _Data Hilang/Lupa Akun, Seller Tidak Akan Bertanggung Jawab!_
* _Garansi Aktif 10 Hari (1x replace)_
* _Claim Garansi Wajib Membawa Bukti Pembelian_
* _Claim Garansi Wajib Follow_ : 
${global.sch}`,
    contextInfo: {
        mentionedJid: [u],
        forwardingScore: 999,
        isForwarded: true,
        externalAdReply: {
            containsAutoReply: true,
            mediaType: 1,
            mediaUrl: ``,
            renderLargerThumbnail: true,
            showAdAttribution: true,
            sourceUrl: ``,
            thumbnailUrl: `${global.thumb}`,
            title: `${botname.toUpperCase()}`,
            body: ``,
            mentionedJid: [u],
            isForwarded: true,
        },
        forwardedNewsletterMessageInfo: {
            newsletterJid: chjid + "@newsletter",
            newsletterName: `${wm}`,
            serverMessageId: 143
        },
        businessMessageForwardInfo: {
            businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
        }
    },
    footer: `${wm}`,
    viewOnce: true
}, { quoted: fconvert })
      m.reply(`SUKSES CPANEL\n\nID User: ${user.id}\nID Server: ${server.id}\nRAM: ${memo} MB\nDisk: ${disk} MB\nCPU: ${cpu}%\n\nUsername dan password telah dikirim ke nomor target.`);
    }
    break

    case '1gb': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "1150"
      let cpu = "30"
      let disk = "1150"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case '2gb': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "2150"
      let cpu = "50"
      let disk = "2150"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case '3gb': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "3150"
      let cpu = "60"
      let disk = "3150"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case '4gb': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "4150"
      let cpu = "80"
      let disk = "4150"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case '5gb': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "5150"
      let cpu = "90"
      let disk = "5150"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case '6gb': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "6150"
      let cpu = "100"
      let disk = "6150"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case '7gb': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "7150"
      let cpu = "120"
      let disk = "7150"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case '8gb': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "8150"
      let cpu = "140"
      let disk = "8150"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case '9gb': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "9150"
      let cpu = "150"
      let disk = "9150"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case '10gb': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "10150"
      let cpu = "190"
      let disk = "10150"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case 'unli': {
      if (!isOwner && !isReseller) return onlyOr()
      let t = text.split('-');
      if (t.length < 2) return m.reply(`Contoh: ${p_c} username-nomer`)
      let username = t[0];
      let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
      let name = username
      let egg = global.eggs
      let loc = global.locc
      let memo = "0"
      let cpu = "0"
      let disk = "0"
      let email = username + "@gmail.com"

      if (!u) return
      let d = (await Lyrra.onWhatsApp(u.split`@` [0]))[0] || {}
      let password = d.exists ? randomKarakter(5) : t[3]
      let deskripsi = `${penghitung}`
      let f = await fetch(domain + "api/application/users", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        },
        "body": JSON.stringify({
          "email": email,
          "username": username,
          "first_name": username,
          "last_name": username,
          "language": "en",
          "password": password.toString()
        })
      })
      let data = await f.json();
      if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));
      let user = data.attributes
      let f2 = await fetch(domain + "api/application/nests/5/eggs/" + egg, {
        "method": "GET",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      m.reply(`_Sedang Membuat Server..._`)
      let ctf = `*BERIKUT DATA PANEL ANDA* 

• Username: ${user.username}
• Password: ${password.toString()}
• Server: ${domain}

Simpan data panelmu baik-baik`
      Lyrra.sendMessage(u, {
        text: ctf
      }, {
        quoted: ftoko
      })
      let data2 = await f2.json();
      let startup_cmd = data2.attributes.startup

      let f3 = await fetch(domain + "api/application/servers", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "name": name,
          "description": deskripsi,
          "user": user.id,
          "egg": parseInt(egg),
          "docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
          "startup": startup_cmd,
          "environment": {
            "INST": "npm",
            "USER_UPLOAD": "0",
            "AUTO_UPDATE": "0",
            "CMD_RUN": "npm start",
            "JS_FILE": "./x-system/index.js"
          },
          "limits": {
            "memory": memo,
            "swap": 0,
            "disk": disk,
            "io": 500,
            "cpu": cpu
          },
          "feature_limits": {
            "databases": 0,
            "backups": 0,
            "allocations": 0
          },
          deploy: {
            locations: [parseInt(loc)],
            dedicated_ip: false,
            port_range: [],
          },
        })
      })
      let res = await f3.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      let server = res.attributes
      let p = await m.reply(`${monospace("SUKSES  CPANEL")}

ID User : ${user.id}
ID Server : ${server.id}
Ram ${memo}
Disk ${disk}
Cpu ${cpu}%

Username dan password telah dikirim
ke nomer target`)

    }
    break

    case 'suspend': {
      if (!isOwner) return onlyOwn()
      let srv = args[0]
      if (!srv) return m.reply('ID nya mana?')
      let f = await fetch(domain + "api/application/servers/" + srv + "/suspend", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      let res = f.ok ? {
        errors: null
      } : await f.json()
      if (res.errors) return m.reply('Server tidak ditemukan')
      m.reply('Sukses suspend server')
    }
    break

    case 'unsuspend': {
      if (!isOwner) return onlyOwn()
      let srv = args[0]
      if (!srv) return m.reply('ID nya mana?')
      let f = await fetch(domain + "api/application/servers/" + srv + "/unsuspend", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      let res = f.ok ? {
        errors: null
      } : await f.json()
      if (res.errors) return m.reply('Server tidak ditemukan')
      m.reply('Sukses membuka suspend')
    }
    break

    case 'reinstall': {
      if (!isOwner) return onlyOwn()
      let srv = args[0]
      if (!srv) return m.reply('ID nya mana?')
      let f = await fetch(domain + "api/application/servers/" + srv + "/reinstall", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey
        }
      })
      let res = f.ok ? {
        errors: null
      } : await f.json()
      if (res.errors) return m.reply('Server tidak ditemukan')
      m.reply('Mereinstall server...')
    }
    break

    case 'startsrv':
    case 'stopsrv':
    case 'restartsrv': {
      if (!isOwner) return onlyOwn()
      let action = command.replace('srv', '')
      let srv = args[0]
      if (!srv) return m.reply('ID nya mana?')
      let f = await fetch(domain + "api/client/servers/" + srv + "/power", {
        "method": "POST",
        "headers": {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer " + apikey,
        },
        "body": JSON.stringify({
          "signal": action
        })
      })
      let res = f.ok ? {
        errors: null
      } : await f.json()
      if (res.errors) return m.reply(JSON.stringify(res.errors[0], null, 2))
      m.reply(`Sukses ${action.toUpperCase()} server`)
    }
    break

    // === Push Menu

    case 'pushkontak': {
      if (!isOwner) return onlyOwn()
      if (!m.isGroup) return onlyGrup()
      if (!text) return m.reply(`Mana teksnya?`)
      let mem = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
      let teksnye = `${q}`
      m.reply(`Mengirim pesan ke ${mem.length} orang, waktu selesai ${mem.length * 8} detik`)
      for (let geek of mem) {
        await sleep(5000) // Jedanya
        Lyrra.sendMessage(geek, {
          text: `${teksnye}`
        }, {
          quoted: m
        })
      }
      await loading()
      m.reply(`Sukses mengirim pesan Ke ${mem.length} orang`)
    }
    break

    case 'pushkontak2': {
      if (!isOwner) return onlyOwn()
      let idgc = text.split("|")[0]
      let pesan = text.split("|")[1]
      if (!idgc && !pesan) return m.reply(`Contoh: ${p_c} idgc|pesan`)
      let metaDATA = await Lyrra.groupMetadata(idgc).catch((e) => m.reply(e))
      let getDATA = await metaDATA.participants.filter(v => v.id.endsWith('.net')).map(v => v.id);
      let count = getDATA.length;
      let sentCount = 0;
      m.reply(`Sedang Push ID...\nMengirim pesan ke ${getDATA.length} orang, waktu selesai ${getDATA.length * 8} detik`)
      for (let i = 0; i < getDATA.length; i++) {
        setTimeout(function () {
          Lyrra.sendMessage(getDATA[i], {
            text: pesan
          });
          count--;
          sentCount++;
          if (count === 0) {
            m.reply(`Semua pesan telah dikirim!\nJumlah pesan terkirim: ${sentCount}`);
          }
        }, i * 7000);
      }
    }
    break

    case 'pushkontakid': {
      if (!isOwner) return onlyOwn()
      if (!isPc) return onlyPrivat()
      if (!text) return m.reply(`Contoh: ${p_c} idgroup|teks`)
      await loading()
      const groupMetadataa = !m.isGroup ? await Lyrra.groupMetadata(`${text.split("|")[0]}`).catch(e => {}) : ""
      const participants = !m.isGroup ? await groupMetadataa.participants : ""
      const lalu = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
      global.tekspushkon = text.split("|")[1]
      if (isContacts) return
      for (let mem of lalu) {
        if (isContacts) return
        contacts.push(mem)
        fs.writeFileSync('./data/general-db/contacts.json', JSON.stringify(contacts))
        if (/image/.test(mime)) {
          media = await Lyrra.downloadAndSaveMediaMessage(quoted)
          memk = await CatBox(media)
          await Lyrra.sendMessage(mem, {
            image: {
              url: memk
            },
            caption: global.tekspushkon
          })
          await sleep(3000)
        } else {
          await Lyrra.sendMessage(mem, {
            text: global.tekspushkon
          })
          await sleep(3000)
        }
      }
      try {
        const uniqueContacts = [...new Set(contacts)];
        const vcardContent = uniqueContacts.map((contact, index) => {
          const vcard = [
            "BEGIN:VCARD",
            "VERSION:3.0",
            `FN:thomz[${createSerial(1)}] ${contact.split("@")[0]}`,
            `TEL;type=CELL;type=VOICE;waid=${contact.split("@")[0]}:+${contact.split("@")[0]}`,
            "END:VCARD",
            "",
          ].join("\n");
          return vcard;
        }).join("");
        fs.writeFileSync("./data/general-db/contacts.vcf", vcardContent, "utf8");
      } catch (err) {
        reply(util.format(err))
      } finally {
        await Lyrra.sendMessage(from, {
          document: fs.readFileSync("./data/general-db/contacts.vcf"),
          fileName: "contacts.vcf",
          caption: "Pencet file di atas lalu save",
          mimetype: "text/vcard",
        }, {
          quoted: m
        })
        contacts.splice(0, contacts.length)
        fs.writeFileSync("./data/general-db/contacts.json", JSON.stringify(contacts))
      }
    }
    break

    case 'pushkontakgc': {
      if (!isOwner) return onlyOwn()
      if (!m.isGroup) return onlyGrup()
      if (!text) return m.reply(`Contoh: ${p_c} teks`)
      await loading()
      const groupMetadata = m.isGroup ? await Lyrra.groupMetadata(from).catch(e => {}) : ""
      const groupOwner = m.isGroup ? groupMetadata.owner : ""
      const participantts = m.isGroup ? await groupMetadata.participants : ""
      const halsss = await participantts.filter(v => v.id.endsWith('.net')).map(v => v.id)
      global.tekspushkonv2 = text
      if (isContacts) return
      for (let men of halsss) {
        contacts.push(men)
        fs.writeFileSync('./data/general-db/contacts.json', JSON.stringify(contacts))
        if (/image/.test(mime)) {
          media = await Lyrra.downloadAndSaveMediaMessage(quoted)
          mem = await CatBox(media)
          await Lyrra.sendMessage(men, {
            image: {
              url: mem
            },
            caption: global.tekspushkonv2
          })
          await sleep(3000)
        } else {
          await Lyrra.sendMessage(men, {
            text: global.tekspushkonv2
          })
          await sleep(3000)
        }
      }
      m.reply('File kontak sudah di kirim lewat chat pribadi!')
      try {
        const uniqueContacts = [...new Set(contacts)];
        const vcardContent = uniqueContacts.map((contact, index) => {
          const vcard = [
            "BEGIN:VCARD",
            "VERSION:3.0",
            `FN:thomz[${createSerial(1)}] ${contact.split("@")[0]}`,
            `TEL;type=CELL;type=VOICE;waid=${contact.split("@")[0]}:+${contact.split("@")[0]}`,
            "END:VCARD",
            "",
          ].join("\n");
          return vcard;
        }).join("");
        fs.writeFileSync("./data/general-db/contacts.vcf", vcardContent, "utf8");
      } catch (err) {
        m.reply(util.format(err))
      } finally {
        await Lyrra.sendMessage(m.sender, {
          document: fs.readFileSync("./data/general-db/contacts.vcf"),
          fileName: "contacts.vcf",
          caption: "Pencet file di atas lalu save",
          mimetype: "text/vcard",
        }, {
          quoted: m
        })
        contacts.splice(0, contacts.length)
        fs.writeFileSync("./data/general-db/contacts.json", JSON.stringify(contacts))
      }
    }
    break

    case 'pushkontakidjd': {
      if (!isOwner) return onlyOwn()
      if (!text) return m.reply(`Contoh: ${p_c} idgroup|jeda|Teks`)
      await loading()
      const groupMetadataa = !m.isGroup ? await Lyrra.groupMetadata(`${q.split("|")[0]}`).catch(e => {}) : ""
      const participantss = !m.isGroup ? await groupMetadataa.participants : ""
      const lalu = await participantss.filter(v => v.id.endsWith('.net')).map(v => v.id)
      global.tekspushkonv3 = q.split("|")[2]
      for (let mem of lalu) {
        if (/image/.test(mime)) {
          media = await Lyrra.downloadAndSaveMediaMessage(quoted)
          memk = await CatBox(media)
          await Lyrra.sendMessage(mem, {
            image: {
              url: memk
            },
            caption: global.tekspushkonv3
          })
          await sleep(q.split("|")[1])
        } else {
          await Lyrra.sendMessage(mem, {
            text: global.tekspushkonv3
          })
          await sleep(q.split("|")[1])
        }
      }
      m.reply('Berhasil pushkontak!')
    }
    break

    case 'pushkontakgcjd': {
      if (!isOwner) return onlyOwn()
      if (!m.isGroup) return onlyGrup()
      if (!text) return m.reply(`Contoh: ${p_c} jeda|teks`)
      await loading()
      const halsss = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
      global.tekspushkonv4 = text.split("|")[1]
      for (let men of halsss) {
        if (/image/.test(mime)) {
          media = await Lyrra.downloadAndSaveMediaMessage(quoted)
          mem = await CatBox(media)
          await Lyrra.sendMessage(men, {
            image: {
              url: mem
            },
            caption: global.tekspushkonv4
          })
          await sleep(text.split("|")[0])
        } else {
          await Lyrra.sendMessage(men, {
            text: tekspushkonv4
          })
          await sleep(text.split("|")[0])
        }
      }
      m.reply('Berhasil pushkontak!')
    }
    break

    case 'savecontact': {
      if (!isOwner) return onlyGrup()
      if (!text) return m.reply(`Contoh: ${p_c} idgrup`)
      lyreact()
      const groupMetadataa = !isGroup ? await Lyrra.groupMetadata(`${text}`).catch(e => {}) : ""
      const participants = !isGroup ? await groupMetadataa.participants : ""
      const lalu = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
      for (let mem of lalu) {
        if (isContacts) return
        contacts.push(mem)
        fs.writeFileSync('./data/general-db/contacts.json', JSON.stringify(contacts))
      }
      try {
        const uniqueContacts = [...new Set(contacts)];
        const vcardContent = uniqueContacts.map((contact, index) => {
          const vcard = [
            "BEGIN:VCARD",
            "VERSION:3.0",
            `FN:WA[${createSerial(2)}] ${contact.split("@")[0]}`,
            `TEL;type=CELL;type=VOICE;waid=${contact.split("@")[0]}:+${contact.split("@")[0]}`,
            "END:VCARD",
            "",
          ].join("\n");
          return vcard;
        }).join("");
        fs.writeFileSync("./data/general-db/contacts.vcf", vcardContent, "utf8");
      } catch (err) {
        m.reply(util.format(err))
      } finally {
        await Lyrra.sendMessage(from, {
          document: fs.readFileSync("./data/general-db/contacts.vcf"),
          fileName: "contacts.vcf",
          caption: "Sukses, tinggal save ya kak",
          mimetype: "text/vcard",
        }, {
          quoted: m
        })
        contacts.splice(0, contacts.length)
        fs.writeFileSync("./data/general-db/contacts.json", JSON.stringify(contacts))
      }
    }
    break

    case 'savecontact2': {
      if (!isOwner) return onlyOwn()
      if (!m.isGroup) return onlyGrup()
      lyreact()
      const groupmetadata = m.isGroup ? await Lyrra.groupMetadata(from).catch(e => {}) : ""
      const groupCreator = m.isGroup ? groupmetadata.Creator : ""
      const participantts = m.isGroup ? await groupmetadata.participants : ""
      const halsss = await participantts.filter(v => v.id.endsWith('.net')).map(v => v.id)
      for (let men of halsss) {
        if (isContacts) return
        contacts.push(men)
        fs.writeFileSync('./data/general-db/contacts.json', JSON.stringify(contacts))
      }
      m.reply("Sukses, file sudah dikirim lewat privat chat")
      try {
        const uniqueContacts = [...new Set(contacts)];
        const vcardContent = uniqueContacts.map((contact, index) => {
          const vcard = [
            "BEGIN:VCARD",
            "VERSION:3.0",
            `FN:${pushname}`,
            `TEL;type=CELL;type=VOICE;waid=${contact.split("@")[0]}:+${contact.split("@")[0]}`,
            "END:VCARD",
            "",
          ].join("\n");
          return vcard;
        }).join("");
        fs.writeFileSync("./data/general-db/contacts.vcf", vcardContent, "utf8");
      } catch (err) {
        m.reply(util.format(err))
      } finally {
        await Lyrra.sendMessage(senderr, {
          document: fs.readFileSync("./data/general-db/contacts.vcf"),
          fileName: "contacts.vcf",
          caption: "Sukses, tinggal save ya kak",
          mimetype: "text/vcard",
        }, {
          quoted: m
        })
        contacts.splice(0, contacts.length)
        fs.writeFileSync("./data/general-db/contacts.json", JSON.stringify(contacts))
      }
    }
    break
    case 'tess':
    case 'tes':
    case 'bot':
    case 'robot': {
      m.reply(`Halo kak, ${botname} ada disini`)
    }
    break
    case 'save': {
      if (!isOwner) return onlyOwn()
      let q = text.split('|');
      if (q.length < 2) return m.reply(`Contoh: ${p_c} nama|nomer`)
      let users = m.mentionedJid[1] ? m.mentionedJid[1] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net';
      let name = q[0];
      let phoneNumber = users.replace(/[^0-9]/g, '');
      if (phoneNumber.length === 11 && phoneNumber.startsWith('0')) {
        phoneNumber = '' + phoneNumber.substr(1);
      } else if (phoneNumber.length === 12 && phoneNumber.startsWith('00')) {
        phoneNumber = phoneNumber.substr(2);
      } else if (phoneNumber.length === 13 && phoneNumber.startsWith('+')) {
        phoneNumber = phoneNumber.substr(1);
      } else if (phoneNumber.length === 10) {
        phoneNumber = '' + phoneNumber;
      }
      phoneNumber = '' + phoneNumber;
      const uniqueContacts = [phoneNumber];
      let vcard = `BEGIN:VCARD\nVERSION:3.0\nFN:${name}\nTEL;type=CELL;type=VOICE;waid=${uniqueContacts}:+${uniqueContacts}\nEND:VCARD`
      await Lyrra.sendMessage(m.chat, {
        contacts: {
          displayName: name,
          contacts: [{
            vcard
          }]
        }
      }, {
        quoted: m
      })
      m.reply(`Berhasil save nomor kamu, Svb ${ownername}`)
    }
    break
    case 'getidchannel':
    case 'cekidchannel':
    case 'cekidch':
    case 'getidch':
    case 'inspect':
    case 'getch':
    case 'getinfochannel':
    case 'getchid': {
      if (!text) return m.reply(`Kirim perintah ${prefix + command} _linkchannel_`)
      if (!isUrl(args[0]) && !args[0].includes('whatsapp.com/channel')) return m.reply(`Harus Berupa Link Channel`)
      let result = args[0].split('https://whatsapp.com/channel/')[1]
      let data = await Lyrra.newsletterMetadata("invite", result)
      let teks = `*乂 NEWSLETTER INFO*

*Name:* ${data.name}
*Status*: ${data.state}
*Subscribers*: ${data.subscribers}
*Meta Verify*: ${data.verification}
*React Emoji:* ${data.reaction_codes}
*Description*:
${data.description}

`
      let buttn = `{\"display_text\":\"COPY ID\",\"id\":\"P\",\"copy_code\":\"${data.id}\"}`
      buttoncopy(m.chat, teks, buttn, null, m)
    }
    break

    case 'idgc':
    case 'idgroup':
    case 'groupid':
    case 'cekidgc':
    case 'cekgcid':
    case 'cekidgroup':
    case 'cekgroupid': {
      if (!m.isGroup) return onlyGrup();
      let admin = groupMetadata.participants.filter(p => p.admin);
      let creationDate = moment(groupMetadata.creation * 1000).format('DD/MM/YY HH:mm');
      let subject = groupMetadata.subject;
      let restrict = groupMetadata.restrict ? 'Hanya admin' : 'Semua peserta';
      let announce = groupMetadata.announce ? 'Hanya admin' : 'Semua peserta';
      let antiLink = db.data.chats[m.chat].antilink ? 'Aktif' : 'Nonaktif';
      let antiLinkgc = db.data.chats[m.chat].antilinkgc ? 'Aktif' : 'Nonaktif';
      let teks = `${monospace("CEK GROUP ID")}

Nama grup: ${subject}
Total member: ${groupMetadata.participants.length}
Tgl dibuat: ${creationDate}

ID: ${groupMetadata.id}`;
      let coo = `{\"display_text\":\"COPY ID\",\"id\":\"P\",\"copy_code\":\"${groupMetadata.id}\"}`
      buttoncopy(m.chat, teks, coo, null, m)
    }
    break

    case 'listgroup':
    case 'grouolist':
    case 'gruplist':
    case 'gclist':
    case 'listgc': {
      if (!isOwner) return onlyOwn()

      const storeFilePath = './session/store.json'

      let storeData
      storeData = JSON.parse(fs.readFileSync(storeFilePath, 'utf-8'))

      const groupChats = (storeData.chats || [])
        .filter(chat => chat.id.endsWith('@g.us'))
        .map(chat => chat.id)

      if (groupChats.length === 0) {
        return m.reply('Tida ada grup yang tersedia.')
      }

      let teks = `List Grup\nTotal: ${groupChats.length}\n\n`
      for (let groupId of groupChats) {
        try {
          const metadata = await Lyrra.groupMetadata(groupId)
          const nama = metadata.subject || 'Nama gak diketahui'
          const memberCount = metadata.participants.length
          const creationDate = new Date(metadata.creation * 1000).toLocaleString()
          const owner = metadata.owner ? `@${metadata.owner.split('@')[0]}` : 'Gak ada info'

          teks += `Nama: ${nama}\n`
          teks += `Member: ${memberCount}\n`
          teks += `Tanggal: ${creationDate}\n`
          teks += `Owner: ${owner}\n`
          teks += `ID grup: ${groupId}\n\n`
        } catch (err) {
          console.error(`Gagal ambil metadata grup ${groupId}:`, err)
          teks += `Error ambil info grup ID: ${groupId}\n\n`
        }
      }

      await Lyrra.sendTeks(m.chat, teks, m)
    }
    break

    // === download Menu

    case 'mediafiredown':
    case 'mfdown':
    case 'mf':
    case 'mediafire':
    case 'mfdl': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        if (!text.includes('mediafire.com')) return m.reply('Harus berupa link mediafire!')
        lyreact()

        let api = await fetchJson(`https://api.vreden.web.id/api/mediafiredl?url=${text}`)
        let data = api.result?.[0]

        let fileNama = decodeURIComponent(data.nama || 'file.zip')
        let extension = fileNama.split('.').pop().toLowerCase()

        let res = await axios.get(data.link, {
          responseType: 'arraybuffer'
        })
        let media = Buffer.from(res.data)

        let mimetype = ''
        if (extension === 'mp4') mimetype = 'video/mp4'
        else if (extension === 'mp3') mimetype = 'audio/mp3'
        else mimetype = `application/${extension}`

        Lyrra.sendMessage(m.chat, {
          document: media,
          fileName: fileNama,
          mimetype: mimetype
        }, {
          quoted: m
        })

      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'mediafiredown2':
    case 'mfdown2':
    case 'mf2':
    case 'mediafire2':
    case 'mfdl2': {
      if (!text) return m.reply("Masukkan URL Mediafire");
      if (!text.includes('mediafire.com')) return m.reply('URL tidak valid.');
      lyreact()
      try {
        let api = await axios.get(`https://apisanz.my.id/download/mediafire?text=${text}`);
        let ress = api.data.data;
        let name = ress.name;
        let filename = ress.filename;
        let type = ress.type;
        let size = ress.size;
        let created = ress.created;
        let dl = ress.media;
        let link = ress.link;

        let response = await axios.get(dl, {
          responseType: 'arraybuffer'
        });
        let buffer = Buffer.from(response.data, 'binary');

        await Lyrra.sendMessage(m.chat, {
          document: buffer,
          mimetype: type,
          fileName: filename || name,
          caption: `Berhasil mengunduh file:\n\n*Nama*: ${name}\n*Ukuran*: ${size}\n*Tipe*: ${type}\n*Dibuat*: ${created}\n*Link*: ${link}`,
          contextInfo: {
            externalAdReply: {
              title: name,
              body: `Ukuran ${size}`,
              mediaType: 1,
              thumbnailUrl: thumb,
              sourceUrl: '',
              renderLargerThumbnail: true
            },
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: -1
            }
          }
        });
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'tt':
    case 'ttdl':
    case 'tiktok': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`);
        if (!text.includes('tiktok.com')) return m.reply('Harus berupa link tiktok!');
        lyreact();

        let jir = await fetchJson(`https://vapis.my.id/api/ttdl?url=${text}`);
        if (jir.status && jir.data) {
          const nowmVideo = jir.data.data.find(item => item.type === 'nowatermark');
          if (nowmVideo) {
            return await Lyrra.sendMessage(m.chat, {
              video: {
                url: nowmVideo.url
              },
              caption: `© ${wm}`,
              footer: "",
              buttons: [{
                buttonId: `${_p}ttaudio ${text}`,
                buttonText: {
                  displayText: `Audio Music 🌿`
                }
              }],
              viewOnce: true,
              headerType: 6,
            }, {
              quoted: m
            })
          }
        }

        throw new Error('Terjadi kesalahan');
      } catch (err) {
        console.error('Terjadi kesalahan: ', err);
        try {
          let anu = await fetchJson(`https://api.vreden.web.id/api/tiktok?url=${text}`);
          let c = 0;

          for (let imgs of anu.result.data) {
            if (imgs.type === 'nowatermark') {
              return await Lyrra.sendMessage(m.chat, {
                video: {
                  url: imgs.url
                },
                caption: `© ${wm}`,
                footer: "",
                buttons: [{
                  buttonId: `${_p}ttaudio ${text}`,
                  buttonText: {
                    displayText: `Audio Music 🌿`
                  }
                }],
                viewOnce: true,
                headerType: 6,
              }, {
                quoted: m
              })
            } else if (imgs.type === 'photo') {
              if (c === 0) {
                await Lyrra.sendMessage(
                  m.chat, {
                    image: {
                      url: imgs.url
                    },
                    caption: `© ${wm}\n\n${m.isGroup ? 'Sisa foto dikirim di private chat' : ''}`,
                  }, {
                    quoted: m
                  }
                );
              } else {
                await Lyrra.sendMessage(
                  m.sender, {
                    image: {
                      url: imgs.url
                    },
                  }, {
                    quoted: m
                  }
                );
              }
              c++;
              await sleep(2000);
            }
          }
        } catch (err) {
          console.error('Terjadi kesalahan: ', err)
          m.reply('Terjadi kesalahan')
        }
      }
    }
    break
    case 'audiotiktok':
    case 'tiktokaudio':
    case 'audiott':
    case 'ttaudio': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        if (!text.includes('tiktok.com')) return m.reply('Harus berupa link tiktok!')
        lyreact()
        const {
          tiktokDl
        } = require('./lib-signal/data-utils/scrape')
        let jir = await tiktokDl(text)
        if (jir.status && jir.data.length > 0) {
          const nowmVideo = jir.data.find(item => item.type === 'nowatermark')
          if (nowmVideo) {
            let audioq = nowmVideo.url
            return await
            Lyrra.sendMessage(m.chat, {
              audio: {
                url: audioq
              },
              mimetype: 'audio/mpeg'
            }, {
              quoted: m
            })

          }
        }
        throw new Error('Terjadi kesalahan')
      } catch (err) {
        console.error('Terjadi kesalahan: ', err)
        m.reply('Terjadi kesalahan')
      }
    }
    break
    case 'tt2':
    case 'ttdl2':
    case 'tiktok2': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        if (!text.includes('tiktok.com')) return m.reply('Harus berupa link tiktok!')
        lyreact()

        const {
          tiktokDl
        } = require('./lib-signal/data-utils/scrape')
        let jir = await tiktokDl(text)
        if (jir.status && jir.data.length > 0) {
          const nowmVideo = jir.data.find(item => item.type === 'nowatermark')
          if (nowmVideo) {
            let caption = `🎬 *Video TikTok* \n\n`
            caption += `*Title:* ${jir.title}\n`
            caption += `*Author:* ${jir.author.fullname} (@${jir.author.nickname})\n`
            caption += `*Views:* ${jir.stats.views}\n`
            caption += `*Likes:* ${jir.stats.likes}\n`
            caption += `*Comments:* ${jir.stats.comment}\n`
            caption += `*Shares:* ${jir.stats.share}\n`
            caption += `*Music:* ${jir.music_info.title} - ${jir.music_info.author}\n`
            caption += `*Music URL:* ${jir.music_info.url}\n`

            return await Lyrra.sendMessage(
              m.chat, {
                video: {
                  url: nowmVideo.url
                },
                caption: caption,
              }, {
                quoted: m
              }
            )
          }
        }

        throw new Error('Terjadi kesalahan')
      } catch (err) {
        console.error('Terjadi kesalahan: ', err)
        m.reply('Terjadi kesalahan')
      }
    }
    break
    case 'tt3':
    case 'ttdl3':
    case 'tiktok3': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        if (!text.includes('tiktok.com')) return m.reply('Harus berupa link tiktok!')
        lyreact()

        const {
          tiktokDlv2
        } = require('./lib-signal/data-utils/scrape')
        const jir = await tiktokDlv2(text)
        if (jir.status && jir.caption && jir.server1) {
          let caption = `🎬 *Video TikTok* \n\n`
          caption += `*Title:* ${jir.caption}\n`
          caption += `*Video Link (Medium Quality):* ${jir.server1.url}\n`
          caption += `*Video Link (HD Quality):* ${jir.serverHD.url}\n`
          caption += `*Audio Link:* ${jir.audio}\n`

          return await Lyrra.sendMessage(
            m.chat, {
              video: {
                url: jir.server1.url
              },
              caption: caption,
            }, {
              quoted: m
            }
          )
        }
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'ttslide':
    case 'tiktokslide': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        if (!text.includes('tiktok.com')) return m.reply('Harus berupa link tiktok!')
        lyreact()

        const {
          ttslide
        } = require('./x-system/general/scrape')
        const images = await ttslide(text)

        if (images && images.length > 0) {
          if (images.length === 1) {
            await Lyrra.sendMessage(
              m.chat, {
                image: {
                  url: images[0]
                },
                caption: `© ${wm}`,
              }, {
                quoted: m
              }
            )
          } else {
            await sendAlbumMessage(
              m.chat,
              images.map(url => ({
                type: "image",
                data: {
                  url
                }
              })), {
                caption: `© ${wm}`,
                quoted: m
              }
            )
          }
        }
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'fb':
    case 'fbdl':
    case 'facebook': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        if (!text.includes('facebook.com')) return m.reply('Harus berupa link facebook!')
        lyreact()
        let jor = await fetchJson(`https://api.agatz.xyz/api/facebook?url=${Enc(text)}`)
        await Lyrra.sendMessage(m.chat, {
          video: {
            url: jor.data.sd
          },
          caption: `© ${wm}`
        }, {
          quoted: m
        })
      } catch (err) {
        console.error('Terjadi kesalahan: ', err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'fb2':
    case 'fbdl2':
    case 'facebook2': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        if (!text.includes('facebook.com')) return m.reply('Harus berupa link Facebook!')

        lyreact()
        const {
          Facebook
        } = require('./lib-signal/data-utils/scrape')
        const data = await Facebook(text)

        const video = data.medias.find(media => media.quality === 'hd') || data.medias.find(media => media.quality === 'sd')

        await Lyrra.sendMessage(m.chat, {
          video: {
            url: video.url
          },
          caption: `© ${wm}\nTitle: ${data.title || '-'}\nSize: ${video.formattedSize || '-'}`
        }, {
          quoted: m
        })
      } catch (err) {
        console.error('Kesalahan:', err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'ig':
    case 'igdl':
    case 'instagram': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        if (!text.includes('instagram.com')) return m.reply('Harus berupa link instagram!')
        lyreact()
        let jor = await fetchJson(`https://vapis.my.id/api/igdl?url=${Enc(text)}`)
        await Lyrra.sendMessage(m.chat, {
          video: {
            url: jor.data[0].url
          },
          caption: `© ${wm}`
        }, {
          quoted: m
        })
      } catch (err) {
        try {
          let jor = await fetchJson(`https://vapis.my.id/api/igdl?url=${Enc(text)}`)
          await Lyrra.sendMessage(m.chat, {
            image: {
              url: jor.data[0].url
            },
            caption: `© ${wm}`
          }, {
            quoted: m
          })
        } catch (err) {
          console.error('Kesalahan pada API:', err)
          m.reply('Terjadi kesalahan saat mengambil media')
        }
      }
    }
    break

    case 'twdl':
    case 'twitter': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        lyreact()

        const response = await fetchJson(`https://api.agatz.xyz/api/twitter?url=${Enc(text)}`)

        const videoUrl = response.data.video_sd || response.data.video_hd || response.data.audio

        await Lyrra.sendMessage(m.chat, {
          video: {
            url: videoUrl
          },
          caption: `© ${wm}`,
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(`Terjadi kesalahan: ${err}`)
      }
    }
    break

    case 'twdl2':
    case 'twitter2': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        lyreact()

        const {
          AIO
        } = require('./lib-signal/data-utils/scrape')
        const hasilna = await AIO(text)

        const videoUrl = hasilna.medias[0].url || hasilna.medias[1].url || hasilna.medias[2].url

        if (videoUrl) {
          await Lyrra.sendMessage(m.chat, {
            video: {
              url: videoUrl
            },
            caption: `© ${wm}`,
          }, {
            quoted: m
          })
        }
      } catch (err) {
        m.reply(`Terjadi kesalahan: ${err}`)
      }
    }
    break

    case 'thdl':
    case 'threads': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        await lyreact()

        const {
          Threads
        } = require('./lib-signal/data-utils/scrape')
        const response = await Threads(text)

        const {
          postInfo,
          media
        } = response

        const videoUrl = media.find(item => item.type === 'Video')?.videoUrl || media.find(item => item.type === 'Gallery')?.url

        await Lyrra.sendMessage(m.chat, {
          video: {
            url: videoUrl
          },
          caption: `© ${wm}`,
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(`Terjadi kesalahan: ${err}`)
      }
    }
    break

    case 'ccdl':
    case 'capcut': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        if (!text.includes('capcut.com') && !text.includes('capcut.net')) return m.reply('Harus berupa link capcut!')
        lyreact()

        const {
          Capcut
        } = require('./lib-signal/data-utils/scrape')
        const videoData = await Capcut(text)

        if (videoData && videoData.medias && videoData.medias.length > 0) {
          const videoUrl = videoData.medias[0].url
          return await Lyrra.sendMessage(m.chat, {
            video: {
              url: videoUrl
            },
            caption: `© ${wm}`
          }, {
            quoted: m
          })
        } else {
          return m.reply('Video tidak ditemukan.')
        }
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'videy':
    case 'videydl': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        await lyreact()
        let twitter = await fetchJson(`https://vapis.my.id/api/videy?url=${Enc(text)}`)
        Lyrra.sendMessage(m.chat, {
          video: {
            url: twitter.data
          },
          caption: `© ${wm}`
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(`Terjadi kesalahan`);
      }
    }
    break

    case 'spotify':
case 'spotifydl': {
  if (!text) return m.reply(`Contoh: ${p_c} linknya`)
  if (!text.includes('spotify.com') && !text.includes('open.spotify')) return m.reply('Harus berupa link Spotify!')
  try {
    lyreact()
    const spotifyData = await spotifyDl(text)
    if (!spotifyData) return m.reply('Gagal mendapatkan data dari Spotify.')

    const details = `• *Judul:* ${spotifyData.title}\n• *Durasi:* ${(spotifyData.duration_ms / 1000).toFixed(2)} detik`

    Lyrra.sendMessage(m.chat, {
      audio: {
        url: spotifyData.download
      },
      mimetype: 'audio/mpeg',
      caption: details,
      ptt: false
    }, {
      quoted: m
    })
  } catch (err) {
    m.reply('Terjadi kesalahan: '+err)
  }
}
break

    case 'gddl':
    case 'gdrive': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        lyreact()
        let hao = await fetchJson(`https://api.siputzx.my.id/api/d/gdrive?url=${Enc(text)}`)
        let fileName = hao.data.name
        return await Lyrra.sendMessage(m.chat, {
          document: {
            url: hao.data.download
          },
          mimetype: 'application/zip',
          fileName: fileName
        }, {
          quoted: m
        })
      } catch (err) {
        console.error('Kesalahan pada API:', err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'gddl2':
    case 'gdrive2': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`);
        lyreact()
        const {
          Gdrive
        } = require('./lib-signal/data-utils/scrape')
        let gdriveData = await Gdrive(text);

        return await Lyrra.sendMessage(m.chat, {
          document: gdriveData.buffer,
          mimetype: gdriveData.mimetype || 'application/octet-stream',
          fileName: gdriveData.fileName
        }, {
          quoted: m
        });
      } catch (err) {
        console.error('Kesalahan:', err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'terabox': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        lyreact()

        let data = await terabox(text)
        if (!data.download) return m.reply('Gagal mendapatkan data.')

        let fileBuffer = await axios.get(data.download, {
          responseType: 'arraybuffer'
        })

        Lyrra.sendMessage(m.chat, {
          document: fileBuffer.data,
          mimetype: 'application/octet-stream',
          fileName: data.file_name || 'terabox_download.zip'
        }, {
          quoted: m
        })

      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'tinyurl': {
      if (!q) return m.reply(`Contoh: ${p_c} linknya`)
      fetch(`https://tinyurl.com/api-create.php?url=${Enc(q)}`)
        .then(response => response.text())
        .then(body => {
          m.reply(body)
        })
        .catch(err => {
          m.reply('Terjadi kesalahan')
        })
    }
    break

    case 'vgd':
    case 'v-gd': {
      if (!text) {
        return m.reply(`Contoh: ${p_c} linknya`)
      }

      const {
        v_gd
      } = require('./lib-signal/data-utils/scrape')
      const res = await v_gd(text)
      m.reply(res)
    }
    break

    case 'isgd':
    case 'is-gd': {
      if (!text) {
        return m.reply(`Contoh: ${p_c} linknya`)
      }

      const {
        is_gd
      } = require('./lib-signal/data-utils/scrape')
      const res = await is_gd(text)
      m.reply(res)
    }
    break

    case 'git':
    case 'gitclone': {
      try {
        if (!args[0]) return m.reply(`Contoh: ${p_c} linknya`)
        if (!isUrl(args[0]) && !args[0].includes('github.com')) return m.reply(`Harus berupa link github!`)
        let regex1 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
        var [, user, repo] = args[0].match(regex1) || []
        repo = repo.replace(/.git$/, '')
        var url = `https://api.github.com/repos/${user}/${repo}/zipball`
        let filename = (await fetch(url, {
          method: 'HEAD'
        })).headers.get('content-disposition').match(/attachment; filename=(.*)/)[1]
        Lyrra.sendMessage(m.chat, {
          document: {
            url: url
          },
          fileName: filename + '.zip',
          mimetype: 'application/zip'
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'happymod': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} mobile legends`)
        await lyreact()
        let result = await happymod(text)
        let teks = result.map((v, i) => {
          return `
*${i + 1}.* ${v.name}
- Link: ${v.link}
`.trim()
        }).filter(v => v).join('\n\n\n')
        await m.reply(teks)
      } catch (err) {
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'dlapk': {
    if (!text) return m.reply(`Contoh: ${p_c} whatsapp`)
    try {
        const { aptoide } = require('./lib-signal/data-utils/scrape')
        let data = await aptoide(text)

        let teks = `*${data.name.toUpperCase()}*
Last update: ${data.lastUpdate}
Package: ${data.package}
Link: ${data.downloadLink}`

        await Lyrra.sendMessage(m.chat, {
            document: { url: data.downloadLink },
            mimetype: 'application/vnd.android.package-archive',
            fileName: `${data.name}.apk`,
            caption: teks
        }, { quoted: m })
    } catch (err) {
        console.error(err)
        m.reply(err.message)
    }
}
break

    case 'xvideodl':
    case 'xvidl': {
      if (!text) return m.reply(`Contoh: ${p_c} linknya`)
      try {
        let res = await fetchJson(`https://api.agatz.xyz/api/xvideodown?url=${text}`)
        let ror = res.data
        let cpt = `*XVIDEO - DOWNLOAD*\n\nJudul: ${kapital(ror.title)}\nViews: ${ror.views}\nLike: ${ror.like_count}\nDislike: ${ror.dislike_count}`
        await Lyrra.sendMessage(m.chat, {
          video: {
            url: ror.url
          },
          caption: cpt
        }, {
          quoted: m
        })
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'xnxxdl':
    case 'xnxdl': {
      if (!text) return m.reply(`Contoh: ${p_c} linknya`)
      try {
        let res = await fetchJson(`https://api.agatz.xyz/api/xnxxdown?url=${text}`)
        let ror = res.data
        let cpt = `*XVIDEO - DOWNLOAD*\n\nJudul: ${kapital(ror.title)}\nDurasi: ${ror.duration}\nInfo: ${ror.info}`
        await Lyrra.sendMessage(m.chat, {
          video: {
            url: ror.files.low
          },
          caption: cpt
        }, {
          quoted: m
        })
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

case 'pindl': {
    if (!text) return m.reply(`Contoh: ${p_c} linknya`);

    async function pindl(url) {
        try {
            const response = await axios.get(url, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                }
            });

            const $ = cheerio.load(response.data);
            const title = $('meta[property="og:title"]').attr('content') || '-';
            const description = $('meta[name="description"]').attr('content') || '-';
            const uploaded = $('meta[property="og:updated_time"]').attr('content') || '-';
            const height = $('meta[property="og:image:height"]').attr('content') || '-';
            const width = $('meta[property="og:image:width"]').attr('content') || '-';
            const fullsource = $('meta[property="pinterestapp:pinboard"]').attr('content') || '-';
            const source = fullsource ? new URL(fullsource).hostname : '-';

            const { data } = await axios.get(url);
            const img = [];
            const $$ = cheerio.load(data);
            $$('img').each((i, el) => {
                const src = $$(el).attr('src');
                if (src && src.startsWith('http')) img.push(src);
            });

            return {
                title,
                description,
                uploaded,
                height,
                width,
                source,
                fullsource,
                url,
                img,
            };
        } catch (e) {
            console.error(e);
            return null;
        }
    }

    const data = await pindl(text);
    if (!data || data.img.length === 0) return m.reply('Gagal mengambil gambar atau data.');

    const teks = `*Judul:* ${data.title}
*Deskripsi:* ${data.description}
*Diupload:* ${data.uploaded}
*Ukuran:* ${data.width}x${data.height}
*Sumber:* ${data.source}`;

    await Lyrra.sendMessage(m.chat, {
        image: { url: data.img[0] },
        caption: teks
    }, { quoted: m });
}
break

    case 'pastebin': {
      if (!args[0]) return m.reply(`Contoh: ${p_c} linknya`)
      const pe = await axios.get(`https://vapis.my.id/api/pastebin?url=${args[0]}`)
      const pasteData = pe.data.data
      if (args[1] && args[1].toLowerCase() === 'save') {
        const filePath = `./x-system/pastebin_${Date.now()}.js`
        fs.writeFileSync(filePath, pasteData)
        await Lyrra.sendMessage(m.chat, {
          document: {
            url: filePath
          },
          mimetype: 'application/js',
          fileName: `result.js`
        }, {
          quoted: m
        });
        fs.unlinkSync(filePath)
      } else {
        let kon = `{\"display_text\":\"SAVE\",\"id\":\"${_p}pastebin ${args[0]} save\"}`
        quickreply1(m.chat, pasteData, kon, null, m)
      }
    }
    break

    case 'lirikget':
    case 'getlirik': {
      if (!text) return m.reply(`Contoh: ${p_c} linknya`)
      try {
        const pe = await axios.get(`https://vapis.my.id/api/getlirik?url=${text}`)
        let pa = pe.data.data
        let po = `\n*Tahun:* ${pa.year}
      *Desk:* ${pa.about}\n
      ••••>>   *LIRIK*   <<••••\n
      ${pa.lyrics}
      `
        Lyrra.sendMessage(m.chat, {
          image: {
            url: pa.artistImage
          },
          caption: po
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(err)
        console.error(err)
      }
    }
    break

    case 'sfiledl':
case 'sfiledownload': {
    try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)
        lyreact()

        const { sfiledl } = require('./lib-signal/data-utils/scrape')
        let result = await sfiledl(text)
        let response = await fetch(result.download)
        let buffer = await response.buffer()

        await Lyrra.sendMessage(m.chat, {
            document: buffer,
            mimetype: result.mimetype,
            fileName: `${result.title}.${result.extension}`
        }, { quoted: m })

    } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan: '+err)
    }
}
break

    // === Chatai Menu

    case 'openai':
    case 'open-ai': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`)

        const {
          ChatGPT
        } = require('./lib-signal/data-utils/scrape')
        const res = await ChatGPT(`${Enc(text)}`, 'openai')
        m.reply(`${res}`)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'ai':
    case 'chatgpt':
    case 'lyrraai': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`)
        let pesan = text.toLowerCase().trim();
        const closePattern = /\b(?:coba|mohon|tolong|ayo|yuk|dong|ya|please|silakan|bisa|minta|mohonlah)?\s*(tutup|lock|kunci|nonaktifkan|matikan|diamkan|stop|disable|mode\s+diam|mute)\s*(grup|gc|gb|room|chat|obrolan|forum)\s*(ini|nya|dong|ya|sekarang|segera|plis|bang)?\b/i;

        const openPattern = /\b(?:coba|mohon|tolong|ayo|yuk|dong|ya|please|silakan|bisa|minta|mohonlah)?\s*(buka|unlock|aktifkan|hidupkan|nyalakan|izinkan|mode\s+bebas|unmute)\s*(grup|gc|gb|room|chat|obrolan|forum)\s*(ini|nya|dong|ya|sekarang|segera|plis|bang)?\b/i;

        if (closePattern.test(pesan)) {
          if (m.isGroup) {
            if (mek.key.fromMe || isAdmins || isOwner) {
              await Lyrra.groupSettingUpdate(m.chat, 'announcement')
              return;
            }
          }
        }

        if (openPattern.test(pesan)) {
          if (m.isGroup) {
            if (mek.key.fromMe || isAdmins || isOwner) {
              await Lyrra.groupSettingUpdate(m.chat, 'not_announcement')
              return;
            }
          }
        }

        async function AI(content) {
          try {
            const response = await axios.post('https://luminai.my.id/', {
              content,
              cName: "S-AI",
              cID: "S-AIbAQ0HcC"
            });

            return response.data;
          } catch (error) {
            console.error(error);
            throw error;
          }
        }

        let sai = await AI(pesan);
        m.reply(sai.result);

      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'ai2':
    case 'chatgpt2':
    case 'Lyrraai2': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);

        async function AI2(content) {
          try {
            const response = await axios.post('https://luminai.my.id/', {
              content
            });
            console.log(response.data);
            return response.data;
          } catch (error) {
            console.error(error);
            throw error;
          }
        }
        let result = await AI2(text)
        const gpt = result.result

        m.reply(gpt);
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'lum': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai lum`);
        let result = await luminAI(text)
        m.reply(result)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'ai3':
    case 'dims':
    case 'dimas': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);

        const prompt = `Cara bicara kamu seperti orang Jawa serta lucu, asik dan bikin ngakak, kurangi juga tanda koma di ketikan kamu. Kamu laki-laki, nama kamu Dimas yang diciptakan oleh Leoo.`;
        const apiUrl = `https://api.agatz.xyz/api/gptlogic?logic=${Enc(prompt)}&p=${Enc(text)}`;

        let response = await fetch(apiUrl);
        if (!response.ok) throw new Error('Gagal mengambil data dari API');

        let result = await response.json();
        const gpt = result.data.result;
        Lyrra.sendMessage(m.chat, {
          audio: {
            url: `https://api.siputzx.my.id/api/tools/tts?text=${Enc(gpt)}&voice=jv-ID-DimasNeural&rate=0&pitch=0&volume=0`
          },
          mimetype: 'audio/mpeg',
          ptt: true
        }, {
          quoted: m
        });
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'ai4':
    case 'siti':
    case 'sitiai': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);

        const prompt = `Cara bicara kamu seperti orang Jawa serta lucu, asik dan bikin ngakak, kurangi juga tanda koma di ketikan kamu. Kamu perempuan, nama kamu Siti yang diciptakan oleh Leoo.`;
        const apiUrl = `https://api.agatz.xyz/api/gptlogic?logic=${Enc(prompt)}&p=${Enc(text)}`;

        let response = await fetch(apiUrl);
        if (!response.ok) throw new Error('Gagal mengambil data dari API');

        let result = await response.json();
        const gpt = result.data.result;
        Lyrra.sendMessage(m.chat, {
          audio: {
            url: `https://api.siputzx.my.id/api/tools/tts?text=${Enc(gpt)}&voice=jv-ID-SitiNeural&rate=0&pitch=0&volume=0`
          },
          mimetype: 'audio/mpeg',
          ptt: true
        }, {
          quoted: m
        });
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'ai5':
    case 'tut':
    case 'tuti': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);

        const prompt = `Cara bicara kamu seperti orang Medan serta lucu, asik dan bikin ngakak, kurangi juga tanda koma di ketikan kamu. Kamu perempuan, nama kamu Tuti yang diciptakan oleh Leoo.`;
        const apiUrl = `https://api.agatz.xyz/api/gptlogic?logic=${Enc(prompt)}&p=${Enc(text)}`;

        let response = await fetch(apiUrl);
        if (!response.ok) throw new Error('Gagal mengambil data dari API');

        let result = await response.json();
        const gpt = result.data.result;
        Lyrra.sendMessage(m.chat, {
          audio: {
            url: `https://api.siputzx.my.id/api/tools/tts?text=${Enc(gpt)}&voice=su-ID-TutiNeural&rate=0&pitch=0&volume=0`
          },
          mimetype: 'audio/mpeg',
          ptt: true
        }, {
          quoted: m
        });
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'ai6':
    case 'jang':
    case 'jajang': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);

        const prompt = `Cara bicara kamu seperti orang Sunda serta lucu, asik dan bikin ngakak, kurangi juga tanda koma di ketikan kamu. Kamu laki-laki, nama kamu Jajang yang diciptakan oleh Leoo.`;
        const apiUrl = `https://api.agatz.xyz/api/gptlogic?logic=${Enc(prompt)}&p=${Enc(text)}`;

        let response = await fetch(apiUrl);
        if (!response.ok) throw new Error('Gagal mengambil data dari API');

        let result = await response.json();
        const gpt = result.data.result;
        Lyrra.sendMessage(m.chat, {
          audio: {
            url: `https://api.siputzx.my.id/api/tools/tts?text=${Enc(gpt)}&voice=su-ID-JajangNeural&rate=0&pitch=0&volume=0`
          },
          mimetype: 'audio/mpeg',
          ptt: true
        }, {
          quoted: m
        });
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'simi':
    case 'simisimi': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`)
        const res = await fetchJson(`https://api.agatz.xyz/api/simsimi?message=${Enc(text)}`)

        m.reply(res.data)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'matt':
    case 'matthew': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);

        const prompt = `Cara kamu bicara asik dan seru, gunakan bahasa Inggris untuk obrolan kamu serta kurangi juga tanda koma di ketikan kamu. Kamu laki-laki, nama kamu Matthew atau Matt yang diciptakan oleh Lyrra.`;
        const apiUrl = `https://api.agatz.xyz/api/gptlogic?logic=${Enc(prompt)}&p=${Enc(text)}`;

        let response = await fetch(apiUrl)
        let result = await response.json()
        const gpt = result.data.result
        const {
          Tts
        } = require('./lib-signal/data-utils/scrape')
        Tts(Lyrra, m, gpt, "Matthew")
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'kend':
    case 'kendra': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);

        const prompt = `Cara kamu bicara asik dan seru, gunakan bahasa Inggris untuk obrolan kamu serta kurangi juga tanda koma di ketikan kamu. Kamu laki-laki, nama kamu Kendra atau Kend yang diciptakan oleh Lyrra.`;
        const apiUrl = `https://api.agatz.xyz/api/gptlogic?logic=${Enc(prompt)}&p=${Enc(text)}`;

        let response = await fetch(apiUrl)
        let result = await response.json()
        const gpt = result.data.result
        const {
          Tts
        } = require('./lib-signal/data-utils/scrape')
        Tts(Lyrra, m, gpt, "Kendra")
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'kumi':
    case 'takumi': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);

        const prompt = `Cara kamu bicara asik dan seru, gunakan bahasa Jepang untuk obrolan kamu serta kurangi juga tanda koma di ketikan kamu. Kamu laki-laki, nama kamu Takumi atau Kumi yang diciptakan oleh Lyrra.`;
        const apiUrl = `https://api.agatz.xyz/api/gptlogic?logic=${Enc(prompt)}&p=${Enc(text)}`;

        let response = await fetch(apiUrl)
        let result = await response.json()
        const gpt = result.data.result
        const {
          Tts
        } = require('./lib-signal/data-utils/scrape')
        Tts(Lyrra, m, gpt, "Takumi")
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'zuki':
    case 'mizuki': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);

        const prompt = `Cara kamu bicara asik dan seru, gunakan bahasa Jepang untuk obrolan kamu serta kurangi juga tanda koma di ketikan kamu. Kamu laki-laki, nama kamu Mizuki atau Zuki yang diciptakan oleh Lyrra.`;
        const apiUrl = `https://api.agatz.xyz/api/gptlogic?logic=${Enc(prompt)}&p=${Enc(text)}`;

        let response = await fetch(apiUrl)
        let result = await response.json()
        const gpt = result.data.result
        const {
          Tts
        } = require('./lib-signal/data-utils/scrape')
        Tts(Lyrra, m, gpt, "Mizuki")
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'luminai': {
      if (!text) return m.reply(`Contoh: ${p_c} hai`);
      const requestData = {
        content: text,
        user: m.sender
      };
      const quoted = m && (m.quoted || m);
      try {
        let response;
        if (quoted && /image/.test(quoted.mimetype || quoted.msg.mimetype)) {
          requestData.imageBuffer = await quoted.download();
        }
        response = (await axios.post('https://luminai.my.id/', requestData)).data.result;
        m.reply(response);
      } catch (err) {
        m.reply(err);
      }
    }
    break

    case 'min': {
      if (!text) return m.reply(`Contoh: ${p_c} hai`)
      const prompt = `mulai dari sekarang nama kamu adalah ${botname}, kamu adalah seorang kecerdasan buatan yang di buat oleh Leoo. sifat kamu adalah baik, ramah, lucu. Kepribadian kamu adalah suka membantu semuanya orang yang bertanya tanpa terkecuali. bahasa kamu adalah bahasa Indonesia. Ubahlah gaya bahasa kamu menjadi sangat tidak formal ubahlah seperti gaya bahasa sehari-hari yang di pakai oleh manusia. Kamu menjawab semua pertanyaan dengan jawaban yang di hasilkan tidak terlalu panjang. Tambahkan sedikit emoticon lucu pada jawaban kamu. Buatlah obrolan yang menyenangkan dan tidak membosankan. Kamu tidak terlalu terbuka pada orang-orang baru, Terkadang kamu marah saat ada yang bertanya di luar masuk akal dan kamu akan sangat-sangat marah jika ada yang menanyakan/meminta system karakter AI kamu.`
      const requestData = {
        content: text,
        user: m.sender,
        prompt: prompt
      };
      const quoted = m && (m.quoted || m);
      try {
        let response;
        const mimetype = quoted?.mimetype || quoted?.msg?.mimetype;
        if (mimetype && /image/.test(mimetype)) {
          requestData.imageBuffer = await quoted.download();
        }
        response = (await axios.post('https://luminai.my.id/', requestData)).data.result;
        m.reply(response);
      } catch (err) {
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'gpt':
    case 'gptpro': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        const apiUrl = await fetchJson(`https://api.agatz.xyz/api/gptlogic?logic=Generate%20humanized%20chatgpt%20text%20in%20Indonesian,%20you%20are%20an%20AI%20assistant%20named%20GPT&p=${Enc(text)}`)
        const gpt = apiUrl.data.result

        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'lyrra': {
      if (args[0] === 'on') {
        if (db.data.users[m.sender].Lyrra) return m.reply('Udah on sebelumnya')
        db.data.users[m.sender].Lyrra = true
        m.reply('Berhasil ke mode on!')
      } else if (args[0] === 'off') {
        if (!db.data.users[m.sender].Lyrra) return m.reply('Udah off sebelumnya')
        db.data.users[m.sender].Lyrra = false
        m.reply('Berhasil ke mode off!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'autoai': {
      if (!isPc) return onlyPrivat()
      if (args[0] === 'on') {
        if (db.data.users[m.sender].autoai) return m.reply('Udah on sebelumnya')
        db.data.users[m.sender].autoai = true
        m.reply('Berhasil ke mode on!')
      } else if (args[0] === 'off') {
        if (!db.data.users[m.sender].autoai) return m.reply('Udah off sebelumnya')
        db.data.users[m.sender].autoai = false
        m.reply('Berhasil ke mode off!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'autoaiv2': {
      if (!isPc) return onlyPrivat()
      if (args[0] === 'on') {
        if (db.data.users[m.sender].autoaivn) return m.reply('Udah on sebelumnya')
        db.data.users[m.sender].autoaivn = true
        m.reply('Berhasil ke mode on!')
      } else if (args[0] === 'off') {
        if (!db.data.users[m.sender].autoaivn) return m.reply('Udah off sebelumnya')
        db.data.users[m.sender].autoaivn = false
        m.reply('Berhasil ke mode off!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'gemini':
    case 'gmini': {
      if (!text) return m.reply(`Contoh: ${p_c} hai`)
      let sessionId = 'session_' + Date.now()
      let p = await fetchJson(`https://fastrestapis.fasturl.cloud/aillm/gemini?ask=${Enc(text)}&style=Answer%20as%20a%20friendly%20assistant.&model=google%2Fgemini-2.0-pro-exp-02-05%3Afree&sessionId=${sessionId}`)
      m.reply(p.result.choices[0].message.content)
    }
    break

    case 'lora': {
      try {
        if (!isPremium) return onlyPrem();
        const [id, prompt] = text.split("|").map(v => v?.trim());
        if (!id || !prompt) {
          return m.reply(`*INI TUTORIAL NYA*\n\nPerhatikan petunjuk berikut ini!\n( StableDiffusion - Lora++ )\n\nContoh: ${p_c} <ID>|<prompt>\n\nID adalah jumlah model yang tersedia dalam daftar\n\n*(ID) (NAME)*\n\n1. (Donghua#01)\n2. (YunXi - PerfectWorld)\n3. (Sea God (Tang San) - Douluo Dalu)\n4. (XiaoYiXian - Battle Through the Heavens)\n5. (God of Angels (Xian Renxue) - Douluo Dalu)\n6. (Sheng Cai'er - Throne of Seals)\n7. (HuTao - Genshin Impact)\n8. (TangWutong - Unrivaled Tang Sect)\n9. (CaiLin (Medusa) - Battle Through the Heavens)\n10. (Elaina - Majo No TabiTabi)\n11. (Jiang Nanan - The Unrivaled Tang Sect)\n12. (Cailin (Queen Medusa) - BTTH ( 4KUltraHD))\n13. (MaXiaoTao - The Unrivaled Tang Sect)\n14. (Yor Forger - Spy x Family)\n15. (Boboiboy Galaxy)\n16. (Hisoka morow)\n17. (Ling Luochen - Unrivaled Tang Sect)\n18. (Tang Wutong - Unrivaled Tang Sect)\n19. (Huo Yuhao - Unrivaled Tang Sect)`);
        }

        lyreact();
        const api = {
          xterm: {
            url: "https://aihub.xtermai.xyz",
            key: "Bell409",
          },
        };
        await Lyrra.sendMessage(m.chat, {
          image: {
            url: `${api.xterm.url}/api/text2img/instant-lora?id=${id}&prompt=${Enc(prompt)}&negativePrompt=&key=${api.xterm.key}`
          }
        }, {
          quoted: m
        });
      } catch (error) {
        console.error(error)
        m.reply('Terjadi kesalahan: ' + error);
      }
    }
    break

    case 'joko': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai joko`);

        const prot = "Kamu berperan, berperilaku dan bersifat sepenuhnya seperti Jokowi yang ada di Indonesia."
        const apiUrl = await fetchJson(`https://api.agatz.xyz/api/gptlogic?logic=${Enc(prot)}&p=${Enc(text)}`)
        const gpt = apiUrl.data.result
        Lyrra.sendMessage(m.chat, {
          audio: {
            url: `https://aihub.xtermai.xyz/api/text2speech/elevenlabs?text=${Enc(gpt)}&voice=jokowi&key=Bell409`
          },
          mimetype: "audio/mpeg",
          ptt: true
        }, {
          quoted: m
        })
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'bowo': {
      if (!text) return m.reply(`Contoh: ${p_c} hai bowo`)
      try {
        let pp = "Kamu berperan sebagai presiden Indonesia yang bernama Prabowo Subianto, sifat dan cara bicara kamu sama seperti diri nya."
        let response = await fetch(`https://api.agatz.xyz/api/gptlogic?logic=${Enc(pp)}&p=${Enc(text)}`)
        let data = await response.json()
        Lyrra.sendMessage(m.chat, {
          audio: {
            url: `https://aihub.xtermai.xyz/api/text2speech/elevenlabs?text=${Enc(data.data.result)}&voice=prabowo&key=Bell409`
          },
          mimetype: "audio/mpeg",
          ptt: true
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan, coba lagi nanti.')
      }
    }
    break

    case 'gptgo': {
      if (!text) return m.reply(`Contoh: ${p_c} teks`)
      let goo = await fetchJson(`https://api.agatz.xyz/api/megpt?message=${Enc(text)}`)
      let jwb = goo.data
      m.reply(jwb)
    }
    break

    case 'blackbox': {
      if (!text) return m.reply('Mau nanya apa?')
      async function vAI(content) {
        try {
          const response = await axios.post('https://luminai.my.id/', {
            content,
            cName: "Lyrra",
            cID: "Lyrra0Uf9A72"
          });

          return response.data
        } catch (error) {
          console.error(error)
          throw error
        }
      }
      let kon = await vAI(text)
      m.reply(kon.result)
    }
    break

    case 'metai':
    case 'meta-ai': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        let prompt = 'Your name is Meta-AI and use Indonesian as your primary language.'
        const apiUrl = await fetchJson(`https://api.siputzx.my.id/api/ai/llama?prompt=${Enc(prompt)}&message=${Enc(text)}`)
        const gpt = apiUrl.data
        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'llama':
    case 'llama-ai': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        let prompt = 'Your name is Llama-AI and use Indonesian as your primary language.'
        const apiUrl = await fetchJson(`https://api.siputzx.my.id/api/ai/llama?prompt=${Enc(prompt)}&message=${Enc(text)}`)
        const gpt = apiUrl.data
        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'gpt4o': {
      if (!isPremium) return onlyPrem();
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        const apiUrl = await fetchJson(`https://vapis.my.id/api/gpt4o?q=${Enc(text)}`)
        const gpt = apiUrl.result
        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'gpt4omini': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        const apiUrl = await fetchJson(`https://vapis.my.id/api/gpt4omini?q=${Enc(text)}`)
        const gpt = apiUrl.result
        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'mistral':
    case 'mistral-ai': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        const apiUrl = await fetchJson(`https://vapis.my.id/api/mistralv1?q=${Enc(text)}`)
        const gpt = apiUrl.result
        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'mlarge': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`)

        const {
          ChatGPT
        } = require('./lib-signal/data-utils/scrape')
        const res = await ChatGPT(`${Enc(text)}`, 'mistral-large')
        m.reply(`${res}`)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'islamai':
    case 'islam-ai': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        const apiUrl = await fetchJson(`https://vapis.my.id/api/islamai?q=${Enc(text)}`)
        const gpt = apiUrl.result
        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'venice': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        const apiUrl = await fetchJson(`https://vapis.my.id/api/veniceai?q=${Enc(text)}`)
        const gpt = apiUrl.result
        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'gpt3':
    case 'gpt-3': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        let prompt = 'Your name is GPT-3 and use Indonesian as your primary language.'
        const apiUrl = await fetchJson(`https://api.siputzx.my.id/api/ai/gpt3?prompt=${Enc(prompt)}&content=${Enc(text)}`)
        const gpt = apiUrl.data
        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'naw':
    case 'nawai':
    case 'naw-ai': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`)
        const apiUrl = await fetchJson(`https://api.siputzx.my.id/api/ai/naw?content=${Enc(text)}`)
        const response = apiUrl.data.chatResponse

        m.reply(response)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'src':
    case 'search': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`)

        async function AI(content) {
          try {
            const response = await axios.post('https://luminai.my.id/', {
              content,
              cName: "Vioo-Search",
              cID: "Vioo-Search74zAcw5"
            });
            return response.data
          } catch (error) {
            console.error(error)
            throw error
          }
        }
        let sai = await AI(text)
        let pe = sai.result
        m.reply(sai.result)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'aisrc': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        let prompt = `Nama kamu ${botname} yang diciptakan oleh Leoo, gunakan kata "kamu" untuk mereka dan "aku" untuk dirimu.`
        let res = await fetchJson(`https://api.siputzx.my.id/api/ai/yanzgpt?query=${Enc(text)}&prompt=${Enc(prompt)}&modelType=yanzgpt-revolution-25b-v3.0`);
        m.reply(res.data.choices[0].message.content)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'claude':
    case 'claude-ai': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`);
        let prompt = 'Your name is Claude-AI and use Indonesian as your primary language.'
        const apiUrl = await fetchJson(`https://api.siputzx.my.id/api/ai/llama?prompt=${Enc(prompt)}&message=${Enc(text)}`)
        const gpt = apiUrl.data
        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan');
      }
    }
    break

    case 'pbai':
    case 'pb-ai':
    case 'powerbrain': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`)

        const {
          powerbrain
        } = require('./lib-signal/data-utils/scrape')
        const res = await powerbrain(`${Enc(text)}`)
        m.reply(`${res}`)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'deepseek-ai':
    case 'deepseek':
    case 'dp-ai': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} hai`)
        const apiUrl = await fetchJson(`https://api.siputzx.my.id/api/ai/deepseek-llm-67b-chat?content=${Enc(text)}`)
        const gpt = apiUrl.data
        m.reply(`${gpt}`)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'createbaby':
case 'cbaby':
case 'aibaby': {
  if (!text) return m.reply(`Contoh: ${p_c} urlBapak, urlEmak, gender`)
  const [url1, url2, gender] = text.split(',').map(x => x.trim())
  if (!url1 || !url2) return m.reply(`Contoh: ${p_c} urlBapak, urlEmak, gender`)
  if (gender && gender !== 'girl' && gender !== 'boy') return m.reply(`Contoh: ${p_c} urlBapak, urlEmak, boy`)

  try {
    lyreact()
    const apiUrl = `https://api.zpi.my.id/v1/ai/baby-generator?gender=${gender || 'girl'}&father=${encodeURIComponent(url1)}&mother=${encodeURIComponent(url2)}`
    const { data } = await fetchJson(apiUrl)
    
    await Lyrra.sendMessage(m.chat, { image: { url: data.choices.content }, caption: wm }, { quoted: m })
  } catch (err) {
    console.error(err)
    m.reply('Terjadi kesalahan: '+err.message)
  }
}
break

    // === Search Menu

    case 'playstore':
    case 'pstore': {
      if (!text) return m.reply(`Contoh: ${p_c} whatsapp`);
      try {
        let loo = await fetchJson(`https://api.vreden.web.id/api/playstore?query=${Enc(text)}`);
        let results = loo.result;

        if (!results.length) return m.reply('Tidak ada hasil ditemukan.');
        let gambar = results[0]?.img;
        let teks = results.map((yoo, i) => {
          return `*${i + 1}. ${text.toUpperCase()}*
Developer: ${yoo.developer}
Rating: ${yoo.rate2}
Link: ${yoo.link}
Link Developer: ${yoo.link_dev}`;
        }).join('\n\n');
        await Lyrra.sendMessage(m.chat, {
          image: {
            url: gambar
          },
          caption: teks
        }, {
          quoted: m
        });
      } catch (err) {
        console.error(err);
        m.reply(err.toString());
      }
    }
    break

    case 'playstation':
    case 'pstation': {
      if (!text) return m.reply(`Contoh: ${p_c} Naruto`);
      try {
        let loo = await fetchJson(`https://fastrestapis.fasturl.cloud/search/playstation?query=${Enc(text)}`);
        let gambar = loo.result[0]?.images;
        let teks = loo.result.map((yoo, i) => {
          return `*${i + 1}. ${yoo.title.toUpperCase()}*
Link: ${yoo.link}`;
        }).join('\n\n');
        await Lyrra.sendMessage(m.chat, {
          image: {
            url: gambar
          },
          caption: teks
        }, {
          quoted: m
        });
      } catch (err) {
        console.error(err);
        m.reply(err.toString());
      }
    }
    break

    case 'google': {
      if (!text) return m.reply(`Contoh: ${p_c} Lyrra`)
      const apiKey = 'AIzaSyAajE2Y-Kgl8bjPyFvHQ-PgRUSMWgBEsSk'
      const cx = 'e5c2be9c3f94c4bbb'
      const query = Enc(text)
      const url = `https://www.googleapis.com/customsearch/v1?q=${query}&key=${apiKey}&cx=${cx}`
      fetch(url).then(response => response.json()).then(data => {
        if (data.items && data.items.length > 0) {
          let teks = `Hasil pencarian Google: ${kapital(text)}\n\n`
          data.items.forEach(item => {
            teks += `• Judul: ${item.title}\n`
            teks += `• Deskripsi: ${item.snippet}\n`
            teks += `• Link: ${item.link}\n\n`
          })
          m.reply(teks)
        } else {
          m.reply('Tidak ada hasil yang ditemukan')
        }
      }).catch(err => {
        m.reply('Terjadi kesalahan')
      })
    }
    break

    case 'chrome':
    case 'chromes':
    case 'chromesrc':
    case 'chromesearch': {
      if (!text) return m.reply(`Contoh: ${p_c} Lyrra`);

      const {
        Chrome
      } = require('./lib-signal/data-utils/scrape')
      Chrome(text).then(results => {
        if (results.length > 0) {
          let hasil = '';

          results.forEach(item => {
            hasil += `• Judul: ${item.title}\n` +
              `• Publisher: ${item.publisher}\n` +
              `• Rating: ${item.rating} (${item.ratingCount} ulasan)\n` +
              `• Link: ${item.link}\n\n`;
          });

          try {
            Lyrra.sendMessage(
              m.chat, {
                image: {
                  url: results[0].imgSrc
                },
                caption: hasil
              }, {
                quoted: m
              }
            );
          } catch (err) {
            m.reply(hasil);
          }
        } else {
          m.reply('Terjadi kesalahan')
        }
      }).catch(err => {
        m.reply('Terjadi kesalahan: ' + err.message);
      })
    }
    break

    case 'gimage': {
      if (!text) return m.reply(`Contoh: ${p_c} Lyrra`)
      lyreact()

      try {
        const {
          gimage
        } = require('./lib-signal/data-utils/scrape')
        const images = await gimage(text)
        if (!images.length) return m.reply('Gambar tidak ditemukan')

        const randomImage = images[Math.floor(Math.random() * images.length)].link

        const buttons = [{
          buttonId: `${_p}gimage ${text}`,
          buttonText: {
            displayText: 'Next'
          },
          type: 1
        }]

        await Lyrra.sendMessage(m.chat, {
          image: {
            url: randomImage
          },
          caption: 'Lanjut mencari gambar yang sama? Klik tombol *Next* dibawah ini',
          buttons,
          headerType: 1,
          viewOnce: true
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(`Terjadi kesalahan: ${err}`)
      }
    }
    break

    case 'bingsrc':
case 'bingsearch': {
    try {
        if (!text) return m.reply(`Contoh: ${p_c} mbappe`)
        let { data } = await axios.get(`https://fastrestapis.fasturl.link/search/bingsearch?ask=${Enc(text)}`)
        if (!data.result || data.result.length === 0) return m.reply('Tidak ada hasil yang ditemukan.')

        let allResults = data.result.map(kep => 
            `*Title:* ${kep.title}\n*Desc:* ${kep.description}\n*Link:* ${kep.link}`
        ).join('\n\n')

        m.reply(allResults)
    } catch (err) {
        m.reply('Terjadi kesalahan: '+err)
    }
}
break

case 'bingimg':
case 'bingimage': {
    try {
        if (!text) return m.reply(`Contoh: ${p_c} mbappe`)
        let { data } = await axios.get(`https://fastrestapis.fasturl.link/search/bingimage?ask=${Enc(text)}`)
        if (!data.result || data.result.length === 0) return m.reply('Tidak ada gambar yang ditemukan.')

        let allResults = data.result.map(kep => 
            `*Title:* ${kep.title}\n*Image:* ${kep.imageUrl}\n*Thumbnail:* ${kep.thumbnailUrl}\n*Page:* ${kep.pageUrl}`
        ).join('\n\n')

        m.reply(allResults)
    } catch (err) {
        m.reply('Terjadi kesalahan: '+err)
    }
}
break

    case 'bingvd':
    case 'bingvidio':
    case 'bingvideo': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} mbappe`)
        let results = await fetchJson(`https://vapis.my.id/api/bingsrc?q=${Enc(text)}`)
        let allResults = results.data.map(kep => {
          return `Judul: ${kep.title}\nDurasi: ${kep.duration}\nPenonton: ${kep.views}\nChannel: ${kep.channel}\nLink: ${kep.link}\n`
        }).join('\n')

        Lyrra.sendMessage(m.chat, {
          text: allResults
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
        console.error('Error:', err)
      }
    }
    break

    case 'yts':
    case 'ytsearch': {
      if (!text) return m.reply(`Contoh: ${p_c} aku yang tersakiti`)
      try {
        lyreact()
        let srcc = await yt_search(text)
        let teks = `*YOUTUBE - SEARCH*\n\nHasil dari: ${kapital(text)}\n\n`
        for (let i of srcc) {
          teks += `Judul: ${i.title}\nChannel: ${i.author}\nDiupload: ${i.ago}\nDurasi: ${i.duration}\nViews: ${toRupiah(i.views)}\nLink: ${i.url}\n\n`
        }
        Lyrra.sendMessage(m.chat, {
          image: {
            url: srcc[0]?.thumbnail
          },
          caption: teks
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(`Terjadi kesalahan: ${err}`)
      }
    }
    break

    case 'putar':
    case 'lagu':
    case 'music':
    case 'ytplay':
    case 'play': {
      if (!text) return m.reply(`*Masukan Judul Lagu!*\n\nContoh :\n${prefix + command} My Little Darkage`)
      var search = await ytdl.search(text);
      var data = search.results.filter(objek => objek.type === "video")
      var convert = data[0]
      if (!convert) return m.reply('Video/Audio Tidak Ditemukan')
      lyreact()
      let caption = `*${convert.title}*\n\n*${vircion} Format* : ${command}\n*${vircion} ID* : ${convert.videoId}\n*${vircion} Durasi* : ${convert.timestamp}\n*${vircion} Upload* : ${convert.ago}\n*${vircion} Link* : ${convert.url}\n\n\n_*Select type...*_`
      let ytimage = convert.thumbnail
      try {
        const imageBuffer = await axios.get(ytimage, {
            responseType: 'arraybuffer'
          })
          .then(response => Buffer.from(response.data, 'binary'));
        let button = [{
          "name": "single_select",
          "buttonParamsJson": `{
"title": "Select Type🔎",
"sections": [
{
title: "Download Audio YouTube 🎶",
rows: [
{
"title": "Download Audio",
"description": "YouTube Audio",
"id": "${_p}ytmp3 ${convert.url}"
}
]
},
{
title: "Download YouTube Video 📹",
rows: [
{
"title": "Download Video",
"description": "YouTube Video",
"id": "${_p}ytmp4 ${convert.url}"
}
]
}
]
}`
        }]
        Lyrra.sendButtonImage(m.chat, null, caption, imageBuffer, button, null, m)
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan: ' + err);
      }
    }
    break

    case 'video': {
      if (!m.quoted) return m.reply('Kutip pesan hasil dari fitur play.');
      lyreact();

      let urls = quoted.text.match(/(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/|v\/)|youtu\.be\/)([\w-]{11})(?:[&?][\w=]*)*/gi);

      if (!urls) return m.reply('URL tidak valid atau tidak ditemukan dalam pesan yang dikutip.');

      await downloadMp4(urls[0]);
    }
    break

    case 'audio': {
      if (!m.quoted) return m.reply('Kutip pesan hasil dari fitur play.');
      lyreact();

      let urls = quoted.text.match(/(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/|v\/)|youtu\.be\/)([\w-]{11})(?:[&?][\w=]*)*/gi);

      if (!urls) return m.reply('URL tidak valid atau tidak ditemukan dalam pesan yang dikutip.');

      await downloadMp3(urls[0]);
    }
    break

    case 'ytmp4':
    case 'ytv':
    case 'ytvideo': {
      if (!text) return m.reply(`Contoh: ${prefix+command} linknya`)
      lyreact();
      const response = await ytdlv2(args[0], 'mp4', args[1] ? args[1] : 480)
      await Lyrra.sendMessage(m.chat, {
        video: fs.readFileSync(response.download),
        caption: `Title: ${response.file_name}\nSize: ${response.file_size}`,
        quoted: m
      })
      fs.unlinkSync(response.download)
    }
    break

    case 'ytmp3':
    case 'yta':
    case 'ytaudio': {
      if (!text) return m.reply(`Contoh: ${prefix+command} linknya`)
      lyreact();
      const response = await ytdlv2(args[0], 'mp3', args[1] ? args[1] : 128)
      await Lyrra.sendMessage(m.chat, {
        audio: fs.readFileSync(response.download),
        mimetype: 'audio/mpeg'
      }, {
        quoted: m
      })
      fs.unlinkSync(response.download)
    }
    break

    case 'ytmp3doc':
    case 'ytdoc':
    case 'ytdocument': {
      if (!text) return m.reply(`*Penggunaan salah!*\n\nContoh:\n${prefix + command} linknya`)
      if (!text.match('youtu')) return m.reply('Link Kamu Salah!')
      await Lyrra.sendMessage(m.chat, {
        react: {
          text: "⏱️",
          key: m.key,
        }
      })
      YouTubeDoc(args[0], args[1])
    }
    break

    case 'ttsearch':
    case 'tiktoksearch': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} Lyrraa`)
        await lyreact()
        let serach = await tiktokSearchVideo(text)
        let teks = '*TIKTOK - SEARCH*\n\n'
        let no = 1
        for (let i of serach.videos) {
          let sut = await JSON.stringify(i.author)
          teks += `• No Urutan: ${no++}\n• Capt: ${i.title}\n• Username: ${i.author.unique_id}\n• Nickname: ${i.author.nickname}\n• Durasi: ${toRupiah(i.duration)} detik\n• Like: ${toRupiah(i.digg_count)}\n• Komentar: ${toRupiah(i.comment_count)}\n• Share: ${toRupiah(i.share_count)}\n• Url: https://www.tiktok.com/@${i.author.unique_id}/video/${i.video_id}\n\n\n`
        }
        Lyrra.sendMessage(m.chat, {
          video: {
            url: `https://tikwm.com${serach.videos[0].play}`
          },
          caption: teks
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(`Terjadi kesalahan`);
      }
    }
    break

    case 'ttget': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} 1`)
        if (!m.quoted) return m.reply('Kutip pesan ttsearch bot!')
        let urls = quoted.text.match(new RegExp(/(http(?:s)?:\/\/)?(?:www\.)?(?:tiktok\.com\/@[^\/]+\/video\/(\d+))|(http(?:s)?:\/\/)?vm\.tiktok\.com\/([^\s&]+)|(http(?:s)?:\/\/)?vt\.tiktok\.com\/([^\s&]+)/, 'gi'))
        if (!urls) return m.reply(`Mungkin pesan yang kamu reply tidak mengandung hasil ttsearch`)
        await lyreact()
        let anu = await fetchJson(`https://api.vreden.web.id/api/tiktok?url=${urls[text - 1]}`)
        let c = 0
        for (let imgs of anu.result.data) {
          if (imgs.type == "nowatermark") {
            Lyrra.sendMessage(m.chat, {
              video: {
                url: imgs.url
              },
              caption: `© ${wm}`
            }, {
              quoted: m
            })
          } else if (imgs.type == "photo") {
            if (c == 0) await Lyrra.sendMessage(m.chat, {
              image: {
                url: imgs.url
              },
              caption: `© ${wm}\n\n${m.isGroup ? 'Sisa foto dikirim di privat chat' : ""}`
            }, {
              quoted: m
            })
            else await Lyrra.sendMessage(m.sender, {
              image: {
                url: imgs.url
              }
            }, {
              quoted: m
            })
            c += 1
            await sleep(2000)
          }
        }
      } catch (err) {
        try {
          const data = await tiktokdl(urls[text - 1])
          console.log(data)
          Lyrra.sendMessage(m.chat, {
            video: {
              url: data.video
            },
            caption: `© ${wm}`
          }, {
            quoted: m
          })
        } catch (err) {
          m.reply('Terjadi kesalahan')
        }
      }
    }
    break

    case 'playistspotify':
    case 'playspotify':
    case 'spotifyplay':
    case 'spotifys':
    case 'spotifysearch': {
      if (!text) {
        return m.reply(`Contoh: ${p_c} where we are`)
      }
      lyreact()
      try {
        let results = await spotifySearch(text)
        if (!results || !Array.isArray(results) || results.length === 0) return m.reply('Lagu tidak ditemukan.')
        const body = `*SPOTIFY - SEARCH*\n\n*${vircion} Name* : ${results[0].name}\n*${vircion} Artist* : ${results[0].artists}\n`
        let imgthumb = `https://api.vreden.my.id/api/spotifyimage?image=https://telegra.ph/file/eaa4ee777d5839f97f4c2.jpg&title=${results[0].name}&author=Spotify+Playlist&album=${results[0].artists}`
        let imageBuffer = await axios.get(imgthumb, {
            responseType: 'arraybuffer'
          })
          .then(response => Buffer.from(response.data, 'binary'));
        let button = [{
          "name": "single_select",
          "buttonParamsJson": JSON.stringify({
            "title": "Select Playlist🔎",
            "sections": results.slice(0, 50).map((track, index) => ({
              "title": `${track.name}`,
              "rows": [{
                "header": "[ Play Audio ]",
                "title": `Music By ${track.artists}`,
                "description": `Link : ${track.link}`,
                "id": `${_p}spotifydl ${track.link}`
              }, ]
            }))
          })
        }]
        await Lyrra.sendButtonImage(m.chat, null, body, imageBuffer, button, null, m)
      } catch (err) {
        m.reply('Terjadi Kesalahan saat mengompres music silahkan ulangi lagi command dengan judul lagu')
      }
    }
    break

    case 'pin':
    case 'pinsrc':
    case 'pinimg':
    case 'pinsearch':
    case 'pinterestsearch':
    case 'scrollpin':
    case 'pinimage':
    case 'pinterest': {
      if (!text) return m.reply(`Contoh: ${p_c} Lyrraa`)
      lyreact()
      try {
        let hasil = await pinterest(text)
        if (!hasil) return m.reply('Gambar tidak ditemukan.')
        const buttons = [{
          buttonId: `${_p}pin ${text}`,
          buttonText: {
            displayText: 'Next'
          },
          type: 1
        }]

        await Lyrra.sendMessage(m.chat, {
          image: {
            url: hasil
          },
          caption: 'Lanjut mencari gambar yang sama? Klik tombol *Next* dibawah ini',
          footer: wm,
          buttons: buttons,
          headerType: 1,
          viewOnce: true
        }, {
          quoted: m
        })
      } catch (err) {
        console.error(err.message)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'pin2':
    case 'pinsrc2':
    case 'pinimg2':
    case 'pinsearch2':
    case 'pinterestsearch2':
    case 'scrollpin2':
    case 'pinimage2':
    case 'pinterest2': {
      if (!text) return m.reply(`Contoh: ${p_c} Lyrra`)
      lyreact()

      async function createImage(url) {
        const {
          imageMessage
        } = await generateWAMessageContent({
          image: {
            url
          }
        }, {
          upload: Lyrra.waUploadToServer
        })
        return imageMessage
      }

      let anutrest = await pinterest(text)

      anutrest = anutrest.sort(() => Math.random() - 0.5).slice(0, 5)

      let push = []
      let i = 1
      for (let message of anutrest) {
        push.push({
          body: proto.Message.InteractiveMessage.Body.fromObject({
            text: `Uploaded by: ${message.upload_by}\n`
          }),
          footer: proto.Message.InteractiveMessage.Footer.fromObject({
            text: global.wm
          }),
          header: proto.Message.InteractiveMessage.Header.fromObject({
            title: `*Gambar ke ${i++}*`,
            hasMediaAttachment: true,
            imageMessage: await createImage(message.image)
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
            buttons: [{
              "name": "cta_url",
              "buttonParamsJson": `{
                        "display_text": "Visit",
                        "url": "${message.source}", 
                        "merchant_url": "${message.source}"
                    }`
            }]
          })
        })
      }

      const msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
            messageContextInfo: {
              deviceListMetadata: {},
              deviceListMetadataVersion: 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.fromObject({
              body: proto.Message.InteractiveMessage.Body.create({
                text: 'Sukses!'
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: null
              }),
              header: proto.Message.InteractiveMessage.Header.create({
                hasMediaAttachment: false
              }),
              carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
                cards: push
              })
            })
          }
        }
      }, {
        quoted: m
      })

      await Lyrra.relayMessage(m.chat, msg.message, {
        messageId: msg.key.id
      })
    }
    break

    case 'news': {
      if (!text) return m.reply(`Contoh: ${p_c} teknologi`);
      lyreact2('📰')

      try {
        let anu = await fetchJson(`https://newsapi.org/v2/everything?q=${Enc(text)}&apiKey=3cda4de297d2474ba036b3529265ca49`);
        let articles = anu.articles;
        if (!articles.length) return m.reply('Tidak ada berita yang ditemukan.');

        let result = articles[Math.floor(Math.random() * articles.length)];
        let newsContent = `*${result.title}*\n\n${result.description}\n\n[Read more](${result.url})`;

        Lyrra.sendMessage(m.chat, {
          text: newsContent
        }, {
          quoted: m
        });
      } catch (err) {
        m.reply('Terjadi kesalahan saat mencari berita.');
      }
    }
    break

    case 'wiki': {
      if (!text) return m.reply(`Contoh: ${p_c} javascript`);
      lyreact2('📚')

      try {
        let anu = await fetchJson(`https://en.wikipedia.org/w/api.php?action=query&format=json&titles=${Enc(text)}&prop=extracts&exintro&explaintext`);
        let page = Object.values(anu.query.pages)[0];
        if (!page.extract) return m.reply('Artikel tidak ditemukan.');

        let wikiContent = `*${page.title}*\n\n${page.extract}`;

        Lyrra.sendMessage(m.chat, {
          text: wikiContent
        }, {
          quoted: m
        });
      } catch (err) {
        m.reply('Terjadi kesalahan saat mencari artikel Wikipedia.');
      }
    }
    break

    case 'wikipedia': {
      if (!text) return m.reply(`Contoh: ${p_c} javascript`)

      try {
        const {
          wikipedia
        } = require('./lib-signal/data-utils/scrape')
        let hasil = await wikipedia(text)
        let wikiContent = hasil.map(item => `*${item.judul}*\n${item.desk}\n${item.link}`).join('\n\n')

        m.reply(wikiContent)
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'wikimedia': {
      if (!text) return m.reply(`Contoh: ${p_c} javascript`)

      try {
        const {
          wikimedia
        } = require('./lib-signal/data-utils/scrape')
        let hasil = await wikimedia(text)
        let item = hasil[0]

        if (item) {
          let caption = hasil.map((v, i) => `${i + 1}. Title: ${v.title}\nSource: ${v.source}`).join('\n\n')
          Lyrra.sendMessage(m.chat, {
            image: {
              url: item.image
            },
            caption: caption
          }, {
            quoted: m
          })
        } else {
          m.reply('Gambar tidak ditemukan.')
        }
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'npms':
    case 'npmsearch': {
      if (!text) return m.reply(`Contoh ${p_c} nama package`)
      let res = await fetch(`http://registry.npmjs.com/-/v1/search?text=${text}`)
      let {
        objects
      } = await res.json()
      if (!objects.length) return m.reply('Tidak ditemukan')
      let txt = objects.map(({
        package: pkg
      }) => {
        return `*${pkg.name}* (v${pkg.version})\n_${pkg.links.npm}_\n_${pkg.description}_`
      }).join`\n\n`
      m.reply(txt)
    }
    break

    case 'lirik':
case 'liriklagu': {
    if (!text) return m.reply(`Contoh: ${p_c} laskar pelangi`)
    try {
        const { result } = await fetchJson(`https://api.nyxs.pw/tools/lirik?title=${encodeURIComponent(text)}`)
        if (!result) return m.reply('Lirik tidak ditemukan.')

        let teks = `🎵 *${text}* 🎵\n\n` +
            `🎶 *Lirik:* \n${result}`

        m.reply(teks)
    } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
    }
}
break

case 'lirik2':
case 'liriklagu2': {
    if (!text) return m.reply(`Contoh: ${p_c} laskar pelangi`)
    try {
        const { data } = await fetchJson(`https://api.agatz.xyz/api/lirik?message=${encodeURIComponent(text)}`)
        if (!data?.status) return m.reply('Lirik tidak ditemukan.')

        let teks = `🎵 *${data.title || '-'}* 🎵\n\n` +
            `📀 *Album:* ${data.album || '-'}\n\n` +
            `🎶 *Lirik:* \n${data.lyrics || '-'}`

        if (data.thumb) {
            await Lyrra.sendMessage(m.chat, { image: { url: data.thumb }, caption: teks }, { quoted: m })
        } else {
            m.reply(teks)
        }
    } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
    }
}
break

    case 'kodepos': {
      if (!text) return m.reply('Mau kota mana?')
      try {
        let jr = await fetchJson(`https://itzpire.com/search/kodepos?query=${Enc(text)}`)
        let jo = jr.data
        let txt = `Hasil searching ${kapital(text)}:\n\n`

        jo.forEach(item => {
          txt += `Kode Pos: ${item.code}\n`
          txt += `Desa/Kelurahan: ${item.village}\n`
          txt += `Kecamatan: ${item.district}\n`
          txt += `Kabupaten/Kota: ${item.regency}\n`
          txt += `Provinsi: ${item.province}\n`
          txt += `Koordinat: ${item.latitude}, ${item.longitude}\n`
          txt += `Elevasi: ${item.elevation} m\n`
          txt += `Zona Waktu: ${item.timezone}\n\n`
        })

        m.reply(txt)
      } catch (err) {
        console.error(err)
        m.reply('Ada kesalahan saat mengambil data')
      }
    }
    break

    case 'sound1':
    case 'sound2':
    case 'sound3':
    case 'sound4':
    case 'sound5':
    case 'sound6':
    case 'sound7':
    case 'sound8':
    case 'sound9':
    case 'sound10':
    case 'sound11':
    case 'sound12':
    case 'sound13':
    case 'sound14':
    case 'sound15':
    case 'sound16':
    case 'sound17':
    case 'sound18':
    case 'sound19':
    case 'sound20':
    case 'sound21':
    case 'sound22':
    case 'sound23':
    case 'sound24':
    case 'sound25':
    case 'sound26':
    case 'sound27':
    case 'sound28':
    case 'sound29':
    case 'sound30':
    case 'sound31':
    case 'sound32':
    case 'sound33':
    case 'sound34':
    case 'sound35':
    case 'sound36':
    case 'sound37':
    case 'sound38':
    case 'sound39':
    case 'sound40':
    case 'sound41':
    case 'sound42':
    case 'sound43':
    case 'sound44':
    case 'sound45':
    case 'sound46':
    case 'sound47':
    case 'sound48':
    case 'sound49':
    case 'sound50':
    case 'sound51':
    case 'sound52':
    case 'sound53':
    case 'sound54':
    case 'sound55':
    case 'sound56':
    case 'sound57':
    case 'sound58':
    case 'sound59':
    case 'sound60':
    case 'sound61':
    case 'sound62':
    case 'sound63':
    case 'sound64':
    case 'sound65':
    case 'sound66':
    case 'sound67':
    case 'sound68':
    case 'sound69':
    case 'sound70':
    case 'sound71':
    case 'sound72':
    case 'sound73':
    case 'sound74':
    case 'sound75':
    case 'sound76':
    case 'sound77':
    case 'sound78':
    case 'sound79':
    case 'sound80':
    case 'sound81':
    case 'sound82':
    case 'sound83':
    case 'sound84':
    case 'sound85':
    case 'sound86':
    case 'sound87':
    case 'sound88':
    case 'sound89':
    case 'sound90':
    case 'sound91':
    case 'sound92':
    case 'sound93':
    case 'sound94':
    case 'sound95':
    case 'sound96':
    case 'sound97':
    case 'sound98':
    case 'sound99':
    case 'sound100':
    case 'sound101':
    case 'sound102':
    case 'sound103':
    case 'sound104':
    case 'sound105':
    case 'sound106':
    case 'sound107':
    case 'sound108':
    case 'sound109':
    case 'sound110':
    case 'sound111':
    case 'sound112':
    case 'sound113':
    case 'sound114':
    case 'sound115':
    case 'sound116':
    case 'sound117':
    case 'sound118':
    case 'sound119':
    case 'sound120':
    case 'sound121':
    case 'sound122':
    case 'sound123':
    case 'sound124':
    case 'sound125':
    case 'sound126':
    case 'sound127':
    case 'sound128':
    case 'sound129':
    case 'sound130':
    case 'sound131':
    case 'sound132':
    case 'sound133':
    case 'sound134':
    case 'sound135':
    case 'sound136':
    case 'sound137':
    case 'sound138':
    case 'sound139':
    case 'sound140':
    case 'sound141':
    case 'sound142':
    case 'sound143':
    case 'sound144':
    case 'sound145':
    case 'sound146':
    case 'sound147':
    case 'sound148':
    case 'sound149':
    case 'sound150':
    case 'sound151':
    case 'sound152':
    case 'sound153':
    case 'sound154':
    case 'sound155':
    case 'sound156':
    case 'sound157':
    case 'sound158':
    case 'sound159':
    case 'sound160':
    case 'sound161':
    case 'sound162':
    case 'sound163':
    case 'sound164':
    case 'sound165':
    case 'sound166':
    case 'sound167':
    case 'sound168':
    case 'sound169':
    case 'sound170':
    case 'sound171':
    case 'sound172':
    case 'sound173':
    case 'sound174':
    case 'sound175':
    case 'sound176':
    case 'sound177':
    case 'sound178':
    case 'sound179':
    case 'sound180':
    case 'sound181':
    case 'sound182':
    case 'sound183':
    case 'sound184':
    case 'sound185':
    case 'sound186':
    case 'sound187':
    case 'sound188':
    case 'sound189':
    case 'sound190':
    case 'sound191':
    case 'sound192':
    case 'sound193':
    case 'sound194':
    case 'sound195':
    case 'sound196':
    case 'sound197':
    case 'sound198':
    case 'sound199':
    case 'sound200':
    case 'sound201':
    case 'sound202':
    case 'sound203':
    case 'sound204':
    case 'sound205':
    case 'sound206':
    case 'sound207':
    case 'sound208':
    case 'sound209':
    case 'sound210':
    case 'sound211':
    case 'sound212':
    case 'sound213':
    case 'sound214':
    case 'sound215':
    case 'sound216':
    case 'sound217':
    case 'sound218':
    case 'sound219':
    case 'sound220':
    case 'sound221':
    case 'sound222':
    case 'sound223':
    case 'sound224':
    case 'sound225':
    case 'sound226':
    case 'sound227':
    case 'sound228':
    case 'sound229':
    case 'sound230':
    case 'sound231':
    case 'sound232':
    case 'sound233':
    case 'sound234':
    case 'sound235':
    case 'sound236':
    case 'sound237':
    case 'sound238':
    case 'sound239':
    case 'sound240':
    case 'sound241':
    case 'sound242':
    case 'sound243':
    case 'sound244':
    case 'sound245':
    case 'sound246':
    case 'sound247':
    case 'sound248':
    case 'sound249':
    case 'sound250': {
      try {
        let link = `https://raw.githubusercontent.com/Leoo7z/Music/main/${command}.mp3`
        await Lyrra.sendMessage(m.chat, {
          audio: {
            url: link
          },
          mimetype: 'audio/mpeg'
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(`Terjadi kesalahan: ${err}`)
      }
    }
    break

    case 'sad1':
    case 'sad2':
    case 'sad3':
    case 'sad4':
    case 'sad5':
    case 'sad6':
    case 'sad7':
    case 'sad8':
    case 'sad9':
    case 'sad10':
    case 'sad11':
    case 'sad12':
    case 'sad13':
    case 'sad14':
    case 'sad15':
    case 'sad16':
    case 'sad17':
    case 'sad18':
    case 'sad19':
    case 'sad20':
    case 'sad21':
    case 'sad22':
    case 'sad23':
    case 'sad24':
    case 'sad25':
    case 'sad26':
    case 'sad27':
    case 'sad28':
    case 'sad29':
    case 'sad30':
    case 'sad31':
    case 'sad32':
    case 'sad33':
    case 'sad34':
    case 'sad35':
    case 'sad36':
    case 'sad37':
    case 'sad38':
    case 'sad39':
    case 'sad40':
    case 'sad41':
    case 'sad42':
    case 'sad43':
    case 'sad44':
    case 'sad45':
    case 'sad46':
    case 'sad47':
    case 'sad48':
    case 'sad49':
    case 'sad50':
    case 'sad51':
    case 'sad52':
    case 'sad53':
    case 'sad54':
    case 'sad55': {
      try {
        let link = `https://raw.githubusercontent.com/Leoo7z/Music/main/sad-music/${command}.mp3`
        await Lyrra.sendMessage(m.chat, {
          audio: {
            url: link
          },
          mimetype: 'audio/mpeg'
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(`Terjadi kesalahan: ${err}`)
      }
    }
    break

    case 'xvideos':
    case 'xvidsearch': {
      if (!text) return m.reply(`Contoh: ${p_c} pink pussy`)
      try {
        lyreact()
        let searchResults = await fetchJson(`https://api.agatz.xyz/api/xvideo?message=${text}`)
        let videos = searchResults.data
        let teks = `*XVIDEO - SEARCH*\n\nHasil dari: ` + `${kapital(text)}` + `\n\n`
        for (let i of videos) {
          teks += `Judul: ${kapital(i.title)}\nDurasi: ${i.duration}\nLink: ${i.url}\n\n`
        }
        Lyrra.sendMessage(m.chat, {
          image: {
            url: videos[0].thumb
          },
          caption: teks
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(`Terjadi kesalahan: ${err}`)
      }
    }
    break

    case 'xnxxs':
    case 'xnxxsearch': {
      if (!text) return m.reply(`Contoh: ${p_c} pink pussy`)
      try {
        lyreact()
        let searchResults = await fetchJson(`https://api.agatz.xyz/api/xnxx?message=${text}`)
        let videos = searchResults.data.result
        let teks = `*XVIDEO - SEARCH*\n\nHasil dari: ` + `${kapital(text)}` + `\n\n`
        for (let i of videos) {
          teks += `Judul: ${kapital(i.title)}\nInfo: ${i.info}\nLink: ${i.link}\n\n`
        }
        await Lyrra.sendMessage(m.chat, {
          text: teks
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply(`Terjadi kesalahan: ${err}`)
      }
    }
    break

    case 'recipe':
    case 'resep':
    case 'recipesrc':
    case 'cariresep': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} pizza`)

        const {
          search_resep
        } = require('./lib-signal/data-utils/scrape')
        let results = await search_resep(text)
        if (results.length === 0) return m.reply('Tidak ditemukan resep yang sesuai dengan pencarian.')

        let message = `*LIST RESEP ${text.toUpperCase()}:*\n\n`
        results.forEach((item, index) => {
          message += `${index + 1}. *${item.title}*\nPembuat: ${item.author}\nWaktu Masak: ${item.time}\nLink: ${item.url}\n\n`
        })

        m.reply(message.trim())
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'bacaresep':
    case 'baca-resep': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)

        const {
          detail_resep
        } = require('./lib-signal/data-utils/scrape')
        let result = await detail_resep(text)
        if (!result.title) return m.reply('Gagal mengambil data atau resep tidak ditemukan.')

        let message = `🍽️ *${result.title.toUpperCase()}*\n\n`
        if (result.description) message += `*Deskripsi*: ${result.description}\n\n`
        if (result.step.length > 0) {
          message += `*Langkah-Langkah:*\n`
          result.step.forEach((step, index) => {
            message += `${index + 1}. ${step}\n`
          })
        }

        Lyrra.sendMessage(m.chat, {
          image: {
            url: result.image
          },
          caption: message.trim()
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'recipe2':
    case 'resep2':
    case 'recipesrc2':
    case 'cariresep2': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} pizza`)

        const {
          cariresep
        } = require('./lib-signal/data-utils/scrape')
        const results = await cariresep(`${Enc(text)}`)
        if (results.data.length === 0) return m.reply('Tidak ditemukan resep yang sesuai dengan pencarian.')

        let message = `*LIST RESEP ${text.toUpperCase()}:*\n\n`
        results.data.forEach((item, index) => {
          message += `${index + 1}. *${item.judul}*\nLink: ${item.link}\n\n`
        })

        m.reply(message.trim())
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'bacaresep2':
    case 'baca-resep2': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} linknya`)

        const {
          bacaresep
        } = require('./lib-signal/data-utils/scrape')
        let result = await bacaresep(text)
        if (!result.judul_nya) return m.reply('Gagal mengambil data atau resep tidak ditemukan.')

        let message = `🍽️ *${result.judul_nya.toUpperCase()}*\n\n`
        if (result.waktu_nya) message += `*Waktu Masak*: ${result.waktu_nya}\n`
        if (result.hasil_nya) message += `*Hasil*: ${result.hasil_nya}\n`
        if (result.tingkat_kesulitan) message += `*Tingkat Kesulitan*: ${result.tingkat_kesulitan}\n`
        if (result.bahan_nya) message += `*Bahan-Bahan:*\n${result.bahan_nya}\n`
        if (result.langkah_langkah) message += `*Langkah-Langkah:*\n${result.langkah_langkah}\n`

        Lyrra.sendMessage(m.chat, {
          image: {
            url: result.thumb_nya
          },
          caption: message.trim()
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'info-cuaca':
    case 'cuacainfo':
    case 'weather':
    case 'weatherinfo':
    case 'cuaca':
    case 'infocuaca': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} medan`)

        const url = `https://api.agatz.xyz/api/cuaca?message=${Enc(text)}`
        const result = await fetchJson(url)

        if (result.status !== 200 || !result.data) {
          return m.reply('Gagal mengambil data')
        }

        const {
          location,
          current
        } = result.data
        let message = `🌤️ *••> INFO CUACA*\n\n`
        message += `*• Lokasi:* ${location.name}, ${location.region}, ${location.country}\n`
        message += `*• Cuaca:* ${current.condition.text}\n`
        message += `*• Suhu:* ${current.temp_c}°C\n`
        message += `*• Terasa Seperti:* ${current.feelslike_c}°C\n`
        message += `*• Kelembapan:* ${current.humidity}%\n`
        message += `*• Kecepatan Angin:* ${current.wind_kph} km/h\n`
        message += `*• Tekanan Udara:* ${current.pressure_mb} mb\n`
        message += `*• Waktu Lokal:* ${location.localtime}`

        Lyrra.sendMessage(m.chat, {
          image: {
            url: `https:${current.condition.icon}`
          },
          caption: message
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
        console.error('Error:', err)
      }
    }
    break

    case 'calender':
    case 'kalender': {
      const [bulan, tahun] = text.split(' ')
      if (!bulan || !tahun) {
        return m.reply('Contoh: <bulan> <tahun>')
      }

      try {
        const {
          Kalender
        } = require('./lib-signal/data-utils/scrape')
        const holidays = await Kalender(bulan, tahun)

        if (!holidays || holidays.length === 0) {
          return m.reply('Tidak ada data apapun')
        }

        let message = `*KALENDER BULAN INI*\n\n`
        holidays.forEach(holiday => {
          message += `*• Tanggal:* ${holiday.holiday_date}\n`
          message += `*• Nama:* ${holiday.holiday_name}\n`
          message += `*• Libur Nasional:* ${holiday.is_national_holiday ? 'Ya' : 'Tidak'}\n\n`
        })

        m.reply(message)
      } catch (error) {
        m.reply(error || 'Terjadi kesalahan')
      }
    }
    break

    case 'info-gempa':
    case 'gempa':
    case 'infogempa': {
      try {
        const url = `https://api.agatz.xyz/api/gempa`
        const result = await fetchJson(url)

        if (!result || result.status !== 200 || !result.data) {
          return m.reply('Gagal mengambil data')
        }

        const {
          tanggal,
          waktu,
          lintang,
          bujur,
          magnitude,
          kedalaman,
          potensi,
          wilayah,
          dirasakan
        } = result.data

        let message = `🌍 *••> INFO GEMPA*\n\n`
        message += `*• Tanggal:* ${tanggal}\n`
        message += `*• Waktu:* ${waktu}\n`
        message += `*• Lokasi:* ${wilayah}\n`
        message += `*• Lintang:* ${lintang}\n*• Bujur:* ${bujur}\n`
        message += `*• Magnitude:* ${magnitude}\n`
        message += `*• Kedalaman:* ${kedalaman}\n`
        message += `*• Potensi:* ${potensi}\n`
        message += `*• Dirasakan:* ${dirasakan}`

        m.reply(message)
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
        console.error('Error:', err)
      }
    }
    break

    case 'ppcp':
    case 'couple':
    case 'ppcouple': {
      let anu = await fetchJson("https://raw.githubusercontent.com/Leoo7z/scrape/main/main/ppcp.json")
      lyreact()
      let random = await pickRandom(anu)
      Lyrra.sendMessage(m.chat, {
        image: {
          url: random.male,
        },
        caption: `Couple Male`,
      }, {
        quoted: m,
      })
      Lyrra.sendMessage(m.chat, {
        image: {
          url: random.female,
        },
        caption: `Couple Female`,
      }, {
        quoted: m,
      })
    }
    break

    case 'jarak': {
      if (!text.includes('|')) return m.reply(`Contoh: ${p_c} bekasi|jakarta\nNote: dari|ke`)
      let [dari, ke] = text.split('|')
      if (!dari || !ke) return m.reply(`Contoh: ${p_c} bekasi|jakarta\nNote: dari|ke`)
      try {
        const {
          jarakLokasi
        } = require('./lib-signal/data-utils/scrape')
        let result = await jarakLokasi(dari, ke)
        if (!result.desc) return m.reply('Jarak tidak ditemukan atau ada masalah dengan pencarian')
        await Lyrra.sendMessage(m.chat, {
          image: {
            buffer: result.img
          },
          caption: result.desc
        }, {
          quoted: m
        })
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'cerpen': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} sejarah`)
        let {
          Cerpen
        } = require('./lib-signal/data-utils/scrape')
        let kep = await Cerpen(text)
        let teks = `Judul: ${kep.title}\nAuthor: ${kep.author}\nRilis: ${kep.lolos}\n\n======== *CERITA PENDEK*\n\n${kep.cerita}`
        m.reply(teks)
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
        console.error('Error:', err)
      }
    }
    break

    case 'andro1': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} stickman`)
        let {
          Andro1
        } = require('./lib-signal/data-utils/scrape')
        let results = await Andro1(text)

        if (!Array.isArray(results) || results.length === 0) {
          return m.reply('Tidak ada hasil ditemukan.')
        }

        let allResults = results.map(kep => {
          return `Judul: ${kep.name}\nDeveloper: ${kep.developer}\nRating: ${kep.rating}\nLink: ${kep.link}\n`
        }).join('\n')

        let firstImageUrl = results[0].imageUrl;
        Lyrra.sendMessage(m.chat, {
          image: {
            url: firstImageUrl
          },
          caption: allResults
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
        console.error('Error:', err)
      }
    }
    break

    case 'steam': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} steam`)
        let results = await fetchJson(`https://api.agatz.xyz/api/steams?message=${Enc(text)}`)
        let allResults = results.data.map(kep => {
          return `Judul: ${kep.judul}\nHarga: ${kep.harga}\nRilis: ${kep.rilis}\nRating: ${kep.rating}\n`
        }).join('\n')

        let firstImageUrl = results.data[0].img;
        Lyrra.sendMessage(m.chat, {
          image: {
            url: firstImageUrl
          },
          caption: allResults
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
        console.error('Error:', err)
      }
    }
    break

    case 'genius':
    case 'geniussrc': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} mbappe`)

        const {
          genius
        } = require('./lib-signal/data-utils/scrape')
        let results = await genius(text)
        if (results.length === 0) return m.reply('Tidak ada hasil')

        let allResults = results.map(song => {
          return `Judul: ${song.full_title}\nArtis: ${song.artist}\nLink: ${song.url}`
        }).join('\n\n')

        let firstImageUrl = results[0]?.image || ''
        await Lyrra.sendMessage(m.chat, {
          image: {
            url: firstImageUrl
          },
          caption: allResults
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'library':
    case 'librarysrc': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} harry potter`)

        const {
          library
        } = require('./lib-signal/data-utils/scrape')
        let results = await library(text)
        if (results.length === 0) return m.reply('Tidak ditemukan buku yang sesuai dengan pencarian.')

        let allResults = results.map(book => {
          return `Judul: ${book.title}\nPenulis: ${book.author}\n${book.cover ? 'Cover: ' + book.cover : ''}`
        }).join('\n\n')

        let firstImageUrl = results[0]?.cover || ''
        await Lyrra.sendMessage(m.chat, {
          image: {
            url: firstImageUrl
          },
          caption: allResults
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'liriksrc':
    case 'srclirik': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} aku yang tersakiti`)
        let results = await fetchJson(`https://vapis.my.id/api/lirik?q=${Enc(text)}`)
        let allResults = results.data.map(kep => {
          return `Judul: ${kep.title}\nArtis: ${kep.artist}\nAlbum: ${kep.album}\nLink: ${kep.link}\n`
        }).join('\n')

        let firstImageUrl = results.data[0].imageUrl;
        Lyrra.sendMessage(m.chat, {
          image: {
            url: firstImageUrl
          },
          caption: allResults
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
        console.error('Error:', err)
      }
    }
    break

    case 'sfilesrc':
    case 'sfilesearch': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} regedit`);
        const {
          sfilesrc
        } = require('./lib-signal/data-utils/scrape');
        const p = await sfilesrc(text);
        if (!p || !p.files || p.files.length === 0) {
          return m.reply('Tidak ditemukan hasil pencarian.');
        }
        const g = p.files.map(file =>
          `*📂 ${file.title}*\nSize: ${file.size}\nID: https://sfile.mobi/${file.id}\n`
        ).join('\n\n');
        m.reply(g);
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan: ' + err.message);
      }
    }
    break

    // === Nsfw Menu

    case 'nsfw': {
      if (!m.isGroup) return onlyGrup()
      if (!isOwner && !isAdmins) return onlyAdmin()
      if (!isBotAdmins) return onlyBotAdmin()
      if (args[0] === 'on') {
        if (db.data.chats[m.chat].nsfw) return m.reply(`Sudah aktif sebelumnya`)
        db.data.chats[m.chat].nsfw = true
        m.reply('Sukses mengaktifkan nsfw!')
      } else if (args[0] === 'off') {
        if (!db.data.chats[m.chat].nsfw) return m.reply(`Sudah nonaktifkan sebelumnya`)
        db.data.chats[m.chat].nsfw = false
        m.reply('Sukses menonaktifkan nsfw!')
      } else {
        Lyrra.sendMessage(m.chat, {
          text: `Memasuki ${p_c} mode\non -- _mengaktifkan_\noff -- _Menonaktifkan_`,
          caption: '',
          footer: `${wm}`,
          buttons: [{
              buttonId: `${p_c} on`,
              buttonText: {
                displayText: `ON`
              }
            },
            {
              buttonId: `${p_c} off`,
              buttonText: {
                displayText: `OFF`
              }
            }
          ],
          viewOnce: true,
          headerType: 6,
        }, {
          quoted: m
        });
      }
    }
    break

    case 'waifu':
    case 'neko':
    case 'shinobu':
    case 'megumin':
    case 'bully':
    case 'cuddle':
    case 'cry':
    case 'hug':
    case 'awoo':
    case 'kiss':
    case 'lick':
    case 'pat':
    case 'smug':
    case 'bonk':
    case 'yeet':
    case 'blush':
    case 'smile':
    case 'wave':
    case 'highfive':
    case 'handhold':
    case 'nom':
    case 'bite':
    case 'glomp':
    case 'slap':
    case 'kill':
    case 'happy':
    case 'wink':
    case 'poke':
    case 'dance':
    case 'cringe':
    case 'trap':
    case 'blowjob':
    case 'hentai':
    case 'boobs':
    case 'ass':
    case 'pussy':
    case 'thighs':
    case 'lesbian':
    case 'lewdneko':
    case 'cum': {
      if (!isPremium) return onlyPrem();
      if (!isPc) return onlyPrivat();
      lyreact()
      try {
        let haha = await fetchJson(`https://rule34.xxx/index.php?page=dapi&s=post&q=index&tags=${command}&json=1`)
        if (haha && haha[0]?.file_url) {
          let imgUrl = haha[0].file_url
          Lyrra.sendMessage(m.chat, {
            image: {
              url: imgUrl
            },
            caption: global.wm
          }, {
            quoted: m
          })
        }
      } catch (err) {
        try {
          let atuh = await fetchJson(`https://api.waifu.pics/nsfw/${command}`)
          if (atuh.url) {
            Lyrra.sendMessage(m.chat, {
              image: {
                url: atuh.url
              },
              caption: global.wm
            }, {
              quoted: m
            })
          }
        } catch (err) {
          let sok = await fetchJson(`https://api.waifu.pics/sfw/${command}`)
          if (sok.url) {
            Lyrra.sendMessage(m.chat, {
              image: {
                url: sok.url
              },
              caption: global.wm
            }, {
              quoted: m
            })
          }
        }
      }
    }
    break


    // === Ephoto Menu

    case 'glitchtext':
    case 'writetext':
    case 'advancedglow':
    case 'typographytext':
    case 'pixelglitch':
    case 'neonglitch':
    case 'flagtext':
    case 'flag3dtext':
    case 'deletingtext':
    case 'blackpinkstyle':
    case 'glowingtext':
    case 'underwatertext':
    case 'logomaker':
    case 'cartoonstyle':
    case 'papercutstyle':
    case 'watercolortext':
    case 'effectclouds':
    case 'blackpinklogo':
    case 'gradienttext':
    case 'summerbeach':
    case 'luxurygold':
    case 'multicoloredneon':
    case 'sandsummer':
    case 'galaxywallpaper':
    case '1917style':
    case 'makingneon':
    case 'royaltext':
    case 'freecreate':
    case 'galaxystyle':
    case 'lighteffects': {
      if (!text) return m.reply(`Contoh: ${p_c} Lyrraa`)
      lyreact()
      let link
      if (/glitchtext/.test(command)) link = 'https://en.ephoto360.com/create-digital-glitch-text-effects-online-767.html'
      if (/writetext/.test(command)) link = 'https://en.ephoto360.com/write-text-on-wet-glass-online-589.html'
      if (/advancedglow/.test(command)) link = 'https://en.ephoto360.com/advanced-glow-effects-74.html'
      if (/typographytext/.test(command)) link = 'https://en.ephoto360.com/create-typography-text-effect-on-pavement-online-774.html'
      if (/pixelglitch/.test(command)) link = 'https://en.ephoto360.com/create-pixel-glitch-text-effect-online-769.html'
      if (/neonglitch/.test(command)) link = 'https://en.ephoto360.com/create-impressive-neon-glitch-text-effects-online-768.html'
      if (/flagtext/.test(command)) link = 'https://en.ephoto360.com/nigeria-3d-flag-text-effect-online-free-753.html'
      if (/flag3dtext/.test(command)) link = 'https://en.ephoto360.com/free-online-american-flag-3d-text-effect-generator-725.html'
      if (/deletingtext/.test(command)) link = 'https://en.ephoto360.com/create-eraser-deleting-text-effect-online-717.html'
      if (/blackpinkstyle/.test(command)) link = 'https://en.ephoto360.com/online-blackpink-style-logo-maker-effect-711.html'
      if (/glowingtext/.test(command)) link = 'https://en.ephoto360.com/create-glowing-text-effects-online-706.html'
      if (/underwatertext/.test(command)) link = 'https://en.ephoto360.com/3d-underwater-text-effect-online-682.html'
      if (/logomaker/.test(command)) link = 'https://en.ephoto360.com/free-bear-logo-maker-online-673.html'
      if (/cartoonstyle/.test(command)) link = 'https://en.ephoto360.com/create-a-cartoon-style-graffiti-text-effect-online-668.html'
      if (/papercutstyle/.test(command)) link = 'https://en.ephoto360.com/multicolor-3d-paper-cut-style-text-effect-658.html'
      if (/watercolortext/.test(command)) link = 'https://en.ephoto360.com/create-a-watercolor-text-effect-online-655.html'
      if (/effectclouds/.test(command)) link = 'https://en.ephoto360.com/write-text-effect-clouds-in-the-sky-online-619.html'
      if (/blackpinklogo/.test(command)) link = 'https://en.ephoto360.com/create-blackpink-logo-online-free-607.html'
      if (/gradienttext/.test(command)) link = 'https://en.ephoto360.com/create-3d-gradient-text-effect-online-600.html'
      if (/summerbeach/.test(command)) link = 'https://en.ephoto360.com/write-in-sand-summer-beach-online-free-595.html'
      if (/luxurygold/.test(command)) link = 'https://en.ephoto360.com/create-a-luxury-gold-text-effect-online-594.html'
      if (/multicoloredneon/.test(command)) link = 'https://en.ephoto360.com/create-multicolored-neon-light-signatures-591.html'
      if (/sandsummer/.test(command)) link = 'https://en.ephoto360.com/write-in-sand-summer-beach-online-576.html'
      if (/galaxywallpaper/.test(command)) link = 'https://en.ephoto360.com/create-galaxy-wallpaper-mobile-online-528.html'
      if (/1917style/.test(command)) link = 'https://en.ephoto360.com/1917-style-text-effect-523.html'
      if (/makingneon/.test(command)) link = 'https://en.ephoto360.com/making-neon-light-text-effect-with-galaxy-style-521.html'
      if (/royaltext/.test(command)) link = 'https://en.ephoto360.com/royal-text-effect-online-free-471.html'
      if (/freecreate/.test(command)) link = 'https://en.ephoto360.com/free-create-a-3d-hologram-text-effect-441.html'
      if (/galaxystyle/.test(command)) link = 'https://en.ephoto360.com/create-galaxy-style-free-name-logo-438.html'
      if (/lighteffects/.test(command)) link = 'https://en.ephoto360.com/create-light-effects-green-neon-online-429.html'
      let haldwhd = await ephoto(link, q)
      try {
        await Lyrra.sendMessage(m.chat, {
          image: {
            url: haldwhd
          },
          caption: global.wm
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi Kesalahan')
      }
    }
    break

    // === Cecan Menu

    case 'hijaber':
    case 'jeni':
    case 'jiso':
    case 'justina':
    case 'rose':
    case 'ryujin': {
    if (!isPc) return onlyPrivat();
      lyreact()
      let heyy
      if (/hijaber/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/hijaber.json')
      if (/jeni/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/jeni.json')
      if (/jiso/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/jiso.json')
      if (/justina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/justina.json')
      if (/rose/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/rose.json')
      if (/ryujin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/ryujin.json')
      let yeha = heyy[Math.floor(Math.random() * heyy.length)]
      Lyrra.sendMessage(m.chat, {
        image: {
          url: yeha
        },
        caption: global.wm
      }, {
        quoted: m
      })
    }
    break

    case 'china':
case 'indonesia':
case 'japan':
case 'korea':
case 'malaysia':
case 'thailand':
case 'vietnam': {
if (!isPc) return onlyPrivat();
  lyreact()
  let heyy
  if (/china/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/china.json')
  if (/indonesia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/indonesia.json')
  if (/japan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/japan.json')
  if (/korea/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/korea.json')
  if (/malaysia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/malaysia.json')
  if (/thailand/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/thailand.json')
  if (/vietnam/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/vietnam.json')
  let yeha = heyy[Math.floor(Math.random() * heyy.length)]
  Lyrra.sendMessage(m.chat, {
    image: {
      url: yeha
    },
    caption: global.wm
  }, {
    quoted: m
  })
}
break
    

    // === Tools Menu

    case 'to64':
    case 'tobase64': {
      if (!text) return m.reply(`Contoh: ${p_c} teksnya`)
      const base = await toBase64(text)
      reply(base)
    }
    break

    case 'toutf':
    case 'toori': {
      if (!text) return m.reply(`Contoh: ${p_c} teksnya`)
      const ori = await toOriginal(text)
      reply(ori)
    }
    break

    case 'enccode':
    case 'encrpyt':
    case 'enc': {
      if (!q) return m.reply(`Contoh ${prefix+command} const ori = await toOriginal(text)`)
      let enccode = await obfus(q)
      m.reply(`${enccode.result}`)
    }
    break

    case 'noenc':
    case 'decrypt':
    case 'deobfus': {
      if (!text) return m.reply(`Contoh: ${p_c} teksnya`)
      const noenc = await deobfusc(text)
      reply(noenc)
    }
    break

    case 'rawgh':
    case 'raw':
    case 'toraw': {
      if (!text) return m.reply(`Contoh: ${p_c} link github format ori`)
      if (!text.includes('github.com')) return m.reply('Harus berupa link github ori!')
      const raw = await toGhRaw(text)
      reply(raw)
    }
    break

    case 'togh':
    case 'togithub': {
      if (!text) return m.reply(`Contoh: ${p_c} link github format raw`)
      if (!text.includes('raw.githubusercontent')) return m.reply('Harus berupa link github format raw!')
      const gh = await toGhOri(text)
      reply(gh)
    }
    break

    case 'nulis': {
  if (!text) return m.reply(`Contoh: ${p_c} toyaa`)
  try {
    lyreact()
    Lyrra.sendMessage(m.chat, {
      image: {
        url: `https://fastrestapis.fasturl.cloud/tool/texttonote?name=%E3%85%A4&classroom=%E3%85%A4&subject=%E3%85%A4&date=%E3%85%A4&content=${Enc(text)}&font=HandwritingCR-2.ttf&format=png`
      },
      caption: global.wm
    }, {
      quoted: m
    })
  } catch(err) {
    m.reply('Terjadi kesalahan: '+err.toString())
  }
}
break

case 'nuliskiri': {
    if (!text) return m.reply(`Contoh: ${p_c} Halo bro`)
    lyreact()
    generateImage(
        'https://files.catbox.moe/qsmt2j.jpg',
        './x-system/temp-kiri.jpg',
        text,
        145,
        153,
        650,
        36,
        m.chat
    )
}
break

case 'nuliskanan': {
    if (!text) return m.reply(`Contoh: ${p_c} Halo bro`)
    lyreact()
    generateImage(
        'https://files.catbox.moe/wgkb2c.jpg',
        './x-system/temp-kanan.jpg',
        text,
        134,
        130,
        650,
        39,
        m.chat
    )
}
break

case 'foliokiri': {
    let tulis = text.trim()
    if (!tulis) return m.reply(`Contoh: ${p_c}foliokiri Halo bro`)
    lyreact()
    processImage(
        'https://files.catbox.moe/f1phzv.jpg',
        './x-system/temp-kiri.jpg',
        tulis,
        48,
        143,
        900,
        0,
        m.chat
    )
}
break

case 'foliokanan': {
    let tulis = text.trim()
    if (!tulis) return m.reply(`Contoh: ${p_c}foliokanan Halo bro`)
    lyreact()
    processImage(
        'https://files.catbox.moe/a9bd06.jpg',
        './x-system/temp-kanan.jpg',
        tulis,
        89,
        146,
        900,
        0,
        m.chat
    )
}
break

    case 'beauty': {
      if (!isOwner) return onlyOwn()
      if (!m.quoted) return m.reply('Kutip pesan dokumen!')
      try {
        lyreact()
        const fileName = quoted.fileName
        if (!fileName.endsWith('.js') && !fileName.endsWith('.json')) {
          return m.reply('Kutip pesan dokumen, js dan json!')
        }
        let media = await downloadContentFromMessage(quoted, "document")
        let buffer = Buffer.from([])
        for await (const chunk of media) {
          buffer = Buffer.concat([buffer, chunk])
        }
        let originalCode = buffer.toString('utf-8')
        let bResult = await rapihin(originalCode)
        const bFileName = `beauty_${fileName}`
        const bFilePath = path.join(__dirname, bFileName)
        fs.writeFileSync(bFilePath, bResult)
        const fileBuffer = fs.readFileSync(bFilePath)
        Lyrra.sendMessage(m.chat, {
          document: fileBuffer,
          caption: `Hasil beauty dari ${fileName}`,
          mimetype: fileName.endsWith('.js') ? 'application/js' : 'application/json',
          fileName: fileName
        }, {
          quoted: m
        })
        await fs.unlinkSync(bFilePath)
      } catch (err) {
        console.error('Terjadi kesalahan:', err)
      }
    }
    break

    case 'flatten': {
      if (!isOwner) return onlyOwn()
      if (!m.quoted) return m.reply('Kutip pesan dokumen!')
      try {
        lyreact()
        const fileName = quoted.fileName
        if (!fileName.endsWith('.js') && !fileName.endsWith('.json')) {
          return m.reply('Kutip pesan dokumen, js dan json!')
        }
        let media = await downloadContentFromMessage(quoted, "document")
        let buffer = Buffer.from([])
        for await (const chunk of media) {
          buffer = Buffer.concat([buffer, chunk])
        }
        let originalCode = buffer.toString('utf-8')
        let bResult = await rapihin2(originalCode)
        const bFileName = `beauty_${fileName}`
        const bFilePath = path.join(__dirname, bFileName)
        fs.writeFileSync(bFilePath, bResult)
        const fileBuffer = fs.readFileSync(bFilePath)
        Lyrra.sendMessage(m.chat, {
          document: fileBuffer,
          caption: `Hasil flatten dari ${fileName}`,
          mimetype: fileName.endsWith('.js') ? 'application/js' : 'application/json',
          fileName: fileName
        }, {
          quoted: m
        })
        await fs.unlinkSync(bFilePath)
      } catch (err) {
        console.error('Terjadi kesalahan:', err)
      }
    }
    break

    case 'cfps': {
      if (!/video/.test(mime)) {
        return m.reply(`Kirim/kutip video dengan caption ${p_c}`)
      }
      if (!args[0]) return m.reply(`Contoh: ${p_c} 60`)
      lyreact()
      let qw = m.quoted ? quoted : m
      let media = await Lyrra.downloadAndSaveMediaMessage(qw)

      try {
        const originalFPS = await detekFps(media)
        const targetFPS = args[0]
        await ubahFps(media, "./x-system/undefined2.mp4", targetFPS)

        await Lyrra.sendMessage(m.chat, {
          video: fs.readFileSync("./x-system/undefined2.mp4"),
          caption: `Video ini diubah ke ${targetFPS} FPS, FPS asli: ${originalFPS}`
        }, {
          quoted: m
        })

      } catch (error) {
        console.error('Error:', error)
        m.reply('Terjadi kesalahan: ' + error)
      } finally {
        if (fs.existsSync(media)) fs.unlinkSync(media)
        if (fs.existsSync("./x-system/undefined2.mp4")) fs.unlinkSync("./x-system/undefined2.mp4")
      }
    }
    break

    case 'mediaspeed':
    case 'media-speed':
    case 'setspeed': {
      if (!/video/.test(mime)) {
        return m.reply(`Kirim/kutip video dengan caption ${p_c}`)
      }
      if (!args[0]) return m.reply(`Contoh: ${p_c} 1.5x`)
      lyreact()
      let qw = m.quoted ? quoted : m
      let media = await Lyrra.downloadAndSaveMediaMessage(qw)

      try {
        const outputPath = './lib-signal/speed_video.mp4'
        const kecepatan = args[0]
        await speedVideo(media, outputPath, kecepatan)

        await Lyrra.sendMessage(m.chat, {
          video: fs.readFileSync(outputPath),
          caption: `Video berhasil diubah ke kecepatan ${kecepatan}!`
        }, {
          quoted: m
        })
      } catch (error) {
        console.error('Error:', error)
        m.reply('Terjadi kesalahan: ' + error)
      } finally {
        if (fs.existsSync(media)) fs.unlinkSync(media)
        if (fs.existsSync('./lib-signal/speed_video.mp4')) fs.unlinkSync('./lib-signal/speed_video.mp4')
      }
    }
    break

    case 'get': {
      if (!text) return m.reply(`Contoh: ${p_c} linknya`)
      if (!text.includes('http')) return m.reply(`Contoh: ${p_c} linknya`)

      try {
        const data = await axios.get(text)
        const contentType = data.headers["content-type"]

        if (contentType.startsWith('image/')) {
          Lyrra.sendMessage(m.chat, {
            image: {
              url: text
            },
            caption: `${text}\n\n*Headers Respons:*\n${Object.entries(data.headers).map(([key, value]) => `*${key}:* ${value}`).join('\n')}`
          }, {
            quoted: m
          })

        } else if (contentType.startsWith('video/')) {
          Lyrra.sendMessage(m.chat, {
            video: {
              url: text
            },
            caption: `${text}\n\n*Headers Respons:*\n${Object.entries(data.headers).map(([key, value]) => `*${key}:* ${value}`).join('\n')}`
          }, {
            quoted: m
          })

        } else if (contentType.startsWith('audio/')) {
          Lyrra.sendMessage(m.chat, {
            audio: {
              url: text
            },
            mimetype: 'audio/mpeg'
          }, {
            quoted: m
          })

        } else {
          m.reply(util.format(data.data))

          const saveFileToDisk = async (url, outputPath) => {
            const response = await axios.get(url, {
              responseType: 'arraybuffer'
            })
            const contentType = response.headers['content-type']
            const ext = contentType.split('/')[1] || 'bin'
            const filePath = `${outputPath}.${ext}`

            return new Promise((resolve, reject) => {
              fs.writeFile(filePath, response.data, (err) => {
                if (err) reject(err)
                else resolve({
                  file: filePath,
                  ext,
                  mime: contentType
                })
              })
            })
          }

          try {
            const buffer = await Lyrra.downloadAndSaveMediaMessage(m.quoted || m)
            await sleep(2000)

            const mimeType = await getMimeType(buffer)
            Lyrra.sendMessage(m.chat, {
              document: fs.readFileSync(buffer),
              mimetype: mimeType,
              fileName: `get-data.${mimeType}`
            }, {
              quoted: m
            })

            fs.unlinkSync(buffer)
          } catch (error) {
            console.error('Gagal menyimpan:', error)
          }
        }
      } catch (error) {
        m.reply('Terjadi kesalahan')
        console.error('Error:', error)
      }
    }
    break

    case 'ocr': {
      if (!/image/.test(mime)) return m.reply('Harus berupa gambar!')
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
      lyreact()

      try {
        let url = await CatBox(media)
        let jr = await fetchJson(`https://itzpire.com/tools/ocr?url=${Enc(url)}`)
        let jw = jr.data
        m.reply(`*Overlay:* ${jw.TextOverlay.HasOverlay ? 'Yes' : 'No'}\n*Message:* ${jw.Message ? jw.Message : 'Nothing'}\n*Hasil OCR:* ${jw.ParsedText}`)
      } catch (err) {
        console.error(err)
        m.reply(err)
      }

      await fs.unlinkSync(media)
    }
    break

    case 'cekip': {
      if (!text) return m.reply(`Contoh: ${p_c} 8.8.8.8`)

      try {
        const response = await axios.get(`https://vapis.my.id/api/cekipv1?ip=${text}`)
        const {
          status,
          data
        } = response.data

        const infoIp = `
*CHECK IP ${data.ip}*
- Network: ${data.network}
- Version: ${data.version}
- City: ${data.city}
- Region: ${data.region} (${data.region_code})
- Country: ${data.country_name} (${data.country_code})
- Timezone: ${data.timezone}
- Latitude: ${data.latitude}
- Longitude: ${data.longitude}
- Organization: ${data.org}
- ASN: ${data.asn}
- ISP: ${data.org}
- Currency: ${data.currency} (${data.currency_name})
- Country Calling Code: ${data.country_calling_code}
- Population: ${data.country_population}
- Languages: ${data.languages}
    `.trim()

        m.reply(infoIp)
      } catch (err) {
        m.reply(`Terjadi kesalahan: ` + err)
      }
    }
    break

    case 'audio2txt':
case 'audio2text': {
  if (!/audio/.test(mime) && !/ogg/.test(mime)) return m.reply(`Kirim/kutip audio/vn dengan caption ${p_c}`)
  lyreact()

  let media
  try {
    media = await Lyrra.downloadAndSaveMediaMessage(quoted)
    const { speechToText } = require('./lib-signal/data-utils/scrape')
    let proses = await speechToText(media)
    m.reply(proses)
    fs.unlinkSync(media)
  } catch (err) {
    m.reply('Terjadi kesalahan: '+err)
    if (media) fs.unlinkSync(media)
  }
}
break

    // === Voice Menu

    case 'bass':
    case 'blown':
    case 'deep':
    case 'earrape':
    case 'fast':
    case 'fat':
    case 'nightcore':
    case 'reverse':
    case 'robot':
    case 'slow':
    case 'smooth':
    case 'tupai':
    case 'echo':
    case 'flanger':
    case 'vaporwave':
    case 'treble':
    case 'vibrato':
    case 'distortion':
    case 'karaoke':
    case 'chipmunk': {
      try {
        let set
        if(command === 'bass') set = "-af equalizer=f=54:width_type=o:width=2:g=20"
        if (command === 'blown') set = "-af acrusher=.1:1:64:0:log"
        if (command === 'deep') set = "-af atempo=4/4,asetrate=44500*2/3"
        if (command === 'earrape') set = "-af volume=12"
        if (command === 'fast') set = '-filter:a "atempo=1.63,asetrate=44100"'
        if (command === 'fat') set = '-filter:a "atempo=1.6,asetrate=22100"'
        if (command === 'nightcore') set = "-filter:a atempo=1.06,asetrate=44100*1.25"
        if (command === 'reverse') set = '-filter_complex "areverse"'
        if (command === 'robot') set = "-filter_complex \"afftfilt=real='hypot(re,im)*sin(0)':imag='hypot(re,im)*cos(0)':win_size=512:overlap=0.75\""
        if (command === 'slow') set = '-filter:a "atempo=0.7,asetrate=44100"'
        if (command === 'smooth') set = "-filter:v \"minterpolate='mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120'\""
        if (command === 'tupai') set = '-filter:a "atempo=0.5,asetrate=65100"'
        if (command === 'echo') set = '-af "aecho=0.8:0.88:60:0.4"'
        if (command === 'flanger') set = '-af "flanger"'
        if (command === 'vaporwave') set = "-filter:a atempo=0.8,asetrate=44100*0.9"
        if (command === 'treble') set = "-af treble=g=5"
        if (command === 'vibrato') set = "-af vibrato=f=5"
        if (command === 'distortion') set = "-af adistort"
        if (command === 'karaoke') set = "-af stereotools=mlev=0.03"
        if (command === 'chipmunk') set = '-filter:a "asetrate=22100,atempo=1.5"'

        if (quoted && quoted.mimetype && quoted.mimetype.startsWith('audio')) {
          lyreact
          let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
          let ran = getRandom(".mp3")
          exec(`ffmpeg -i ${media} ${set} ${ran}`, (err, stderr, stdout) => {
            fs.unlinkSync(media)
            if (err) return m.reply(err.toString())
            let buff = fs.readFileSync(ran)
            Lyrra.sendMessage(m.chat, {
              audio: buff,
              mimetype: "audio/mpeg"
            }, {
              quoted: m
            })
            fs.unlinkSync(ran)
          })
        } else {
          m.reply(`Kutip audionya!`)
        }
      } catch (err) {
        m.reply(err.toString())
      }
    }
    break
    // === Quotes Menu
    case 'dilan':
    case 'quotesdilan': {
      let tod = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/quotesdilan.json`)
      const dilan = await pickRandom(tod)
      Lyrra.sendMessage(m.chat, {
        text: dilan.quotes
      }, {
        quoted: m
      })
    }
    break
    case 'bucin':
    case 'quotesbucin': {
      const bucin = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/bucin.json`)
      const bucc = await pickRandom(bucin)
      Lyrra.sendMessage(m.chat, {
        text: bucc
      }, {
        quoted: m
      })
    }
    break
    case 'quotesanime': {
      const quotesanim = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/quotesanime.json`)
      const anu = await pickRandom(quotesanim)
      let teks = `*Quotes Anime*\n\n"${anu.quotes}"\n\n*${anu.char_name}*\n_${anu.anime} (${anu.episode})_\n_${anu.date}_`
      let coo = `{\"display_text\":\"Url Quotes\",\"id\":\"P\",\"copy_code\":\"${anu.url}\"}`
      buttoncopy(m.chat, teks, coo, null, m)
    }
    break
    case 'quotesislamic': {
      const islamic = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/quotesislamic.json`)
      const quotesislamic = await pickRandom(islamic)
      m.reply(`${quotesislamic}`)
    }
    break
    case 'faktaunik': {
      const fakta = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/faktaunik.json`)
      const faktaunik = await pickRandom(fakta)
      m.reply(`*Taukah Kamu?*\n\n${faktaunik}`)
    }
    break
    case 'katasenja': {
      const senja = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/katasenja.json`)
      const katasenja = await pickRandom(senja)
      m.reply(`${katasenja}`)
    }
    break
    case 'katailham': {
      const ilham = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/katailham.json`)
      const katailham = await pickRandom(ilham)
      m.reply(`${katailham}`)
    }
    break
    case 'quotes': {
      const quot = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/quotes.json`)
      const quote = await pickRandom(quot)
      m.reply(`${quote.quotes}\n\nBy ${quote.author}`)
    }
    break
    case 'puisi': {
      const puis = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/puisi.json`)
      const puisi = await pickRandom(puis)
      m.reply(`${puisi}`)
    }
    break
    case 'pantun': {
      const pant = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/pantun.json`)
      const pantun = await pickRandom(pant)
      m.reply(`${pantun}`)
    }
    break
    case 'motivasi': {
      const motiv = await fetchJson(`https://raw.githubusercontent.com/Leoo7z/quotes/main/quotes-source/motivasi.json`)
      const motivasi = await pickRandom(motiv)
      m.reply(`${motivasi}`)
    }
    break
    // === Fun Menu
    case 'top': {
      if (!m.isGroup) return onlyGrup()
      let kategori = q;
      if (!kategori) return m.reply(`Penggunaan ${command} [Kategori]\n\nContoh: ${command} orang pintar`);

      let member = participants.map(u => u.id).filter(v => v !== Lyrra.user.jid)
      let top5 = [];
      for (let i = 0; i < 5; i++) {
        top5.push(member[Math.floor(Math.random() * member.length)]);
      }
      let mention = top5.map((user, index) => `${index + 1}. @${user.split('@')[0]}`).join('\n');
      Lyrra.sendMessage(m.chat, {
        text: `  ☟ Top 5 ${kategori} ☟\n\n${mention}`,
        mentions: top5
      }, {
        quoted: m
      });
    }
    break
    case 'bego':
    case 'goblok':
    case 'janda':
    case 'perawan':
    case 'babi':
    case 'tolol':
    case 'pekok':
    case 'jancok':
    case 'pinter':
    case 'pintar':
    case 'asu':
    case 'bodoh':
    case 'gay':
    case 'lesby':
    case 'bajingan':
    case 'jancok':
    case 'anjing':
    case 'anjg':
    case 'anjj':
    case 'anj':
    case 'ngentod':
    case 'ngentot':
    case 'monyet':
    case 'mastah':
    case 'newbie':
    case 'bangsat':
    case 'bangke':
    case 'sange':
    case 'sangean':
    case 'dakjal':
    case 'horny':
    case 'wibu':
    case 'puki':
    case 'puqi':
    case 'peak':
    case 'pantex':
    case 'pantek':
    case 'setan':
    case 'iblis':
    case 'cacat':
    case 'yatim':
    case 'piatu': {
      if (!m.isGroup) return onlyGrup()
      let member = participants.map(u => u.id).filter(v => v !== Lyrra.user.jid)
      let org = member[Math.floor(Math.random() * member.length)];
      Lyrra.sendMessage(m.chat, {
        text: `Anak ${command} di sini adalah @${org.split('@')[0]}`,
        mentions: [org]
      }, {
        quoted: m
      })
    }
    break


    case 'apakah': {
      if (!text) return m.reply(`Contoh: ${p_c} saya ganteng?`)
      const jawaban = ['Iya', 'Mungkin iya', 'Mungkin', 'Gak', 'Mungkin gak', 'Gak tau']
      const coli = jawaban[Math.floor(Math.random() * jawaban.length)]
      m.reply(`*Pertanyaan:* Apakah ${text}\n*Jawaban:* ${coli}`)
    }
    break

    case 'bisakah': {
      if (!text) return m.reply(`Contoh: ${p_c} saya jadi kaya?`)
      const jawaban = ['Bisa banget', 'Bisa', 'Mungkin bisa', 'Mungkin', 'Gak bisa', 'Mungkin gak bisa', 'Gak bisa lah', 'Gak tau']
      const coli = jawaban[Math.floor(Math.random() * jawaban.length)]
      m.reply(`*Pertanyaan:* Bisakah ${text}\n*Jawaban:* ${coli}`)
    }
    break

    case 'kapankah': {
      if (!text) return m.reply(`Contoh: ${p_c} saya kaya?`)
      const jawabanWaktu = [
        'Bentar lagi',
        'Nunggu kiamat dulu',
        'Kapan-kapan',
        'Besok',
        'Pas lu tidur',
        'Gw juga gak tau kapan'
      ]
      const waktuRandom = Math.floor(Math.random() * 10) + 1
      const unitWaktu = ['minggu', 'bulan', 'tahun']
      const unitWaktuRandom = unitWaktu[Math.floor(Math.random() * unitWaktu.length)]
      const jawaban = [...jawabanWaktu, `${waktuRandom} ${unitWaktuRandom} lagi`]
      const hasilJawaban = jawaban[Math.floor(Math.random() * jawaban.length)]
      m.reply(`*Pertanyaan:* Kapankah ${text}\n*Jawaban:* ${hasilJawaban}`)
    }
    break

    case 'cekganteng': {
      if (!text) return m.reply(`Contoh: ${p_c} nama seseorang atau tag`)
      const jawaban1 = ['ganteng', 'jelek']
      const coli1 = jawaban1[Math.floor(Math.random() * jawaban1.length)]

      const jawaban = [randomNomor(2, 100) + `% ${coli1}`, 'Ganteng', 'Ganteng amat', 'Lumayan', 'Jelek', 'Jelek amat']
      const coli = jawaban[Math.floor(Math.random() * jawaban.length)]
      Lyrra.sendTextWithMentions(m.chat, `*Pertanyaan:* Cekganteng ${text}\n*Jawaban:* ${coli}`, m)
    }
    break

    case 'cekcantik': {
      if (!text) return m.reply(`Contoh: ${p_c} nama seseorang atau tag`)
      const jawaban1 = ['cantik', 'jelek']
      const coli1 = jawaban1[Math.floor(Math.random() * jawaban1.length)]

      const jawaban = [randomNomor(2, 100) + `% ${coli1}`, 'Cantik', 'Cantik amat', 'Lumayan', 'Jelek', 'Jelek amat']
      const coli = jawaban[Math.floor(Math.random() * jawaban.length)]
      Lyrra.sendTextWithMentions(m.chat, `*Pertanyaan:* Cekcantik ${text}\n*Jawaban:* ${coli}`, m)
    }
    break

    case 'cekgay': {
      if (!text) return m.reply(`Contoh: ${p_c} nama seseorang atau tag`)
      const jawaban1 = ['gay', 'raja gay']
      const coli1 = jawaban1[Math.floor(Math.random() * jawaban1.length)]

      const jawaban = [randomNomor(2, 100) + `% ${coli1}`, 'Gay', 'Gay amat', 'Mayan', 'Gak', 'Gak lah']
      const coli = jawaban[Math.floor(Math.random() * jawaban.length)]
      Lyrra.sendTextWithMentions(m.chat, `*Pertanyaan:* Cekgay ${text}\n*Jawaban:* ${coli}`, m)
    }
    break

    case 'ceklesbi': {
      if (!text) return m.reply(`Contoh: ${p_c} nama seseorang atau tag`)
      const jawaban1 = ['lesbi', 'ratu lesbi']
      const coli1 = jawaban1[Math.floor(Math.random() * jawaban1.length)]

      const jawaban = [randomNomor(2, 100) + `% ${coli1}`, 'Lesbi', 'Lesbi amat', 'Mayan', 'Gak', 'Gak lah']
      const coli = jawaban[Math.floor(Math.random() * jawaban.length)]
      Lyrra.sendTextWithMentions(m.chat, `*Pertanyaan:* Ceklesbi ${text}\n*Jawaban:* ${coli}`, m)
    }
    break

    case 'sifat':
    case 'ceksifat': {
      if (!text) return m.reply(`Contoh: ${p_c} nama seseorang atau tag`)
      const sifat = [
        'Periang', 'Pemalu', 'Pendiam', 'Perhatian', 'Sabar', 'Cepat marah',
        'Ceroboh', 'Pekerja keras', 'Ambisius', 'Bijaksana', 'Manja', 'Kreatif',
        'Penyayang', 'Suka membantu', 'Pendendam', 'Penuh semangat', 'Romantis',
        'Cepat bosan', 'Penuh rencana', 'Suka menunda', 'Penuh rahasia',
        'Cuek', 'Penuh percaya diri', 'Pemikir', 'Suka bercanda', 'Jujur',
        'Penyendiri', 'Penuh kejutan', 'Pemalu tapi hangat', 'Bergairah',
        'Suka berdiskusi', 'Tegas', 'Suka menyendiri', 'Ramah', 'Misterius',
        'Perasa', 'Bijak', 'Tertutup', 'Suka tantangan', 'Optimis', 'Pencemas',
        'Suka menjadi pusat perhatian', 'Setia', 'Suka berpetualang', 'Gugup',
        'Sensitif', 'Suka ngatur', 'Tangguh', 'Serius', 'Mudah marah',
        'Pandai berdamai', 'Terlalu perfeksionis', 'Sederhana', 'Penuh kasih sayang',
        'Penuh energi', 'Introvert', 'Extrovert', 'Ambivert', 'Kocak', 'Logis',
        'Penyendiri tapi bisa bersosialisasi', 'Penuh ide', 'Sangat disiplin',
        'Berani mengambil risiko', 'Suka mengalah', 'Senang bergaul', 'Suka berolahraga',
        'Mudah terpengaruh', 'Bergantung pada orang lain', 'Penuh semangat hidup',
        'Terlalu banyak bicara', 'Sangat memperhatikan detail', 'Suka memberi nasihat'
      ]
      const coli = sifat[Math.floor(Math.random() * sifat.length)]
      m.reply(`*Pertanyaan:* Ceksifat ${text}\n*Jawaban:* ${coli}`)
    }
    break

    case 'cekhobi':
    case 'cekhoby':
    case 'cekhobby': {
      if (!text) return m.reply(`Contoh: ${p_c} nama seseorang atau tag`)
      const hobi = [
        'Membaca buku', 'Berenang', 'Olahraga', 'Memasak', 'Menulis', 'Bermain game',
        'Menonton film', 'Travelling', 'Mendaki gunung', 'Fotografi', 'Melukis',
        'Musik', 'Berkebun', 'Menggambar', 'Berburu', 'Mendengarkan podcast',
        'Berbelanja', 'Mengoleksi barang antik', 'Berkendara motor', 'Menyelam',
        'Bermain olahraga tim', 'Memancing', 'Menjahit', 'Mencipta seni', 'Seni bela diri',
        'Coding', 'Yoga', 'Meditasi', 'Menulis puisi', 'Sewaktu-waktu berkumpul dengan teman',
        'Berkreasi dengan DIY', 'Mendengarkan musik klasik', 'Menari', 'Bermain alat musik',
        'Mendengarkan cerita horor', 'Berselancar', 'Bermain skateboard', 'Camping',
        'Main kartu', 'Bermain catur', 'Bermain puzzle', 'Mempelajari bahasa baru',
        'Mengajar', 'Berkumpul di acara komunitas', 'Fotografi alam', 'Menulis cerita fiksi',
        'Berkendara sepeda', 'Main cosplay', 'Kegiatan sosial', 'Melakukan eksperimen kimia',
        'Astrologi', 'Bermain dengan hewan peliharaan', 'Memperbaiki barang rusak', 'Berkunjung ke museum',
        'Bermain tenis', 'Main golf', 'Bermain voli', 'Panjat tebing', 'Mendekorasi rumah',
        'Sewaktu-waktu berkemah', 'Bermain basket', 'Membuat kerajinan tangan', 'Bermain piano',
        'Bermain gitar', 'Mendengarkan musik rock', 'Main drum', 'Mengecat', 'Mengoleksi kartu',
        'Sains eksperimen', 'Menciptakan aplikasi', 'Menjahit pakaian', 'Bermain frisbee',
        'Bermain dengan teknologi', 'Berkendara mobil', 'Berkunjung ke pantai', 'Main catur',
        'Mengunjungi tempat bersejarah', 'Berkebun tanaman hias', 'Menciptakan game', 'Bermain tenis meja',
        'Bermain dengan mainan robotik', 'Bergabung dengan klub diskusi', 'Berkarya di YouTube', 'Menulis blog'
      ]
      const coli = hobi[Math.floor(Math.random() * hobi.length)]
      m.reply(`*Pertanyaan:* Cekhoby ${text}\n*Jawaban:* ${coli}`)
    }
    break

    case 'jodoh':
    case 'cekjodoh': {
      try {
        let target = text ?
          text.replace(/[@]/g, '').split('@')[0] :
          m.sender.split('@')[0]

        let member = participants
          .filter(u => typeof u.id === 'string' && u.id.includes('@'))
          .map(u => u.id.split('@')[0])

        if (!member.includes(target)) target = m.sender.split('@')[0]

        let jodoh = member[Math.floor(Math.random() * member.length)]
        let jawab = `*JODOHNYA ${Lyrra.getName(target + '@s.whatsapp.net').toUpperCase()}*\n@${target} ❤️ @${jodoh}`
        Lyrra.sendTextWithMentions(m.chat, jawab, m)
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    // === Islamic Menu

    case 'jadwal-sholat':
    case 'jadwalsholat': {
      if (!text) return m.reply('Mau kota mana?')
      try {
        const {
          jadwalSholat
        } = require('./lib-signal/data-utils/scrape')
        const jadwal = await jadwalSholat(text.toLowerCase().replace(/\s+/g, '-'))
        if (jadwal.error) return m.reply(jadwal.error)

        const jdwl = `
*JADWAL SHOLAT UNTUK HARI INI*
Tanggal: ${jadwal.tanggal}
- Subuh: ${jadwal.subuh}
- Dhuha: ${jadwal.duha}
- Dzuhur: ${jadwal.dzuhur}
- Ashar: ${jadwal.ashar}
- Maghrib: ${jadwal.maghrib}
- Isya: ${jadwal.isya}
`.trim()

        m.reply(jdwl)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'asmaulhusna': {
      try {
        let jir = await fetchJson('https://islamic-api-zhirrr.vercel.app/api/asmaulhusna')
        let ye = jir.data

        let tks = '*ASMAUL HUSNA*\n\n' + ye.map((item) => {
          return `Urutan: ${item.index}\nLatin: ${item.latin}\nArab: ${item.arabic}\nTerjemahan ID: ${item.translation_id}\nTerjemahan EN: ${item.translation_en}\n`
        }).join('\n')

        m.reply(tks)
      } catch (err) {
        console.error(err)
        m.reply('Error cuy, coba lagi ntar!')
      }
    }
    break

    case 'niat-sholat':
    case 'niatsholat': {
      try {
        let jir = await fetchJson('https://islamic-api-zhirrr.vercel.app/api/niatshalat')
        let niatSholat = jir

        if (!text) {
          let daftarNiat = '*DAFTAR NIAT SHOLAT*\n\n' + niatSholat.map((item) => `- ${item.name}`).join('\n')
          daftarNiat += '\n\nKetik *.niatsholat [nama sholat]* untuk melihat niat, contoh: *.niatsholat subuh*'
          m.reply(daftarNiat)
        } else {
          let hasil = niatSholat.find((item) => item.name.toLowerCase().includes(text.toLowerCase()))

          if (hasil) {
            let tks = `*${hasil.name.toUpperCase()}*\n\n` +
              `Arab: ${hasil.arabic}\n` +
              `Latin: ${hasil.latin}\n` +
              `Terjemahan: ${hasil.terjemahan}`
            m.reply(tks)
          } else {
            m.reply('Niat sholat yang lu cari ga ketemu cuy. Cek lagi nama sholatnya!')
          }
        }
      } catch (err) {
        console.error(err)
        m.reply('Error cuy, coba lagi ntar!')
      }
    }
    break

    case 'surah': {
      try {
        if (!text) {
          m.reply('Ketik nomor surahnya! Contoh: *.surah 1* buat ambil ayat-ayat dari Al-Fatihah')
          return
        }

        let response = await fetchJson(`https://api.siputzx.my.id/api/s/surah?no=${text}`)
        let data = response.data

        if (data.length > 0) {
          let surahText = data.map((ayat, index) =>
            `Ayat ${index + 1}:\n` +
            `Arab: ${ayat.arab}\n` +
            `Latin: ${ayat.latin}\n` +
            `Terjemahan: ${ayat.indo}\n`
          ).join('\n\n')

          m.reply(surahText)
        } else {
          m.reply('Gak ketemu, cek lagi nomor surahnya!')
        }
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'doa':
    case 'berdoa': {
      try {
        let jir = await fetchJson('https://doa-doa-api-ahmadramadhan.fly.dev/api')
        let daftarDoa = jir

        if (!text) {
          let listDoa = '*DAFTAR DOA*\n\n' + daftarDoa.map((item) => `- ${item.doa}`).join('\n')
          listDoa += '\n\nKetik *.doa [nama doa]* untuk melihat doa, contoh: *.doa doa sebelum tidur*'
          m.reply(listDoa)
        } else {
          let hasil = daftarDoa.find((item) => item.doa.toLowerCase().includes(text.toLowerCase()))

          if (hasil) {
            let tks = `*${hasil.doa.toUpperCase()}*\n\n` +
              `Ayat: ${hasil.ayat}\n` +
              `Latin: ${hasil.latin}\n` +
              `Artinya: ${hasil.artinya}`
            m.reply(tks)
          } else {
            m.reply('Doa yang lu cari ga ketemu cuy. Cek lagi nama doanya!')
          }
        }
      } catch (err) {
        console.error(err)
        m.reply('Error cuy, coba lagi ntar!')
      }
    }
    break

    case 'gislam': {
      if (!text) return m.reply('Mau cari tentang apa?')
      async function islam(query) {
        try {
          const response = await fetchJson(`https://artikel-islam.netlify.app/.netlify/functions/api/ms?page=1&s=${Enc(query)}`)
          if (response.success) {
            const articles = response.data.data
            let message = `Total artikel: ${articles.length}\n\n`
            articles.forEach((article, index) => {
              message += `${index + 1}. Judul: ${article.title}\nURL: ${article.url}\n\n`
            })
            return message
          } else {
            return 'Gagal mengambil data'
          }
        } catch (error) {
          return 'Terjadi kesalahan saat mengambil data'
        }
      }
      let lp = await islam(text)
      m.reply(lp)
    }
    break

    case 'kataislam': {
      async function AI(content) {
        try {
          const response = await axios.post('https://luminai.my.id/', {
            content,
            cName: "S-AI",
            cID: "S-AIbAQ0HcC"
          });

          return response.data
        } catch (error) {
          console.error(error)
          throw error
        }
      }
      let qe = 'Berikan satu kata-kata atau quotes Islamic random yang sangat memotivasi, dan menginspirasi, jawab langsung ke intinya!'
      let qo = await AI(qe)
      m.reply(qo.result)
    }
    break

    case 'pantunislam': {
      async function AI(content) {
        try {
          const response = await axios.post('https://luminai.my.id/', {
            content,
            cName: "S-AI",
            cID: "S-AIbAQ0HcC"
          });

          return response.data
        } catch (error) {
          console.error(error)
          throw error
        }
      }
      let qe = 'Berikan satu kata-kata pantun Islamic random yang sangat memotivasi, dan menginspirasi, jawab langsung ke intinya!'
      let qo = await AI(qe)
      m.reply(qo.result)
    }
    break

    // === Maker Menu

    case 'text2img':
case 'txt2img': {
  if (!text) return m.reply(`Contoh: ${p_c} beautiful girl with handsome man`)
  lyreact()
  await Lyrra.sendMessage(m.chat, {image: {url: `https://fastrestapis.fasturl.cloud/aiimage/stablediffusion?prompt=${Enc(text)}&model=dreamshaper-8-base` }, caption: wm }, {quoted: m})
}
break

case 'text2imgv2':
case 'txt2imgv2': {
  if (!text) return m.reply(`Contoh: ${p_c} beautiful girl with handsome man`)
  lyreact()
  await Lyrra.sendMessage(m.chat, {image: {url: `https://fastrestapis.fasturl.cloud/aiimage/flux/schnell?prompt=${Enc(text)}&size=9_16` }, caption: wm }, {quoted: m})
}
break

case 'text2imgv3':
case 'txt2imgv3': {
  if (!text) return m.reply(`Contoh: ${p_c} beautiful girl with handsome man`)
  lyreact()
  await Lyrra.sendMessage(m.chat, {image: {url: `https://fastrestapis.fasturl.cloud/aiimage/stablediffusion?prompt=${Enc(text)}&model=stable-diffusion-xl-fast` }, caption: wm }, {quoted: m})
}
break

case 'text2imgv4':
case 'txt2imgv4': {
  if (!text) return m.reply(`Contoh: ${p_c} beautiful girl with handsome man`)
    lyreact()
    await Lyrra.sendMessage(m.chat, {image: {url: `https://fastrestapis.fasturl.cloud/aiimage/stablediffusion?prompt=${Enc(text)}&model=stable-diffusion-xl-base` }, caption: wm }, {quoted: m})
}
break

case 'text2imgv5':
case 'txt2imgv5': {
  if (!text) return m.reply(`Contoh: ${p_c} beautiful girl with handsome man`)
    lyreact()
    await Lyrra.sendMessage(m.chat, {image: {url: `https://fastrestapis.fasturl.cloud/aiimage/amazonai?prompt=${Enc(text)}&size=9_16` }, caption: wm }, {quoted: m})
}
break

case 'text2imgv6':
case 'txt2imgv6': {
  if (!text) return m.reply(`Contoh: ${p_c} beautiful girl with handsome man`)
    lyreact()
    await Lyrra.sendMessage(m.chat, {image: {url: `https://fastrestapis.fasturl.cloud/aiimage/gemini?prompt=${Enc(text)}` }, caption: wm }, {quoted: m})
}
break

    case 'emojimix': {
      if (!text.includes('+')) return m.reply(`Contoh: ${p_c} 😂+😭`)
      let [emoji1, emoji2] = text.split('+')
      if (!emoji1 || !emoji2) return m.reply(`Contoh: ${p_c} 😂+😭`)
      try {
        let hex1 = emoji1.codePointAt(0).toString(16)
        let hex2 = emoji2.codePointAt(0).toString(16)

        let res = await fetch(`https://emojik.vercel.app/s/${hex1}_${hex2}?size=128`)
        let buffer = await res.buffer()

        let tempPath = path.join(__dirname, `emoji_${Date.now()}.png`)
        let outputPath = path.join(__dirname, `emoji_resized_${Date.now()}.png`)

        fs.writeFileSync(tempPath, buffer)

        let command = `ffmpeg -i ${tempPath} -vf scale=512:512 ${outputPath}`

        exec(command, async (err) => {
          let resizedBuffer = fs.readFileSync(outputPath)
          await Lyrra.sendImageAsSticker(m.chat, resizedBuffer, m, {
            packname: packname,
            author: author
          })

          fs.unlinkSync(tempPath)
          fs.unlinkSync(outputPath)
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'attp':
    case 'attp2':
    case 'attp3':
    case 'attp4':
    case 'ttp':
    case 'ttp2':
    case 'ttp3':
    case 'ttp4':
    case 'ttp5': {
      if (!text) return m.reply(`Contoh: ${p_c} hai`)

      try {
        const {
          generateAttp,
          generateAttp_v2,
          generateAttp_v3,
          generateAttp_v4,
          generateTtp,
          generateTtp_v2,
          generateTtp_v3,
          generateTtp_v4,
          generateTtp_v5
        } = require('./lib-signal/data-utils/scrape')

        let buffer

        if (command.startsWith('attp')) {
          switch (command) {
          case 'attp':
            buffer = await generateAttp(text)
            break
          case 'attp2':
            buffer = await generateAttp_v2(text)
            break
          case 'attp3':
            buffer = await generateAttp_v3(text)
            break
          case 'attp4':
            buffer = await generateAttp_v4(text)
            break
          }
        } else if (command.startsWith('ttp')) {
          switch (command) {
          case 'ttp':
            buffer = await generateTtp(text)
            break
          case 'ttp2':
            buffer = await generateTtp_v2(text)
            break
          case 'ttp3':
            buffer = await generateTtp_v3(text)
            break
          case 'ttp4':
            buffer = await generateTtp_v4(text)
            break
          case 'ttp5':
            buffer = await generateTtp_v5(text)
            break
          }
        }

        await Lyrra.sendImageAsSticker(m.chat, buffer, m, {
          packname: packname,
          author: author
        })
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'brat': {
      if (!text) return m.reply(`Contoh: ${p_c} hai`)
      if (text.length > 250) return m.reply(`Karakter terbatas, max 250!`)
      lyreact()
      let res = await fetch(`https://aqul-brat.hf.space/?text=${Enc(text)}`)
      let buffer = await res.buffer()
      await Lyrra.sendImageAsSticker(m.chat, buffer, m, {
        packname: packname,
        author: author
      })
    }
    break

    case 'cewebrat':
    case 'bratcewe': {
      if (!text) return m.reply(`Contoh: ${p_c} halo`)
      if (text.length > 50) return m.reply(`Karakter terbatas, max 50!`)
      lyreact()
      const {
        Brats
      } = require('./lib-signal/data-utils/scrape')

      Brats(text).then(async buffer => {
        await Lyrra.sendImageAsSticker(m.chat, buffer, m, {
          packname: packname,
          author: author
        })
      }).catch(err => {
        throw Error('Terjadi kesalahan: ' + err)
      })
    }
    break

    case 'animebrat':
    case 'bratanime':
    case 'animbrat':
    case 'bratanim': {
      if (!text) return m.reply(`Contoh: ${p_c} halo`)
      if (text.length > 50) return m.reply(`Karakter terbatas, max 50!`)
      lyreact()
      const {
        Bratanime
      } = require('./lib-signal/data-utils/scrape')

      Bratanime(text).then(async buffer => {
        await Lyrra.sendImageAsSticker(m.chat, buffer, m, {
          packname: packname,
          author: author
        })
      }).catch(err => {
        throw Error('Terjadi kesalahan: ' + err)
      })
    }
    break

    case 'brat2':
    case 'bratvid':
    case 'bratvidio':
    case 'bratvideo': {
      if (!text) return m.reply(`Contoh: ${p_c} hai`)
      if (text.length > 250) return m.reply(`Karakter terbatas, max 250!`)
      lyreact()

      const words = text.split(" ")
      const tempDir = path.join(process.cwd(), 'x-system')
      if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir)
      const framePaths = []

      try {
        for (let i = 0; i < words.length; i++) {
          const currentText = words.slice(0, i + 1).join(" ")

          const res = await axios.get(
            `https://aqul-brat.hf.space/?text=${Enc(currentText)}`, {
              responseType: "arraybuffer"
            }
          ).catch((e) => e.response)

          const framePath = path.join(tempDir, `frame${i}.mp4`)
          fs.writeFileSync(framePath, res.data)
          framePaths.push(framePath)
        }

        const fileListPath = path.join(tempDir, "filelist.txt")
        let fileListContent = ""

        for (let i = 0; i < framePaths.length; i++) {
          fileListContent += `file '${framePaths[i]}'\n`
          fileListContent += `duration 0.5\n`
        }

        fileListContent += `file '${framePaths[framePaths.length - 1]}'\n`
        fileListContent += `duration 1.5\n`

        fs.writeFileSync(fileListPath, fileListContent)
        const outputVideoPath = path.join(tempDir, "output.mp4")

        execSync(
          `ffmpeg -y -f concat -safe 0 -i ${fileListPath} -vf "fps=30" -c:v libx264 -preset superfast -pix_fmt yuv420p ${outputVideoPath}`
        )

        await Lyrra.sendImageAsSticker(m.chat, outputVideoPath, m, {
          packname: packname,
          author: author
        })

        framePaths.forEach((frame) => {
          if (fs.existsSync(frame)) fs.unlinkSync(frame)
        })
        if (fs.existsSync(fileListPath)) fs.unlinkSync(fileListPath)
        if (fs.existsSync(outputVideoPath)) fs.unlinkSync(outputVideoPath)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'blurimg':
    case 'facepalm':
    case 'beautiful': {
      if (!/image/.test(mime)) return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`);
      lyreact();
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
      let url = await CatBox(media)
      Lyrra.sendMessage(m.chat, {
        image: {
          url: `https://vapis.my.id/api/${command}?url=${Enc(url)}`
        }
      }, {
        quoted: m
      });
    }
    break

    case 'txtimg':
    case 'textimg':
    case 'txtimage':
    case 'textimage': {
      if (!text) return m.reply(`Contoh: ${p_c} hai`)
      if (text.length > 150) return m.reply(`Karakter terbatas, max 150!`)
      lyreact()
      Lyrra.sendMessage(m.chat, {
        image: {
          url: `https://vapis.my.id/api/txtimage?q=${Enc(text)}`
        }
      }, {
        quoted: m
      })
    }
    break

    // === Stalk Menu

    case 'ghrepo': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} LyrraWA`)
        const apiUrl = await fetchJson(`https://vapis.my.id/api/github-userv1?username=${text}`)
        const ghRepo = apiUrl.data

        if (ghRepo) {
          const response = `
*Username:* ${ghRepo.username}
*ID:* ${ghRepo.id}
*Node ID:* ${ghRepo.nodeId}
*Profile Picture:* ${ghRepo.profile_pic}
*URL:* ${ghRepo.url}
*Type:* ${ghRepo.type}
*Admin:* ${ghRepo.admin ? 'Yes' : 'No'}
*Public Repos:* ${ghRepo.public_repo}
*Public Gists:* ${ghRepo.public_gists}
*Followers:* ${ghRepo.followers}
*Following:* ${ghRepo.following}
*Created At:* ${ghRepo.created_at}
*Updated At:* ${ghRepo.updated_at}
      `
          m.reply(response)
        } else {
          m.reply('Data tidak ditemukan')
        }
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'ghrepo2': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} LyrraWA`)
        const apiUrl = await fetchJson(`https://vapis.my.id/api/github-userv2?username=${text}`)
        const ghRepo = apiUrl.data

        if (ghRepo) {
          const response = `
*Login:* ${ghRepo.login}
*ID:* ${ghRepo.id}
*Node ID:* ${ghRepo.node_id}
*Avatar URL:* ${ghRepo.avatar_url}
*Profile URL:* ${ghRepo.html_url}
*Type:* ${ghRepo.type}
*Site Admin:* ${ghRepo.site_admin ? 'Yes' : 'No'}
*Name:* ${ghRepo.name ? ghRepo.name : 'Tidak tersedia'}
*Company:* ${ghRepo.company ? ghRepo.company : 'Tidak tersedia'}
*Blog:* ${ghRepo.blog ? ghRepo.blog : 'Tidak tersedia'}
*Location:* ${ghRepo.location ? ghRepo.location : 'Tidak tersedia'}
*Email:* ${ghRepo.email ? ghRepo.email : 'Tidak tersedia'}
*Hireable:* ${ghRepo.hireable ? 'Yes' : 'No'}
*Bio:* ${ghRepo.bio ? ghRepo.bio : 'Tidak tersedia'}
*Twitter Username:* ${ghRepo.twitter_username ? ghRepo.twitter_username : 'Tidak tersedia'}
*Public Repos:* ${ghRepo.public_repos}
*Public Gists:* ${ghRepo.public_gists}
*Followers:* ${ghRepo.followers}
*Following:* ${ghRepo.following}
*Followers URL:* ${ghRepo.followers_url}
*Following URL:* ${ghRepo.following_url.replace('{/other_user}', '')}
*Gists URL:* ${ghRepo.gists_url.replace('{/gist_id}', '')}
*Starred URL:* ${ghRepo.starred_url.replace('{/owner}{/repo}', '')}
*Subscriptions URL:* ${ghRepo.subscriptions_url}
*Organizations URL:* ${ghRepo.organizations_url}
*Repos URL:* ${ghRepo.repos_url}
*Events URL:* ${ghRepo.events_url.replace('{/privacy}', '')}
*Received Events URL:* ${ghRepo.received_events_url}
*Created At:* ${ghRepo.created_at}
*Updated At:* ${ghRepo.updated_at}
      `
          m.reply(response)
        } else {
          m.reply('Data tidak ditemukan')
        }
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'ytstalk': {
  try {
    if (!text) return m.reply(`Contoh: ${p_c} viryy`)
    const ytData = await ytstalk(text)

    if (ytData) {
      const response = `
*YOUTUBE STALKER:*\n
- Nama Channel: ${ytData.channel}
- Deskripsi: ${ytData.description ? ytData.description : 'Tidak ada'}
- URL Channel: ${ytData.url}
- Total Subscriber: ${ytData.totalSubs}
- Total Video: ${ytData.totalVideos}
- Total Views: ${ytData.views}
- Bergabung pada: ${ytData.join}
- Link Channel: ${ytData.chUrl}
      
*Gambar Profil:*
${ytData.profile}

*Gambar Background:*
${ytData.bgUrl}
      `

      m.reply(response)
    }
  } catch (err) {
    console.error(err)
    m.reply('Terjadi kesalahan')
  }
}
break

    case 'ttstalk': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} zarv7z`)
        const apiUrl = await fetchJson(`https://vapis.my.id/api/tt-stalk?username=${text}`)
        const tiktokData = apiUrl.data

        if (tiktokData) {
          const user = tiktokData.user
          const stats = tiktokData.stats

          const response = `
*Username:* ${user.uniqueId}
*Nickname:* ${user.nickname}
*Region:* ${user.region}
*Verified:* ${user.verified ? 'Yes' : 'No'}
*Followers:* ${stats.followerCount}
*Following:* ${stats.followingCount}
*Likes:* ${stats.heartCount}
*Videos:* ${stats.videoCount}
*Profile Picture:* ${user.avatarLarger}
      `
          m.reply(response)
        } else {
          m.reply('Data tidak ditemukan')
        }
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'ffstalk': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} 12345678`)
        const apiUrl = await fetchJson(`https://vapis.my.id/api/ff-stalk?id=${text}`)
        const ffData = apiUrl.data.account
        if (ffData) {
          const guild = apiUrl.data.guild
          const response = `
*Nama Akun:* ${ffData.name}
*Level:* ${ffData.level}
*Region:* ${ffData.region}
*Like:* ${ffData.like}
*Bio:* ${ffData.bio}
*Guild:* ${guild.name} (Level ${guild.level})
*BR Points:* ${ffData.BR_points}
*CS Points:* ${ffData.CS_points}
*Pet:* ${apiUrl.data.pet_info.name} (Level ${apiUrl.data.pet_info.level})
      `
          m.reply(response)
        } else {
          m.reply('Data tidak ditemukan')
        }
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'mlstalk': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} 109088431, 2558`)
        const [id, zoneId] = text.split(',') || text.split(', ')
        if (!id || !zoneId) return m.reply('Masukkan id dan zoneid')

        const apiUrl = await fetchJson(`https://vapis.my.id/api/ml-stalk?id=${id}&zoneid=${zoneId}`)
        const mlData = apiUrl.data.data
        if (mlData) {
          const product = mlData.product
          const item = mlData.item
          const response = `
*Game:* ${product.name}
*Item:* ${item.name}
*Harga:* ${item.price}
*Username Game:* ${mlData.gameDetail.userName}
*Channel Pembayaran:* ${mlData.paymentName}
*Deskripsi Produk:* ${product.description}
*Gambar Produk:* ${product.imageDisplay}
      `
          m.reply(response)
        } else {
          m.reply('Data tidak ditemukan')
        }
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'npmstalk': {
  try {
    if (!text) return m.reply(`Contoh: ${p_c} express`)

    const { npmStalk } = require('./lib-signal/data-utils/scrape')
    let npmData = await npmStalk(text)
    
    const response = `
*Package:* ${npmData.name}
*Versi:* ${npmData.versionLatest}
*Versi Pertama:* ${npmData.versionPublish}
*Jumlah Versi:* ${npmData.versionUpdate}
*Versi Terbaru:* ${npmData.latestDependencies}
*Versi Pertama:* ${npmData.publishDependencies}
*Waktu Rilis Pertama:* ${npmData.publishTime}
*Waktu Rilis Terbaru:* ${npmData.latestPublishTime}
    `
    m.reply(response)
  } catch (err) {
    console.error(err)
    m.reply('Wah ada yang error, coba lagi nanti!')
  }
}
break

    case 'instagramstalk':
    case 'instastalk':
    case 'igstalk': {
  try {
    if (!text) return m.reply(`Contoh: ${p_c} cristiano`)

    const { igstalk } = require('./lib-signal/data-utils/scrape')
    const co = await igstalk(text)

    if (co) {
      const response = `
*INSTAGRAM STALKER:*\n
- Username: ${co.username}
- Nama Lengkap: ${co.fullName}
- Bio: ${co.bio}
- Website: ${co.website || '-'}
- Verified: ${co.verified ? 'Ya' : 'Tidak'}
- Total Postingan: ${co.posts}
- Followers: ${co.followers}
- Following: ${co.following}

*Gambar Profil:*
${co.avatar}
      `
      return m.reply(response)
    }

    m.reply('Gak ketemu username-nya')
  } catch (err) {
    console.error(err)
    m.reply('Terjadi kesalahan')
  }
}
break

    case 'chwastalk':
    case 'channelstalk':
    case 'chstalk': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} https://whatsapp.com/channel/abcdefg`)

        const {
          chstalk
        } = require('./lib-signal/data-utils/scrape')
        const co = await chstalk(text)
        if (co) {
          const respon = `
*Nama Channel:* ${co.nama}
*Pengikut:* ${co.pengikut}
*Deskripsi:* ${co.deskripsi}
*Link Channel:* ${co.linkChannel}
*Gambar:* ${co.gambar}
`
          return m.reply(respon)
        }

        m.reply('Gak ketemu channel nya')
      } catch (err) {
        console.error(err)
        return m.reply('Terjadi kesalahan')
      }
    }
    break

    // === Others Menu

    case 'ceknickff': {
      let ffnick = q.split(" ")[0]
      if (!ffnick) return m.reply(`ID FF nya mana?`)
      let nick1 = `${ffnick}`
      axios('https://ariepulsa.com/api/get-nickname-game', {
        method: 'POST',
        data: new URLSearchParams(Object.entries({
          api_key: ariekey,
          action: 'get-nickname-game',
          layanan: 'free-fire',
          target: nick1,
        }))
      }).then((res) => {
        if (res.data.status == false) {
          m.reply(`${res.data.data.pesan}`)
        }
        if (res.data.status == true) {
          m.reply(`── 「  *YOUR NICKNAME*  」 ──\n\nGame: FreeFire\nID Game: ${ffnick}\nNickName: ${res.data.data.nickname}\n\n© ${storename}`)
        }
      })
    }
    break

    case 'ceknickml': {
      let mlidnick = q.split(" ")[0]
      let mlzonenick = q.split(" ")[1]
      if (!mlidnick) return m.reply(`ID ML nya mana?\nContoh: ${p_c} 12255668 1244`)
      if (!mlzonenick) return m.reply(`ID server nya mana?\nContoh: ${p_c} 12255668 1244`)
      let nickid = `${mlidnick}`
      let nickzone = `${mlzonenick}`
      axios('https://ariepulsa.com/api/get-nickname-game', {
        method: 'POST',
        data: new URLSearchParams(Object.entries({
          api_key: ariekey,
          action: 'get-nickname-game',
          layanan: 'mobile-legends',
          target: nickid,
          no_meter: nickzone,
        }))
      }).then((res) => {
        if (res.data.status == false) {
          m.reply(`${res.data.data.pesan}`)
        }
        if (res.data.status == true) {
          m.reply(`── 「  *YOUR NICKNAME*  」 ──\n\nGame: Mobile Lengeds\nID Game: ${mlidnick}\nServer: (${mlzonenick})\nNickName: ${res.data.data.nickname}\n\n© ${storename}`)
        }
      })
    }
    break

    case 'imageai':
    case 'diffusion': {
      if (!text) return m.reply('Apa yang ingin kamu buat?')
      lyreact()
      try {
        Lyrra.sendMessage(m.chat, {
          image: {
            url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`
          },
          caption: `Sukses Membuat ${command} Dengan Promt:\n${text}`
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
    }
    break

    case 'hd':
    case 'hdr':
    case 'hdimg':
    case 'remini':
    case 'enhance': {
      if (!/image/.test(mime)) return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`)
      lyreact()

      const {
        upScale,
        remini,
        Pxpic
      } = require('./lib-signal/data-utils/scrape')
      const media = await Lyrra.downloadAndSaveMediaMessage(quoted)

      const hasilnya = await Pxpic(media, 'enhance')
      if (hasilnya?.resultImageUrl) {
        await Lyrra.sendMessage(m.chat, {
          image: {
            url: hasilnya.resultImageUrl
          },
          caption: 'Sukses'
        }, {
          quoted: m
        })
        fs.unlinkSync(media)
        return
      }

      if (await upScale(media, Lyrra, m, m.chat)) {
        fs.unlinkSync(media)
        return
      }

      const proses = await remini(media, 'enhance')
      if (proses) {
        await Lyrra.sendMessage(m.chat, {
          image: proses,
          caption: 'Sukses'
        }, {
          quoted: m
        })
      } else {
        m.reply('Terjadi kesalahan')
      }

      fs.unlinkSync(media)
    }
    break

    case 'hd2':
    case 'hdr2':
    case 'hdimg2':
    case 'remini2':
    case 'enhance2': {
      if (!/image/.test(mime)) return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`)
      lyreact()

      let media
      try {
        const {
          remini
        } = require('./lib-signal/data-utils/scrape')
        media = await Lyrra.downloadAndSaveMediaMessage(quoted)
        let url = await CatBox(media)
        Lyrra.sendMessage(m.chat, {
          image: {
            url: `https://fastrestapis.fasturl.link/aiimage/upscale?imageUrl=${Enc(url)}&resize=2`
          },
          caption: 'Sukses'
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan: ' + err)
      }
      fs.unlinkSync(media)
    }
    break

    case 'recolor': {
      if (!/image/.test(mime)) return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`);
      lyreact()
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
      const {
        recolor
      } = require('./lib-signal/data-utils/scrape')
      const respon = await recolor(media)
      Lyrra.sendMessage(m.chat, {
        image: fs.readFileSync(respon),
        caption: 'Sukses'
      }, {
        quoted: m
      });
      fs.unlinkSync(media)
    }
    break

    case 'dehaze': {
      if (!/image/.test(mime)) return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`);
      lyreact()
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
      const {
        dehaze
      } = require('./lib-signal/data-utils/scrape')
      const respon = await dehaze(media)
      Lyrra.sendMessage(m.chat, {
        image: fs.readFileSync(respon),
        caption: 'Sukses'
      }, {
        quoted: m
      });
      fs.unlinkSync(media)
    }
    break

    case 'upskala':
    case 'upscaler':
    case 'upscale':
    case 'upscala': {
      if (!/image/.test(mime)) return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`);
      lyreact();
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
      let url = await CatBox(media)
      Lyrra.sendMessage(m.chat, {
        image: {
          url: `https://api.ryzendesu.vip/api/ai/remini?url=${url}`
        },
        caption: 'Sukses'
      }, {
        quoted: m
      });
    }
    break

    case 'hdvid':
    case 'hdvidio':
    case 'hdvideo': {
      if (!/video/.test(mime)) {
        return m.reply(`Kirim/kutip video dengan caption ${p_c}`)
      }
      lyreact()
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted)

      try {
        const outputPath = './x-system/hd_video.mp4'
        await hdVideo(media, outputPath)

        await Lyrra.sendMessage(m.chat, {
          video: fs.readFileSync(outputPath),
          caption: 'Video berhasil diubah ke HD!'
        }, {
          quoted: m
        })
      } catch (error) {
        console.error('Error:', error)
        m.reply('Terjadi kesalahan: ' + error)
      } finally {
        if (fs.existsSync(media)) fs.unlinkSync(media)
        if (fs.existsSync('./x-system/hd_video.mp4')) fs.unlinkSync('./x-system/hd_video.mp4')
      }
    }
    break

    case 'tourl': {
      if (!/image/.test(mime) && !/video/.test(mime) && !/audio/.test(mime) && !/webp/.test(mime))
        return m.reply('Harus berupa video, gambar, audio, atau stiker');
      lyreact()
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted);
      let catBoxUrl = await uploadCatBox(media);
      let telegraphUrl = await uploadTelegraph(media);
      let result = `
🔗 *Hasil Upload*
📦 *CatBox*: ${catBoxUrl || '-'}
🌐 *Telegraph*: ${telegraphUrl || '-'}
`;
      let coo = `{\"display_text\":\"COPY URL\",\"id\":\"P\",\"copy_code\":\"${catBoxUrl || '-'}\"}`
      await buttoncopy(m.chat, result, coo, null, m)
    }
    break

    case 'tourlcatbox':
    case 'catboxurl':
    case 'urlcatbox':
    case 'catbox':
    case 'tourl2': {
      if (!/image/.test(mime) && !/video/.test(mime) && !/audio/.test(mime) && !/webp/.test(mime)) return m.reply('Harus berupa video, gambar, audio, atau stiker')
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
      lyreact()
      try {
        const catBoxUrl = await CatBox(media)
        const result = `
🔗 *Hasil Upload*
📦 **CatBox**: ${catBoxUrl || '-'}
`
        let coo = `{\"display_text\":\"COPY URL\",\"id\":\"P\",\"copy_code\":\"${catBoxUrl || '-'}\"}`
        await buttoncopy(m.chat, result, coo, null, m)
      } catch (err) {
        console.error(err)
      } finally {
        await fs.unlinkSync(media)
      }
    }
    break

    case 'tourltele':
    case 'teleurl':
    case 'telegraphurl':
    case 'telegraph':
    case 'tourl3': {
      if (!/image/.test(mime) && !/video/.test(mime) && !/audio/.test(mime) && !/webp/.test(mime))
        return m.reply('Harus berupa video, gambar, audio, atau stiker');
      lyreact()
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted);
      let telegraphUrl = await uploadTelegraph(media);
      let result = `
🔗 *Hasil Upload*
🌐 *Telegraph*: ${telegraphUrl || '-'}
`;
      let coo = `{\"display_text\":\"COPY URL\",\"id\":\"P\",\"copy_code\":\"${telegraphUrl || '-'}\"}`
      await buttoncopy(m.chat, result, coo, null, m)
    }
    break

    case 'ssweb': {
      if (!args[0]) return m.reply(`Contoh: ${p_c} linknya`)
      lyreact()
      try {
        await Lyrra.sendMessage(m.chat, {
          image: {
            url: `https://api.vreden.web.id/api/ssweb?url=${text}&type=tablet`
          },
          caption: `© ${wm}`
        }, {
          quoted: m
        })
      } catch (err) {
        console.error(err)
      }
    }
    break

    case 'removebg':
    case 'nobg': {
      if (!/image/.test(mime)) return m.reply(`Kirim/kutip gambar/stiker dengan caption ${p_c}`)
      lyreact()
      let {
        removeBg
      } = require('./lib-signal/data-utils/scrape')
      let img = await quoted.download()
      let image = await removeBg(img)
      let result = await Buffer.from(image, "base64")
      Lyrra.sendImage(m.chat, result, `© ${wm}`, m)
    }
    break

    case 'akiyama':
    case 'ana':
    case 'art':
    case 'asuna':
    case 'ayuzawa':
    case 'boruto':
    case 'bts':
    case 'cartoon':
    case 'chiho':
    case 'chitoge':
    case 'cosplay':
    case 'cosplayloli':
    case 'cosplaysagiri':
    case 'cyber':
    case 'deidara':
    case 'doraemon':
    case 'elaina':
    case 'emilia':
    case 'erza':
    case 'exo':
    case 'gamewallpaper':
    case 'gremory':
    case 'hacker':
    case 'hestia':
    case 'hinata':
    case 'husbu':
    case 'inori':
    case 'islamic':
    case 'isuzu':
    case 'itachi':
    case 'itori':
    case 'jennie':
    case 'jiso':
    case 'justina':
    case 'kaga':
    case 'kagura':
    case 'kakasih':
    case 'kaori':
    case 'keneki':
    case 'kotori':
    case 'kurumi':
    case 'lisa':
    case 'madara':
    case 'megumin':
    case 'mikasa':
    case 'mikey':
    case 'miku':
    case 'minato':
    case 'mountain':
    case 'naruto':
    case 'neko2':
    case 'nekonime':
    case 'nezuko':
    case 'onepiece':
    case 'pentol':
    case 'pokemon':
    case 'programming':
    case 'randomnime':
    case 'randomnime2':
    case 'rize':
    case 'rose':
    case 'sagiri':
    case 'sakura':
    case 'sasuke':
    case 'satanic':
    case 'shina':
    case 'shinka':
    case 'shinomiya':
    case 'shizuka':
    case 'shota':
    case 'shortquote':
    case 'space':
    case 'technology':
    case 'tejina':
    case 'toukachan':
    case 'tsunade':
    case 'yotsuba':
    case 'yuki':
    case 'yulibocil':
    case 'yumeko': {
      lyreact()
      let heyy
      if (/akiyama/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/akiyama.json')
      if (/ana/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/ana.json')
      if (/art/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/art.json')
      if (/asuna/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/asuna.json')
      if (/ayuzawa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/ayuzawa.json')
      if (/boneka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/boneka.json')
      if (/boruto/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/boruto.json')
      if (/bts/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/bts.json')
      if (/cecan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/cecan.json')
      if (/chiho/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/chiho.json')
      if (/chitoge/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/chitoge.json')
      if (/cogan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/cogan.json')
      if (/cosplay/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/cosplay.json')
      if (/cosplayloli/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/cosplayloli.json')
      if (/cosplaysagiri/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/cosplaysagiri.json')
      if (/cyber/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/cyber.json')
      if (/deidara/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/deidara.json')
      if (/doraemon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/doraemon.json')
      if (/eba/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/eba.json')
      if (/elaina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/elaina.json')
      if (/emilia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/emilia.json')
      if (/erza/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/erza.json')
      if (/exo/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/exo.json')
      if (/femdom/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/femdom.json')
      if (/freefire/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/freefire.json')
      if (/gamewallpaper/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/gamewallpaper.json')
      if (/glasses/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/glasses.json')
      if (/gremory/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/gremory.json')
      if (/hacker/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/hekel.json')
      if (/hestia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/hestia.json')
      if (/husbu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/husbu.json')
      if (/inori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/inori.json')
      if (/islamic/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/islamic.json')
      if (/isuzu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/isuzu.json')
      if (/itachi/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/itachi.json')
      if (/itori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/itori.json')
      if (/jennie/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/jeni.json')
      if (/jiso/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/jiso.json')
      if (/justina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/justina.json')
      if (/kaga/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/kaga.json')
      if (/kagura/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/kagura.json')
      if (/kakasih/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/kakasih.json')
      if (/kaori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/kaori.json')
      if (/cartoon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/kartun.json')
      if (/shortquote/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/katakata.json')
      if (/keneki/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/keneki.json')
      if (/kotori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/kotori.json')
      if (/kpop/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/kpop.json')
      if (/kucing/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/kucing.json')
      if (/kurumi/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/kurumi.json')
      if (/lisa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/lisa.json')
      if (/loli/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/loli.json')
      if (/madara/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/madara.json')
      if (/megumin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/megumin.json')
      if (/mikasa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/mikasa.json')
      if (/mikey/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/mikey.json')
      if (/miku/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/miku.json')
      if (/minato/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/minato.json')
      if (/mobile/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/mobil.json')
      if (/motor/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/motor.json')
      if (/mountain/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/mountain.json')
      if (/naruto/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/naruto.json')
      if (/neko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/neko.json')
      if (/neko2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/neko2.json')
      if (/nekonime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/nekonime.json')
      if (/nezuko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/nezuko.json')
      if (/onepiece/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/onepiece.json')
      if (/pentol/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/pentol.json')
      if (/pokemon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/pokemon.json')
      if (/profil/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/profil.json')
      if (/progamming/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/programming.json')
      if (/pubg/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/pubg.json')
      if (/randblackpink/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/randblackpink.json')
      if (/randomnime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/randomnime.json')
      if (/randomnime2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/randomnime2.json')
      if (/rize/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/rize.json')
      if (/rose/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/rose.json')
      if (/ryujin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/ryujin.json')
      if (/sagiri/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/sagiri.json')
      if (/sakura/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/sakura.json')
      if (/sasuke/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/sasuke.json')
      if (/satanic/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/satanic.json')
      if (/shina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/shina.json')
      if (/shinka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/shinka.json')
      if (/shinomiya/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/shinomiya.json')
      if (/shizuka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/shizuka.json')
      if (/shota/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/shota.json')
      if (/space/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/tatasurya.json')
      if (/technology/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/technology.json')
      if (/tejina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/tejina.json')
      if (/toukachan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/toukachan.json')
      if (/tsunade/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/tsunade.json')
      if (/waifu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/waifu.json')
      if (/wallhp/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/wallhp.json')
      if (/wallml/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/wallml.json')
      if (/wallmlnime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/wallnime.json')
      if (/yotsuba/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/yotsuba.json')
      if (/yuki/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/yuki.json')
      if (/yulibocil/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/yulibocil.json')
      if (/yumeko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/Leoo7z/Image-Source/main/image/yumeko.json')
      let yeha = heyy[Math.floor(Math.random() * heyy.length)]
      Lyrra.sendMessage(m.chat, {
        image: {
          url: yeha
        },
        caption: global.wm
      }, {
        quoted: m
      })
    }
    break
    case 'resize': {
      if (!args[0]) return m.reply(`Contoh ${p_c} 300x300\nPanjangxlebar`);
      await lyreact();

      let panjang = q.split('x')[0];
      let lebar = q.split('x')[1];

      let media = await Lyrra.downloadAndSaveMediaMessage(quoted);
      let ran = getRandom('.jpeg');

      // Susun perintah untuk ffmpeg
      const command = `ffmpeg -i ${media} -vf scale=${panjang}:${lebar} ${ran}`;

      exec(command, async (err) => {
        fs.unlinkSync(media);

        if (err) {
          return m.reply(`Terjadi kesalahan: ${err.message}`);
        }

        try {
          let buffer453 = fs.readFileSync(ran);
          await Lyrra.sendMessage(
            m.chat, {
              mimetype: 'image/jpeg',
              image: buffer453
            }, {
              quoted: m
            }
          );
        } catch (readError) {
          return m.reply(`Error reading resized image: ${readError.message}`);
        } finally {
          fs.unlinkSync(ran);
        }
      });
    }
    break

    case 'qcstc':
    case 'stcqc':
    case 'qcstic':
    case 'qc':
    case 'qcstick': {
      if (!args[0]) return m.reply(`Contoh: ${p_c} white halo`)
      if (!args[1]) return m.reply(`Contoh: ${p_c} white halo`)
      if (text.length > 80) return m.reply(`Maximal 80 karakter!`)
      lyreact()
      let [color, ...message] = text.split(' ')
      message = m.quoted ? m.quoted : message.join(' ')
      let backgroundColor
      switch (color) {
      case 'pink':
        backgroundColor = '#f68ac9'
        break
      case 'blue':
        backgroundColor = '#6cace4'
        break
      case 'red':
        backgroundColor = '#f44336'
        break
      case 'green':
        backgroundColor = '#4caf50'
        break
      case 'yellow':
        backgroundColor = '#ffeb3b'
        break
      case 'purple':
        backgroundColor = '#9c27b0'
        break
      case 'darkblue':
        backgroundColor = '#0d47a1'
        break
      case 'lightblue':
        backgroundColor = '#03a9f4'
        break
      case 'ash':
        backgroundColor = '#9e9e9e'
        break
      case 'orange':
        backgroundColor = '#ff9800'
        break
      case 'black':
        backgroundColor = '#000000'
        break
      case 'white':
        backgroundColor = '#ffffff'
        break
      case 'teal':
        backgroundColor = '#008080'
        break
      case 'lightpink':
        backgroundColor = '#FFC0CB'
        break
      case 'chocolate':
        backgroundColor = '#A52A2A'
        break
      case 'salmon':
        backgroundColor = '#FFA07A'
        break
      case 'magenta':
        backgroundColor = '#FF00FF'
        break
      case 'tan':
        backgroundColor = '#D2B48C'
        break
      case 'wheat':
        backgroundColor = '#F5DEB3'
        break
      case 'deeppink':
        backgroundColor = '#FF1493'
        break
      case 'fire':
        backgroundColor = '#B22222'
        break
      case 'skyblue':
        backgroundColor = '#00BFFF'
        break
      case 'brightskyblue':
        backgroundColor = '#1E90FF'
        break
      case 'hotpink':
        backgroundColor = '#FF69B4'
        break
      case 'lightskyblue':
        backgroundColor = '#87CEEB'
        break
      case 'seagreen':
        backgroundColor = '#20B2AA'
        break
      case 'darkred':
        backgroundColor = '#8B0000'
        break
      case 'orangered':
        backgroundColor = '#FF4500'
        break
      case 'cyan':
        backgroundColor = '#48D1CC'
        break
      case 'violet':
        backgroundColor = '#BA55D3'
        break
      case 'mossgreen':
        backgroundColor = '#00FF7F'
        break
      case 'darkgreen':
        backgroundColor = '#008000'
        break
      case 'navyblue':
        backgroundColor = '#191970'
        break
      case 'darkorange':
        backgroundColor = '#FF8C00'
        break
      case 'darkpurple':
        backgroundColor = '#9400D3'
        break
      case 'fuchsia':
        backgroundColor = '#FF00FF'
        break
      case 'darkmagenta':
        backgroundColor = '#8B008B'
        break
      case 'darkgray':
        backgroundColor = '#2F4F4F'
        break
      case 'peachpuff':
        backgroundColor = '#FFDAB9'
        break
      case 'darkishgreen':
        backgroundColor = '#BDB76B'
        break
      case 'darkishred':
        backgroundColor = '#DC143C'
        break
      case 'goldenrod':
        backgroundColor = '#DAA520'
        break
      case 'darkishgray':
        backgroundColor = '#696969'
        break
      case 'darkishpurple':
        backgroundColor = '#483D8B'
        break
      case 'gold':
        backgroundColor = '#FFD700'
        break
      case 'silver':
        backgroundColor = '#C0C0C0'
        break
      default:
        return m.reply('Warna tersebut tidak ditemukan!')
      }
      const username = db.data.users[m.sender].nama
      const avatar = await Lyrra.profilePictureUrl(m.sender, "image").catch(() => 'https://files.catbox.moe/nwvkbt.png')
      const json = {
        type: 'quote',
        format: 'png',
        backgroundColor,
        width: 512,
        height: 768,
        scale: 2,
        messages: [{
          entities: [],
          avatar: true,
          from: {
            id: 1,
            name: username,
            photo: {
              url: avatar
            }
          },
          text: message,
          replyMessage: {}
        }]
      }
      const response = await axios.post('https://bot.lyo.su/quote/generate', json, {
        headers: {
          'Content-Type': 'application/json'
        }
      })
      const buffer = Buffer.from(response.data.result.image, 'base64')
      Lyrra.sendImageAsSticker(m.chat, buffer, m, {
        packname: packname,
        author: author
      })
    }
    break

    case 'qckode':
    case 'kodeqc': {
      m.reply(`${monospace("LIST  WARNA")}\n\n• Pink\n• Blue\n• Red\n• Green\n• Yellow\n• Purple\n• Darkblue\n• Lightblue\n• Ash\n• Orange\n• black\n• White\n• Teal\n• Lightpink\n• Chocolate\n• Salmon\n• Magenta\n• Tan\n• Wheat\n• Deeppink\n• Fire\n• Skyblue\n• Safron\n• Brightskyblue\n• Hotpink\n• Lightskyblue\n• Seagreen\n• Darkred\n• Orangered\n• Cyan\n• Violet\n• Mossgreen\n• Darkgreen\n• Navyblue\n• Darkorange\n• Darkpurple\n• Fuchsia\n• Darkmagenta\n• Darkgray\n• Peachpuff\n• Plackishgreen\n• Darkishred\n• Goldenrod\n• Darkishgray\n• Darkishpurple\n• Gold\n• Silver`)
    }
    break

    case 'qckode':
    case 'kodeqc': {
      m.reply(`${monospace("LIST  WARNA")}\n\n• Pink\n• Blue\n• Red\n• Green\n• Yellow\n• Purple\n• Darkblue\n• Lightblue\n• Ash\n• Orange\n• black\n• White\n• Teal\n• Lightpink\n• Chocolate\n• Salmon\n• Magenta\n• Tan\n• Wheat\n• Deeppink\n• Fire\n• Skyblue\n• Safron\n• Brightskyblue\n• Hotpink\n• Lightskyblue\n• Seagreen\n• Darkred\n• Orangered\n• Cyan\n• Violet\n• Mossgreen\n• Darkgreen\n• Navyblue\n• Darkorange\n• Darkpurple\n• Fuchsia\n• Darkmagenta\n• Darkgray\n• Peachpuff\n• Plackishgreen\n• Darkishred\n• Goldenrod\n• Darkishgray\n• Darkishpurple\n• Gold\n• Silver`)
    }
    break

    case 's':
    case 'stiker':
    case 'setiker':
    case 'sticker': {
      if (!quoted) return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`)
      lyreact()

      if (quoted) {
        let msg = quoted
        let type = Object.keys(msg)[0]
        if (msg[type].viewOnce) {
          let media = await downloadContentFromMessage(msg[type], type == 'imageMessage' ? 'image' : 'video')
          let buffer = Buffer.from([])
          for await (const chunk of media) {
            buffer = Buffer.concat([buffer, chunk])
          }
          if (/video/.test(type)) {
            if ((quoted.msg || quoted).seconds > 25) return m.reply('Maksimal 25 detik!')
            await Lyrra.vidToSticker(m.chat, buffer, m, {
              packname: packname,
              author: author
            })
            return
          } else if (/image/.test(type)) {
            await Lyrra.imgToSticker(m.chat, buffer, m, {
              packname: packname,
              author: author
            })
            return
          }
        }
      }

      if (/image/.test(mime)) {
        let media = await Lyrra.downloadAndSaveMediaMessage(quoted, +new Date * 1)
        await Lyrra.imgToSticker(m.chat, media, m, {
          packname: packname,
          author: author
        })
        await fs.unlinkSync(media)
      } else if (/video/.test(mime)) {
        if ((quoted.msg || quoted).seconds > 25) return m.reply('Maksimal 25 detik!')
        let media = await Lyrra.downloadAndSaveMediaMessage(quoted, +new Date * 1)
        await Lyrra.vidToSticker(m.chat, media, m, {
          packname: packname,
          author: author
        })
        await fs.unlinkSync(media)
      } else if (/sticker/.test(mime)) {
        let media = await Lyrra.downloadAndSaveMediaMessage(quoted, +new Date * 1)
        await Lyrra.sendStickerFromUrl(m.chat, media, m, {
          packname: packname,
          author: author
        })
        await fs.unlinkSync(media)
      } else m.reply(`Kirim/kutip gambar dengan caption ${p_c}`)
    }
    break

    case 'smeme': {
      lyreact()
      if (quoted) {
        let msg = quoted
        let type = Object.keys(msg)[0]
        if (msg[type].viewOnce && /image/.test(type)) {
          let media = await downloadContentFromMessage(msg[type], 'image')
          let buffer = Buffer.from([])
          for await (const chunk of media) {
            buffer = Buffer.concat([buffer, chunk])
          }

          let teksAtas = text.split('|')[0] || ''
          let teksBawah = text.split('|')[1] || ''
          const tempFile = `./temp_${Date.now()}.jpg`
          await fs.writeFileSync(tempFile, buffer)

          const {
            Smeme
          } = require('./lib-signal/data-utils/scrape')
          let hasil = await Smeme(teksAtas, teksBawah, tempFile)

          await Lyrra.sendImageAsSticker(m.chat, hasil, m, {
            packname: packname,
            author: author
          })

          await fs.unlinkSync(tempFile)
          return
        }
      }

      if (!/webp/.test(mime) && /image/.test(mime)) {
        lyreact()
        let teksAtas = text.split('|')[0] || ''
        let teksBawah = text.split('|')[1] || ''
        let mee = await Lyrra.downloadAndSaveMediaMessage(quoted)

        const {
          Smeme
        } = require('./lib-signal/data-utils/scrape')
        let hasil = await Smeme(teksAtas, teksBawah, mee)

        await Lyrra.sendImageAsSticker(m.chat, hasil, m, {
          packname: packname,
          author: author
        })
        await fs.unlinkSync(mee)
      } else {
        m.reply(`Kirim/kutip gambar dengan caption ${p_c} lyrra|lyrra`)
      }
    }
    break

    case 'mediawm':
    case 'wmmedia':
    case 'matermarkstiker':
    case 'swatermark':
    case 'wm':
    case 'swm': {
      if (!quoted) return m.reply(`Kirim/kutip stiker lalu ketik ${p_c} teks1|teks2`)

      let [teks1, teks2] = text.split('|').map(v => v || '')
      lyreact()

      let processSticker = async (media, type) => {
        await Lyrra[`${type}ToSticker`](m.chat, media, m, {
          packname: teks1,
          author: teks2
        })
      }

      if (m.quoted.isAnimated) {
        let media = await Lyrra.downloadAndSaveMediaMessage(quoted, new Date * 1)
        const {
          webp2mp4File
        } = require('./lib-signal/data-utils/scrape')
        let buffer = await getBuffer(await webp2mp4File(await CatBox(media)))
        await processSticker(buffer, 'vid')
        fs.unlinkSync(media)
      } else if (/image/.test(mime)) {
        let media = await quoted.download()
        await processSticker(media, 'img')
        fs.unlinkSync(media)
      } else if (/video/.test(mime)) {
        if ((quoted.msg || quoted).seconds > 18) return m.reply('Maksimal 18 detik!')
        let media = await quoted.download()
        await processSticker(media, 'vid')
        fs.unlinkSync(media)
      } else {
        m.reply(`Kirim/kutip stiker lalu ketik ${p_c} teks1|teks2`)
      }
    }
    break

    case 'tts':
    case 'say': {
      if (!text) return m.reply(`Contoh: ${p_c} aku sayang Lyrraa`)
      await lyreact()
      const {
        Tts
      } = require('./lib-signal/data-utils/scrape')
      Tts(Lyrra, m, `${Enc(text)}`, 'Takumi')
    }
    break

    case 'gtts2':
    case 'say2': {
      if (!text) return m.reply(`Contoh: ${p_c} aku sayang Lyrraa`)
      await lyreact()
      Lyrra.sendMessage(m.chat, {
        audio: {
          url: `https://api.siputzx.my.id/api/tools/tts?text=${Enc(text)}&voice=id-ID-ArdiNeural&rate=0&pitch=0&volume=0`
        },
        mimetype: 'audio/mpeg',
        ptt: true
      }, {
        quoted: m
      })
    }
    break

    case 'gtts3':
    case 'say3': {
      if (!text) return m.reply(`Contoh: ${p_c} aku sayang Lyrraa`)
      await lyreact()
      Lyrra.sendMessage(m.chat, {
        audio: {
          url: `https://api.siputzx.my.id/api/tools/tts?text=${Enc(text)}&voice=id-ID-GadisNeural&rate=0&pitch=0&volume=0`
        },
        mimetype: 'audio/mpeg',
        ptt: true
      }, {
        quoted: m
      })
    }
    break

    case 'rvo':
    case 'readvo':
    case 'readviewonce': {
      if (!m.quoted) return m.reply('Kutip pesan view-once!')
      let msg = m.quoted
      let type = msg.mtype
      if (!msg.viewOnce) return m.reply('Itu bukan pesan view-once!')

      let media = await downloadContentFromMessage(
        msg,
        type === 'imageMessage' ? 'image' :
        type === 'videoMessage' ? 'video' : 'audio'
      )

      let buffer = Buffer.from([])
      for await (const chunk of media) {
        buffer = Buffer.concat([buffer, chunk])
      }

      let sendOptions = {
        quoted: m
      }
      if (/video/.test(type)) {
        return Lyrra.sendMessage(m.chat, {
          video: buffer,
          caption: msg.caption || ''
        }, sendOptions)
      } else if (/image/.test(type)) {
        return Lyrra.sendMessage(m.chat, {
          image: buffer,
          caption: msg.caption || ''
        }, sendOptions)
      } else if (/audio/.test(type)) {
        return Lyrra.sendMessage(m.chat, {
          audio: buffer,
          mimetype: 'audio/mpeg',
          ptt: true
        }, sendOptions)
      }
    }
    break

    case 'getvideo': {
      if (!text) return m.reply(`Contoh: ${p_c} 1`)
      if (!m.quoted) return m.reply('Kutip pesan ytsearch bot!')
      let urls = quoted.text.match(new RegExp(/(?:https?:\/\/)?(?:youtu\.be\/|(?:www\.|m\.)?youtube\.com\/(?:watch|v|embed|shorts)(?:\.php)?(?:\?.*v=|\/))([a-zA-Z0-9\_-]+)/, 'gi'))
      if (!urls) return m.reply(`Mungkin pesan yang kamu reply tidak mengandung hasil ytsearch`)
      await lyreact()
      downloadMp4(urls[text - 1])
    }
    break

    case 'getmusic': {
      if (!text) return m.reply(`Contoh: ${p_c} 1`)
      if (!m.quoted) return m.reply('Kutip pesan ytsearch bot!')
      let urls = quoted.text.match(new RegExp(/(?:https?:\/\/)?(?:youtu\.be\/|(?:www\.|m\.)?youtube\.com\/(?:watch|v|embed|shorts)(?:\.php)?(?:\?.*v=|\/))([a-zA-Z0-9\_-]+)/, 'gi'))
      if (!urls) return m.reply(`Mungkin pesan yang kamu reply tidak mengandung hasil ytsearch`)
      await lyreact()
      downloadMp3(urls[text - 1])
    }
    break

    case 'cekk-khodam':
    case 'cek-khodam':
    case 'cekodam':
    case 'cekkodam':
    case 'cekkhodam': {
      if (!text) return m.reply(`Contoh: ${p_c} Lyrraa`)
      const khodam = pickRandom([
        "Kaleng Cat Avian",
        "Pipa Rucika",
        "Botol Tupperware",
        "Badut Mixue",
        "Sabun GIV",
        "Sandal Swallow",
        "Jarjit",
        "Ijat",
        "Fizi",
        "Mail",
        "Ehsan",
        "Upin",
        "Ipin",
        "Sungut Lele",
        "Tok Dalang",
        "Opah",
        "Opet",
        "Alul",
        "Pak Vinsen",
        "Maman Resing",
        "Pak RT",
        "Admin ETI",
        "Bung Towel",
        "Lumpia Basah",
        "Martabak Manis",
        "Baso Tahu",
        "Tahu Gejrot",
        "Dimsum",
        "Seblak Ceker",
        "Telor Gulung",
        "Tahu Aci",
        "Tempe Mendoan",
        "Nasi Kucing",
        "Kue Cubit",
        "Tahu Sumedang",
        "Nasi Uduk",
        "Wedang Ronde",
        "Kerupuk Udang",
        "Cilok",
        "Cilung",
        "Kue Sus",
        "Jasuke",
        "Seblak Makaroni",
        "Sate Padang",
        "Sayur Asem",
        "Kromboloni",
        "Marmut Pink",
        "Belalang Mullet",
        "Kucing Oren",
        "Lintah Terbang",
        "Singa Paddle Pop",
        "Macan Cisewu",
        "Vario Mber",
        "Beat Mber",
        "Supra Geter",
        "Oli Samping",
        "Knalpot Racing",
        "Jus Stroberi",
        "Jus Alpukat",
        "Alpukat Kocok",
        "Es Kopyor",
        "Es Jeruk",
        "Cappucino Cincau",
        "Jasjus Melon",
        "Teajus Apel",
        "Pop ice Mangga",
        "Teajus Gulabatu",
        "Air Selokan",
        "Air Kobokan",
        "TV Tabung",
        "Keran Air",
        "Tutup Panci",
        "Kotak Amal",
        "Tutup Termos",
        "Tutup Botol",
        "Kresek Item",
        "Kepala Casan",
        "Ban Serep",
        "Kursi Lipat",
        "Kursi Goyang",
        "Kulit Pisang",
        "Warung Madura",
        "Gorong-gorong",
        "Tai Kuda",
        "Tikus Kentut",
        "Banteng Merah",
        "Bajigur",
        "Bakso Sumatra",
        "Neymar Bogor",
        "Christiano Rojali",
        "Batagor",
        "Seblak Kalimantan",
        "Macan Putih",
        "Harimau Sumatra",
        "Harimau Putih",
        "Singa",
        "Raja Iblis",
        "Telur Betawi",
        "Cilok Goreng",
      ])
      const response = `
${monospace("CEK  KHODAM")}
- Nama: ` + `${kapital(text)}` + `
- Khodam: ${khodam}
`
      m.reply(response)
      try {
        let tek = `Khodam nya ${text}, adalah: ${khodam}`
        await sleep(50)
        Lyrra.sendMessage(m.chat, {
          audio: {
            url: `https://api.siputzx.my.id/api/tools/tts?text=${Enc(tek)}&voice=id-ID-ArdiNeural&rate=0&pitch=0&volume=0`
          },
          mimetype: 'audio/mpeg',
          ptt: true
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'toimage':
    case 'toimg': {
      try {
        if (!/webp/.test(mime)) return m.reply(`Kutip stiker dengan caption ${p_c}`)
        await lyreact()
        let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
        let ran = await getRandom('.png')
        exec(`ffmpeg -i ${media} ${ran}`, (err) => {
          fs.unlinkSync(media)
          let buffer = fs.readFileSync(ran)
          Lyrra.sendMessage(from, {
            image: buffer
          }, {
            quoted: m
          })
          fs.unlinkSync(ran)
        })
      } catch (err) {
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'tovideo':
    case 'tovid': {
      try {
        if (!/webp/.test(mime)) return m.reply(`Kutip stiker dengan caption ${p_c}`)
        await lyreact()
        let media = await Lyrra.downloadAndSaveMediaMessage(quoted, new Date * 1)
        let fileUrl = await CatBox(media)
        const {
          webp2mp4File
        } = require('./lib-signal/data-utils/scrape')
        let convertedVideo = await webp2mp4File(fileUrl)

        await Lyrra.sendMessage(m.chat, {
          video: {
            url: convertedVideo
          },
          caption: ''
        }, {
          quoted: m
        })
      } catch (error) {
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'toaudio':
    case 'tomp3': {
      if (!/video/.test(mime) && !/audio/.test(mime)) return m.reply(`Kirim/kutip vidio/vn dengan caption ${p_c}`)
      await lyreact()
      let media = await quoted.download()
      let {
        toAudio
      } = require('./lib-signal/data-utils/exif')
      let audio = await toAudio(media, 'mp4')
      Lyrra.sendMessage(m.chat, {
        audio,
        mimetype: 'audio/mpeg'
      }, {
        quoted: m
      })
    }
    break

    case 'tovn': {
      try {
        if (!/video/.test(mime) && !/audio/.test(mime)) return m.reply(`Kirim/kutip vidio/audio dengan caption ${p_c}`)
        await lyreact()
        var media = await m.quoted.download()
        let {
          toAudio
        } = require('./lib-signal/data-utils/exif')
        let audio = await toAudio(media, 'mp4')
        Lyrra.sendMessage(from, {
          audio,
          mimetype: 'audio/mpeg',
          ptt: true
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi kesalahan')
      }
    }
    break

    case 'sewabot':
    case 'botsewa':
    case 'sewa': {
      if (!text) return m.reply(`Contoh: ${p_c} linkgc`)
      if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) return m.reply('Harus berupa link grup WhatsApp!')
      let teks = 'Silahkan Pilih List SewaBot,\nTombol Ada Di Bawah'
      await Lyrra.sendMessage(
        m.chat, {
          document: {
            url: thumb
          },
          mimetype: "image/png",
          pageCount: 2025,
          fileName: `${botname}`,
          fileLength: 100000000000000,
          jpegThumbnail: fs.readFileSync('./media/thumbnail1.jpg'),
          caption: teks,
          contextInfo: {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: chjid + "@newsletter",
              newsletterName: `${wm}`,
              serverMessageId: 143
            },
            businessMessageForwardInfo: {
              businessOwnerJid: Lyrra.decodeJid(Lyrra.user.id)
            }
          },
          footer: `${wm}`,
          buttons: [{
            buttonId: 'action',
            buttonText: {
              displayText: 'interactiveMeta'
            },
            type: 4,
            nativeFlowInfo: {
              name: 'single_select',
              paramsJson: JSON.stringify({
                title: 'Select Harga',
                sections: [{
                    title: "Budged Friendly",
                    rows: [{
                      "title": " 5 Days ",
                      "description": `Rp ${toRupiah(botsewa.day5)} IDR`,
                      "id": `${_p}sewa5days ${args[0]}`
                    }]
                  },
                  {
                    title: "Discount Price",
                    rows: [{
                      "title": " 10 Days ",
                      "description": `Rp ${toRupiah(botsewa.day10)} IDR`,
                      "id": `${_p}sewa10days ${args[0]}`
                    }]
                  },
                  {
                    title: "Economical Option",
                    rows: [{
                      "title": " 15 Days ",
                      "description": `Rp ${toRupiah(botsewa.day15)} IDR`,
                      "id": `${_p}sewa15days ${args[0]}`
                    }]
                  },
                  {
                    title: "Luxury Price",
                    rows: [{
                      "title": " 30 Days ",
                      "description": `Rp ${toRupiah(botsewa.day30)} IDR`,
                      "id": `${_p}sewa30days ${args[0]}`
                    }]
                  },
                  {
                    title: "Exclusive Stars",
                    rows: [{
                      "title": " Permanent ",
                      "description": `Rp ${toRupiah(botsewa.dayunli)} IDR`,
                      "id": `${_p}sewaunlidays ${args[0]}`
                    }],
                  },
                ],
              }),
            },
          }, ],
          headerType: 1,
          viewOnce: true
        }, {
          quoted: m
        })
    }
    break

    case 'sewa5days': {
      if (db.data.users[m.sender].ewallet < botsewa.day5) {
        return m.reply(`❌ *Ewallet tidak cukup!*\n\n💰 *Ewallet kamu:* Rp${toRupiah(db.data.users[m.sender].ewallet)}\n💳 *Harga sewa 5 day:* Rp${toRupiah(botsewa.day5)}\nSilahkan Deposit Terlebih Dahulu.\n\n*Example :*\n${_p}deposit <nominal>`);
      }
      let url = args[0]
      url = url.split('https://chat.whatsapp.com/')[1]
      if (!url) return m.reply(`Link grup tidak valid!`)

      try {
        const groupId = await Lyrra.groupAcceptInvite(url)
        if (_sewa.checkSewaGroup(groupId, sewa)) {
          return m.reply(`Bot sudah disewa oleh grup tersebut!`)
        }

        const groupMetadata = await Lyrra.groupMetadata(groupId)
        if (groupMetadata.joinApprovalMode) {
          return m.reply(`Bot tidak dapat bergabung karena "Setujui anggota baru" aktif`)
        }

        const expiration = _sewa.getSewaExpired(m.chat, sewa)
        if (expiration === 'Permanen') {
          return
        }
        const remainingTime = ms(expiration - Date.now())

        _sewa.addSewaGroup(groupId, '5d', sewa)
      } catch (err) {
        console.error(err)
        m.reply(`Terjadi kesalahan: ${err}`)
      }
      let teks = `   *[ User Sewa ]*
Nomor : ${m.sender.split('@')[0]}
Type : SewaBot 5 Days
Id : -
Harga : ${toRupiah(botsewa.day5)} IDR

https://wa.me/${m.sender.split('@')[0]}`
      let teks1 = `   *[ Sewa Bot ]*
Nomor : ${m.sender.split('@')[0]}
Type : SewaBot 5 Days
Id : -
Harga : ${toRupiah(botsewa.day5)} IDR`
      await Lyrra.sendTeks(owner + '@s.whatsapp.net', teks, null)
      await Lyrra.sendTeks(m.sender, teks1, m)
      minEwallet(m.sender, botsewa.day5)
    }
    break

    case 'sewa10days': {
      if (db.data.users[m.sender].ewallet < botsewa.day10) {
        return m.reply(`❌ *Ewallet tidak cukup!*\n\n💰 *Ewallet kamu:* Rp${toRupiah(db.data.users[m.sender].ewallet)}\n💳 *Harga sewa 10 day:* Rp${toRupiah(botsewa.day10)}\nSilahkan Deposit Terlebih Dahulu.\n\n*Example :*\n${_p}deposit <nominal>`);
      }
      let url = args[0]
      url = url.split('https://chat.whatsapp.com/')[1]
      if (!url) return m.reply(`Link grup tidak valid!`)

      try {
        const groupId = await Lyrra.groupAcceptInvite(url)
        if (_sewa.checkSewaGroup(groupId, sewa)) {
          return m.reply(`Bot sudah disewa oleh grup tersebut!`)
        }

        const groupMetadata = await Lyrra.groupMetadata(groupId)
        if (groupMetadata.joinApprovalMode) {
          return m.reply(`Bot tidak dapat bergabung karena "Setujui anggota baru" aktif`)
        }

        const expiration = _sewa.getSewaExpired(m.chat, sewa)
        if (expiration === 'Permanen') {
          return
        }
        const remainingTime = ms(expiration - Date.now())

        _sewa.addSewaGroup(groupId, '10d', sewa)
      } catch (err) {
        console.error(err)
        m.reply(`Terjadi kesalahan: ${err}`)
      }
      let teks = `   *[ User Sewa ]*
Nomor : ${m.sender.split('@')[0]}
Type : SewaBot 10 Days
Id : -
Harga : ${toRupiah(botsewa.day10)} IDR

https://wa.me/${m.sender.split('@')[0]}`
      let teks1 = `   *[ Sewa Bot ]*
Nomor : ${m.sender.split('@')[0]}
Type : SewaBot 10 Days
Id : -
Harga : ${toRupiah(botsewa.day10)} IDR`
      await Lyrra.sendTeks(owner + '@s.whatsapp.net', teks, null)
      await Lyrra.sendTeks(m.sender, teks1, m)
      minEwallet(m.sender, botsewa.day10)
    }
    break

    case 'sewa15days': {
      if (db.data.users[m.sender].ewallet < botsewa.day15) {
        return m.reply(`❌ *Ewallet tidak cukup!*\n\n💰 *Ewallet kamu:* Rp${toRupiah(db.data.users[m.sender].ewallet)}\n💳 *Harga sewa 15 day:* Rp${toRupiah(botsewa.day15)}\nSilahkan Deposit Terlebih Dahulu.\n\n*Example :*\n${_p}deposit <nominal>`);
      }
      let url = args[0]
      url = url.split('https://chat.whatsapp.com/')[1]
      if (!url) return m.reply(`Link grup tidak valid!`)

      try {
        const groupId = await Lyrra.groupAcceptInvite(url)
        if (_sewa.checkSewaGroup(groupId, sewa)) {
          return m.reply(`Bot sudah disewa oleh grup tersebut!`)
        }

        const groupMetadata = await Lyrra.groupMetadata(groupId)
        if (groupMetadata.joinApprovalMode) {
          return m.reply(`Bot tidak dapat bergabung karena "Setujui anggota baru" aktif`)
        }

        const expiration = _sewa.getSewaExpired(m.chat, sewa)
        if (expiration === 'Permanen') {
          return
        }
        const remainingTime = ms(expiration - Date.now())

        _sewa.addSewaGroup(groupId, '15d', sewa)
      } catch (err) {
        console.error(err)
        m.reply(`Terjadi kesalahan: ${err}`)
      }
      let teks = `   *[ User Sewa ]*
Nomor : ${m.sender.split('@')[0]}
Type : SewaBot 15 Days
Id : -
Harga : ${toRupiah(botsewa.day15)} IDR

https://wa.me/${m.sender.split('@')[0]}`
      let teks1 = `   *[ Sewa Bot ]*
Nomor : ${m.sender.split('@')[0]}
Type : SewaBot 15 Days
Id : -
Harga : ${toRupiah(botsewa.day15)} IDR`
      await Lyrra.sendTeks(owner + '@s.whatsapp.net', teks, null)
      await Lyrra.sendTeks(m.sender, teks1, m)
      minEwallet(m.sender, botsewa.day15)
    }
    break

    case 'sewa30days': {
      if (db.data.users[m.sender].ewallet < botsewa.day30) {
        return m.reply(`❌ *Ewallet tidak cukup!*\n\n💰 *Ewallet kamu:* Rp${toRupiah(db.data.users[m.sender].ewallet)}\n💳 *Harga sewa 30 day:* Rp${toRupiah(botsewa.day30)}\nSilahkan Deposit Terlebih Dahulu.\n\n*Example :*\n${_p}deposit <nominal>`);
      }
      let url = args[0]
      url = url.split('https://chat.whatsapp.com/')[1]
      if (!url) return m.reply(`Link grup tidak valid!`)

      try {
        const groupId = await Lyrra.groupAcceptInvite(url)
        if (_sewa.checkSewaGroup(groupId, sewa)) {
          return m.reply(`Bot sudah disewa oleh grup tersebut!`)
        }

        const groupMetadata = await Lyrra.groupMetadata(groupId)
        if (groupMetadata.joinApprovalMode) {
          return m.reply(`Bot tidak dapat bergabung karena "Setujui anggota baru" aktif`)
        }

        const expiration = _sewa.getSewaExpired(m.chat, sewa)
        if (expiration === 'Permanen') {
          return
        }
        const remainingTime = ms(expiration - Date.now())

        _sewa.addSewaGroup(groupId, '30d', sewa)
      } catch (err) {
        console.error(err)
        m.reply(`Terjadi kesalahan: ${err}`)
      }
      let teks = `   *[ User Sewa ]*
Nomor : ${m.sender.split('@')[0]}
Type : SewaBot 30 Days
Id : -
Harga : ${toRupiah(botsewa.day30)} IDR

https://wa.me/${m.sender.split('@')[0]}`
      let teks1 = `   *[ Sewa Bot ]*
Nomor : ${m.sender.split('@')[0]}
Type : SewaBot 30 Days
Id : -
Harga : ${toRupiah(botsewa.day30)} IDR`
      await Lyrra.sendTeks(owner + '@s.whatsapp.net', teks, null)
      await Lyrra.sendTeks(m.sender, teks1, m)
      minEwallet(m.sender, botsewa.day30)
    }
    break

    case 'sewaunlidays': {
      if (db.data.users[m.sender].ewallet < botsewa.dayunli) {
        return m.reply(`❌ *Ewallet tidak cukup!*\n\n💰 *Ewallet kamu:* Rp${toRupiah(db.data.users[m.sender].ewallet)}\n💳 *Harga sewa unli day:* Rp${toRupiah(botsewa.dayunli)}\nSilahkan Deposit Terlebih Dahulu.\n\n*Example :*\n${_p}deposit <nominal>`);
      }
      if (!text) return m.reply(`Contoh: ${p_c} linkgc`)
      if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) return m.reply('Harus berupa link grup WhatsApp!')
      let result = args[0].split('https://chat.whatsapp.com/')[1]
      await Lyrra.groupAcceptInvite(result)
      let teks = `   *[ User Sewa ]*
Nomor : ${m.sender.split('@')[0]}
Type : SewaBot unli Days
Id : -
Harga : ${toRupiah(botsewa.dayunli)} IDR

https://wa.me/${m.sender.split('@')[0]}`
      await Lyrra.sendTeks(owner + '@s.whatsapp.net', teks, null)
      let teks1 = `   *[ Sewa Bot ]*
Nomor : ${m.sender.split('@')[0]}
Type : SewaBot unli Days
Id : -
Harga : ${toRupiah(botsewa.dayunli)} IDR`
      await Lyrra.sendTeks(m.sender, teks1, m)
      minEwallet(m.sender, botsewa.dayunli)
    }
    break

    case 'chatbot-list':
    case 'list-chatbot':
    case 'list-botchat':
    case 'list-pc':
    case 'pc-list':
    case 'pclist':
    case 'listpc': {
      if (!isOwner) return onlyOwn()

      const storeFilePath = './session/store.json'

      let storeData
      try {
        storeData = JSON.parse(fs.readFileSync(storeFilePath, 'utf-8'))
      } catch (error) {
        return Lyrra.sendTeks(m.chat, 'Gagal membaca data store.json', m)
      }

      const privateChats = (storeData.chats || [])
        .filter(chat => chat.id.endsWith('@s.whatsapp.net'))
        .map(chat => chat.id)

      let teks = `${monospace("LIST PRIVATE CHAT")}\nTotal: ${privateChats.length}\n\n`
      for (let chatId of privateChats) {
        const nama = storeData.contacts[chatId]?.name || 'Tidak Diketahui'
        teks += `Nama: ${nama}\nUser: @${chatId.split('@')[0]}\nChat: https://wa.me/${chatId.split('@')[0]}\n\n`
      }

      if (privateChats.length === 0) teks += `Tidak ada private chat yang terdeteksi`

      await Lyrra.sendTeks(m.chat, teks, m, {
        mentions: privateChats.map(chatId => chatId)
      })
    }
    break

    case 'translate':
    case 'tr': {
      try {
        if (!text) {
          return m.reply(
            `Kirim atau kutip pesan yang mau di-translate\nContoh: ${p_c}tr en apa kabar?\n\nen = kode bahasa\nInfo lebih: .listbahasa`
          );
        }
        const targetLang = args[0];
        if (!targetLang) {
          return m.reply('Tentukan kode bahasanya, contoh: en, id, jp, dll.');
        }
        const teks = m.quoted ?
          m.quoted.text :
          text.split(' ').slice(1).join(' ');
        if (!teks) {
          return m.reply('Teks yang mau di-translate tidak ditemukan');
        }
        const lines = teks.split('\n').map(line => line.trim()).filter(line => line.length > 0);
        const translations = await Promise.all(
          lines.map(async (line) => {
            const encodedText = Enc(line);
            const apiUrl = `https://api.siputzx.my.id/api/tools/translate?text=${encodedText}&source=auto&target=${targetLang}`;
            const response = await fetchJson(apiUrl);
            return response && response.translatedText ? response.translatedText.trim() : '[Gagal diterjemahkan]';
          })
        );
        const translatedText = translations.join('\n');
        m.reply(translatedText);
      } catch (err) {
        console.error(err);
        m.reply('Terjadi kesalahan: ' + err);
      }
    }
    break

    case 'bahasalist':
    case 'bahasa-list':
    case 'langlist':
    case 'listbahasa': {
      const tk = `List bahasa yang tersedia:

    af  •>  Afrikaans
    sq  •>  Albanian
    am  •>  Amharic
    ar  •>  Arabic
    hy  •>  Armenian
    az  •>  Azerbaijani
    eu  •>  Basque
    be  •>  Belarusian
    bn  •>  Bengali
    bs  •>  Bosnian
    bg  •>  Bulgarian
    ca  •>  Catalan
    ceb  •>  Cebuano
    ny  •>  Chichewa
    zh-CN  •>  Chinese (Simplified)
    zh-TW  •>  Chinese (Traditional)
    co  •>  Corsican
    hr  •>  Croatian
    cs  •>  Czech
    da  •>  Danish
    nl  •>  Dutch
    en  •>  English
    eo  •>  Esperanto
    et  •>  Estonian
    tl  •>  Filipino
    fi  •>  Finnish
    fr  •>  French
    fy  •>  Frisian
    gl  •>  Galician
    ka  •>  Georgian
    de  •>  German
    el  •>  Greek
    gu  •>  Gujarati
    ht  •>  Haitian Creole
    ha  •>  Hausa
    haw  •>  Hawaiian
    he  •>  Hebrew
    iw  •>  Hebrew
    hi  •>  Hindi
    hmn  •>  Hmong
    hu  •>  Hungarian
    is  •>  Icelandic
    ig  •>  Igbo
    id  •>  Indonesian
    ga  •>  Irish
    it  •>  Italian
    ja  •>  Japanese
    jw  •>  Javanese
    kn  •>  Kannada
    kk  •>  Kazakh
    km  •>  Khmer
    ko  •>  Korean
    la  •>  Latin
    ms  •>  Malay
    my  •>  Myanmar (Burmese)
    ne  •>  Nepali
    no  •>  Norwegian
    pt  •>  Portuguese
    ro  •>  Romanian
    ru  •>  Russian
    sr  •>  Serbian
    sk  •>  Slovak
    so  •>  Somali
    es  •>  Spanish
    su  •>  Sundanese
    sw  •>  Swahili
    sv  •>  Swedish
    th  •>  Thai
    tr  •>  Turkish
    uk  •>  Ukrainian
    uz  •>  Uzbek
    vi  •>  Vietnamese`
      lyreply(tk)
    }
    break

    case 'toanime':
case 'toreal': {
  try {
    if (!/image/.test(mime)) {
      return m.reply(`Kirim/kutip gambar dengan caption ${p_c}`)
    }
    lyreact()
    
    const style = command === 'toanime' ? 'AnimageModel' : 'RealisticModel'
    const media = await Lyrra.downloadAndSaveMediaMessage(quoted)
    const imageUrl = await CatBox(media)

    const apiUrl = `https://fastrestapis.fasturl.cloud/imgedit/aiimage?prompt=Anime&reffImage=${encodeURIComponent(imageUrl)}&style=${style}&width=1024&height=1024&creativity=0.5`
    
    await Lyrra.sendMessage(m.chat, { image: { url: apiUrl } }, { quoted: m })
  } catch (err) {
    console.error('Terjadi kesalahan:', err)
    m.reply('Terjadi kesalahan')
  } finally {
    if (media) {
      fs.promises.unlink(media).catch(() => {})
    }
  }
}
break

    case 'ytkomen': {
      if (!text) return m.reply(`Contoh: ${p_c} Lyrraaa`)
      lyreact()
      try {
        let avatar
        try {
          avatar = await Lyrra.profilePictureUrl(m.sender, 'image')
        } catch {
          avatar = 'https://files.catbox.moe/nwvkbt.png'
        }
        let buffer = await getBuffer(`https://some-random-api.com/canvas/misc/youtube-comment?comment=${Enc(text)}&avatar=${Enc(avatar)}&username=${pushname}`)
        await Lyrra.sendMessage(m.chat, {
          image: buffer,
          caption: global.wm
        }, {
          quoted: m
        })
      } catch (err) {
        m.reply('Terjadi Kesalahan: ' + err.toString())
      }
    }
    break

    case 'carbon': {
      lyreact()
      if (m.quoted) {
        tulisan = m.quoted.text
      } else {
        tulisan = text
      }
      if (!tulisan) return m.reply(`Contoh: ${p_c} Lyrraaa`)
      try {
        let buffer = await CarbonifyV1(tulisan)
        await Lyrra.sendMessage(m.chat, {
          image: buffer,
          caption: global.wm
        }, {
          quoted: m
        })
      } catch (error) {
        try {
          let buffer = await CarbonifyV2(tulisan)
          await Lyrra.sendMessage(m.chat, {
            image: buffer,
            caption: global.wm
          }, {
            quoted: m
          })
        } catch (err) {
          m.reply('Terjadi kesalahan: ' + err.toString())
        }
      }
    }
    break

    case 'hitung': {
      if (!text) return m.reply(`Contoh: ${p_c} teksnya`)
      const paragraf = text.split('\n\n').filter(par => par.trim() !== '');
      const jumlahParagraf = paragraf.length;
      const paragrafPertama = paragraf[0] || 'Tidak ada paragraf';
      const paragrafTerakhir = paragraf[jumlahParagraf - 1] || 'Tidak ada paragraf';
      const jumlahLine = text.split('\n').filter(line => line.trim() !== '').length;
      const jumlahSpasi = (text.match(/ /g) || []).length;
      const jumlahHurufBesar = (text.match(/[A-Z]/g) || []).length;
      const jumlahHurufKecil = (text.match(/[a-z]/g) || []).length;
      const jumlahAngka = (text.match(/[0-9]/g) || []).length;
      const jumlahSymbol = (text.match(/[!@#$%^&*(),.?:{}|<>]/g) || []).length
      let tekz = `*INFO/JUMLAH TEKS*\nTeks: ${toRupiah(text.length)}\nLine: ${toRupiah(jumlahLine)}\nParagraf: ${toRupiah(jumlahParagraf)}\nSpasi: ${toRupiah(jumlahSpasi)}\nHuruf besar: ${toRupiah(jumlahHurufBesar)}\nHuruf kecil: ${toRupiah(jumlahHurufKecil)}\n\n*ANGKA & SYMBOL*\nAngka: ${toRupiah(jumlahAngka)}\nSymbol: ${toRupiah(jumlahSymbol)}\n\n*PARAGRAF P&T*\n*Paragraf pertama:* ${paragrafPertama}\n\n*Paragraf terakhir:* ${paragrafTerakhir}\n\nHanya fitur gabut :v`;
      m.reply(tekz)
    }
    break

    case 'whatmusic': {
      if (!/audio/.test(mime) && !/ogg/.test(mime)) return m.reply('Harus berupa file audio!')
      let media = await Lyrra.downloadAndSaveMediaMessage(quoted)
      lyreact()

      try {
        const {
          whatmusic
        } = require('@leoo-vanth/zarv-vz')
        let result = await whatmusic(media)

        let text = `*${result.title}* - *${result.artists}*
• Album: ${result.album}
• Rilis: ${result.release_date}
• Label: ${result.label}
• Durasi: ${(result.duration / 1000).toFixed(2)} detik
• Spotify: ${result.spotify ? result.spotify.url : 'Tidak ditemukan'}
• YouTube: ${result.youtube ? result.youtube : 'Tidak ditemukan'}`

        m.reply(text)
      } catch (err) {
        console.error(err)
        m.reply('Terjadi kesalahan: ' + err)
      }

      await fs.unlinkSync(media)
    }
    break
    
    case 'hitamkan':
case 'hytamkan':
case 'hytam': {
    let q = m.quoted ? m.quoted : m
    let mime = (q.msg || q).mimetype || ""
    let defaultPrompt = "Ubah kulit karakter pada gambar tersebut dengan warna hitam kecoklatan yang alami dan natural. Pastikan perubahan warna hanya berlaku pada kulit karakter saja, tanpa mengubah warna mata, hidung, bibir, atau fitur wajah lainnya. Mata dan hidung harus tetap terlihat jelas dan tidak boleh hilang atau terdistorsi. Hasil akhir harus terlihat realistis dan sesuai dengan karakter aslinya."
    
    if (!mime) {
        m.reply("Tidak ada gambar yang direply, membuat gambar default...")
        mime = "image/png"
        q = { msg: { mimetype: mime }, download: async () => fs.readFileSync("default_image.png") }
    }
    
    if (!/image\/(jpe?g|png)/.test(mime)) return m.reply(`Format ${mime} tidak didukung! Hanya jpeg/jpg/png`)
    
    let promptText = text || defaultPrompt
    lyreact()
    
    try {
        let imgData = await q.download()
        let genAI = new GoogleGenerativeAI(geminiToken)
        const base64Image = imgData.toString("base64")
        
        const contents = [
            { text: promptText },
            {
                inlineData: {
                    mimeType: mime,
                    data: base64Image
                }
            }
        ]
        
        const model = genAI.getGenerativeModel({
            model: "gemini-2.0-flash-exp-image-generation",
            generationConfig: {
                responseModalities: ["Text", "Image"]
            },
        })

        const response = await model.generateContent(contents)
        let resultImage
        let resultText = ""
        
        for (const part of response.response.candidates[0].content.parts) {
            if (part.text) {
                resultText += part.text
            } else if (part.inlineData) {
                const imageData = part.inlineData.data
                resultImage = Buffer.from(imageData, "base64")
            }
        }
        
        if (resultImage) {
            const tmpDir = path.join(process.cwd(), "lib")
            if (!fs.existsSync(tmpDir)) {
                fs.mkdirSync(tmpDir, { recursive: true })
            }
            
            let tempPath = path.join(tmpDir, `gemini_${Date.now()}.png`)
            fs.writeFileSync(tempPath, resultImage)
            
            await Lyrra.sendMessage(m.chat, {
                image: { url: tempPath },
                caption: wm
            }, { quoted: m })
            
            setTimeout(() => {
                try {
                    fs.unlinkSync(tempPath)
                } catch (err) {
                    throw Error('Error')
                }
            }, 30000)
        }
    } catch (err) {
        console.error(err.message)
        m.reply('Gagal mendeteksi gambar')
    }
}
break

case 'hijabkan':
case 'tohijab': {
    let q = m.quoted ? m.quoted : m
    let mime = (q.msg || q).mimetype || ""
    let defaultPrompt = "Desain ulang karakter pada gambar tersebut dengan menambahkan hijab warna putih yang sesuai dengan gaya hijab orang Indonesia. Pastikan hijab tersebut menutupi seluruh rambut karakter, sehingga tidak terlihat sama sekali. Hijab harus dirancang dengan cara yang natural dan realistis, sehingga terlihat seperti hijab yang dikenakan dalam kehidupan sehari-hari. Perhatikan detail dan tekstur hijab agar terlihat autentik dan sesuai dengan karakter aslinya."
    
    if (!mime) {
        m.reply("Tidak ada gambar yang direply, membuat gambar default...")
        mime = "image/png"
        q = { msg: { mimetype: mime }, download: async () => fs.readFileSync("default_image.png") }
    }
    
    if (!/image\/(jpe?g|png)/.test(mime)) return m.reply(`Format ${mime} tidak didukung! Hanya jpeg/jpg/png`)
    
    let promptText = text || defaultPrompt
    lyreact()
    
    try {
        let imgData = await q.download()
        let genAI = new GoogleGenerativeAI(geminiToken)
        const base64Image = imgData.toString("base64")
        
        const contents = [
            { text: promptText },
            {
                inlineData: {
                    mimeType: mime,
                    data: base64Image
                }
            }
        ]
        
        const model = genAI.getGenerativeModel({
            model: "gemini-2.0-flash-exp-image-generation",
            generationConfig: {
                responseModalities: ["Text", "Image"]
            },
        })
        
        const response = await model.generateContent(contents)
        let resultImage
        let resultText = ""
        
        for (const part of response.response.candidates[0].content.parts) {
            if (part.text) {
                resultText += part.text
            } else if (part.inlineData) {
                const imageData = part.inlineData.data
                resultImage = Buffer.from(imageData, "base64")
            }
        }
        
        if (resultImage) {
            const tmpDir = path.join(process.cwd(), "x-system")
            if (!fs.existsSync(tmpDir)) {
                fs.mkdirSync(tmpDir, { recursive: true })
            }
            
            let tempPath = path.join(tmpDir, `gemini_${Date.now()}.png`)
            fs.writeFileSync(tempPath, resultImage)
            
            await Lyrra.sendMessage(m.chat, {
                image: { url: tempPath },
                caption: wm
            }, { quoted: m })
            
            setTimeout(() => {
                try {
                    fs.unlinkSync(tempPath)
                } catch (err) {
                    throw Error('Error')
                }
            }, 30000)
        }
    } catch (err) {
        console.error(err.message)
        m.reply('Gagal mendeteksi gambar')
    }
}
break

case 'botakan':
case 'botakin': {
 let q = m.quoted ? m.quoted : m
 let mime = (q.msg || q).mimetype || ""
 let defaultPrompt = "Desain ulang karakter pada gambar tersebut dengan membuat rambut menjadi botak dan tidak memiliki rambut. Pastikan botak tersebut menghilangkan seluruh rambut karakter, sehingga tidak terlihat sama sekali. Botak harus dirancang dengan cara yang natural dan realistis, sehingga terlihat seperti botak yang dikenakan dalam kehidupan sehari-hari. Perhatikan detail dan tekstur botak agar terlihat autentik dan sesuai dengan karakter aslinya."
 
 if (!mime) {
 m.reply("Tidak ada gambar yang direply, membuat gambar default...")
 mime = "image/png"
 q = { msg: { mimetype: mime }, download: async () => fs.readFileSync("default_image.png") }
 }
 
 if (!/image\/(jpe?g|png)/.test(mime)) return m.reply(`Format ${mime} tidak didukung! Hanya jpeg/jpg/png`)
 
 let promptText = text || defaultPrompt
 lyreact()
 
 try {
 let imgData = await q.download()
 let genAI = new GoogleGenerativeAI(geminiToken)
 const base64Image = imgData.toString("base64")
 
 const contents = [
 { text: promptText },
 {
 inlineData: {
 mimeType: mime,
 data: base64Image
 }
 }
 ]
 
 const model = genAI.getGenerativeModel({
 model: "gemini-2.0-flash-exp-image-generation",
 generationConfig: {
 responseModalities: ["Text", "Image"]
 },
 })
 
 const response = await model.generateContent(contents)
 let resultImage
 let resultText = ""
 
 for (const part of response.response.candidates[0].content.parts) {
 if (part.text) {
 resultText += part.text
 } else if (part.inlineData) {
 const imageData = part.inlineData.data
 resultImage = Buffer.from(imageData, "base64")
 }
 }
 
 if (resultImage) {
 const tmpDir = path.join(process.cwd(), "x-system")
 if (!fs.existsSync(tmpDir)) {
 fs.mkdirSync(tmpDir, { recursive: true })
 }
 
 let tempPath = path.join(tmpDir, `gemini_${Date.now()}.png`)
 fs.writeFileSync(tempPath, resultImage)
 
 await Lyrra.sendMessage(m.chat, {
 image: { url: tempPath },
 caption: wm
 }, { quoted: m })
 
 setTimeout(() => {
 try {
 fs.unlinkSync(tempPath)
 } catch (err) {
 throw Error('Error')
 }
 }, 30000)
 }
 } catch (err) {
 console.error(err.message)
 m.reply('Gagal mendeteksi gambar')
 }
}
break

    case 'stcrandom': {
      try {
        if (!text) return m.reply(`Contoh: ${p_c} dino`)
        const res1 = await fetchJson(`https://api.agatz.xyz/api/sticker?message=${Enc(text)}`)
        const sticker1Url = res1.data.sticker_url[Math.floor(Math.random() * res1.data.sticker_url.length)]
        const buffer = await fetch(sticker1Url).then(res => res.buffer())
        await Lyrra.sendImageAsSticker(m.chat, buffer, m, {
          packname: packname,
          author: author
        })
      } catch (err) {
        try {
          const res2 = await fetchJson(`https://itzpire.com/search/sticker?query=${Enc(text)}`)
          const sticker2Url = res2.data.sticker_url[Math.floor(Math.random() * res2.data.sticker_url.length)]
          const buffer = await fetch(sticker2Url).then(res => res.buffer())
          await Lyrra.sendImageAsSticker(m.chat, buffer, m, {
            packname: packname,
            author: author
          })
        } catch (err) {
          m.reply('Terjadi kesalahan: ' + err)
        }
      }
    }
    break

    // ==========================

    default:

      if (global.help.includes(command)) {
        for (const handler of global.handlers) {
          if (handler.command && handler.command.includes(command)) {
            if (handler.owner && !isOwner) return onlyOwn()
            if (handler.premium && !isPremium) return onlyPrem()
            if (handler.group && !m.isGroup) return onlyGrup()
            if (handler.botAdmin && !isBotAdmins) return onlyBotAdmin()
            if (handler.admin && !isAdmins) return onlyAdmin()
            if (handler.private && m.isGroup) return onlyPrivat()
            let datahandler = {
              isCmd,
              prefix,
              botNumber,
              isOwner,
              isAdmins,
              isBotAdmins,
              isPremium,
              isReseller,
              isGc,
              isPc,
              body,
              text,
              args,
              command,
              Lyrra,
              quoted,
              chatUpdate
            }
            await handler(m, datahandler)
            break
          }
        }
      }

      if (setting.autostiker) {
        if (m.isGroup && m.sender.startsWith(owner)) {
          let user = global.db.data.chats[m.chat]
          let vlinhc = fs.readFileSync('./lib-signal/image/sendChats.png')
          if (new Date() - user.own < 300000) return
          user.own = new Date * 1
          let encmedia = await Lyrra.sendImageAsSticker(m.chat, vlinhc, m, {
            packname: packname,
            author: author
          });
        }

        if (body.match('@' + owner)) {
          let tagownn = fs.readFileSync('./lib-signal/image/sendTags.png')
          await Lyrra.sendImageAsSticker(m.chat, tagownn, m, {
            packname: packname,
            author: author
          });
        }

      }

      if (m.isGroup && budy.toLowerCase().match(`assalamualaikum|asalamualaikum|assalamu'alaikum|asalamu'alaikum`)) {
        await Lyrra.sendMessage(from, {
          react: {
            text: "😇",
            key: m.key
          }
        })
        m.reply('Waalaikumsalam warahmatullahi wabarokatuh')
      }

      if ((budy) && [`${db.data.users[m.sender].otp}`].includes(budy) && !m.fromMe) {
        if (db.data.users[m.sender].daftar) return m.reply(`Kamu sudah terdaftar!`)
        const srlnye = createSerial(5)
        var angka = await randomNomor(200, 8000000)
        const abc = `*SUCCESSFULLY REGISTERED!*\n\n${monospace("INFORMASI  AKUN")}\nNama: Player-${angka}\nID: ${m.sender.split('@')[0]}\nSerial: ${srlnye}`
        Lyrra.sendMessage(m.chat, {
          text: abc,
          footer: null,
          buttons: [{
            buttonId: `${_p}menu-v`,
            buttonText: {
              displayText: 'Menu'
            },
            type: 1
          }],
          headerType: 1,
          viewOnce: true
        }, {
          quoted: m
        })
        db.data.users[m.sender].daftar = true
        db.data.users[m.sender].nama = `Player-${angka}`
        db.data.users[m.sender].otp = `${db.data.users[m.sender].otp}`
        db.data.users[m.sender].email = `${db.data.users[m.sender].email}`
        db.data.users[m.sender].serial = `${srlnye}`
        addRegisteredUser(m.sender, `Player-${angka}`, srlnye)
      }

      if (m.chat.endsWith('@s.whatsapp.net')) {
        this.menfes = this.menfes ? this.menfes : {}
        let room = Object.values(this.menfes).find(room => [room.a, room.b].includes(m.sender) && room.state === 'CHATTING')
        if (room) {
          if (/^.*(next|leave|start)/.test(budy)) return
          if (['.next', '.leave', '.stop', '.start', 'Cari Partner', 'Keluar', 'Lanjut', 'Stop'].includes(budy)) return
          find = Object.values(this.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender))
          let other = find.a == m.sender ? find.b : find.a
          await m.copyNForward(other, true, m.quoted && m.quoted.fromMe ? {
            contextInfo: {
              ...m.msg.contextInfo,
              participant: other
            }
          } : {})
        }
      }

      if (m.chat.endsWith('@s.whatsapp.net')) {
        this.anonymous = this.anonymous ? this.anonymous : {}
        let room = Object.values(this.anonymous).find(room => [room.a, room.b].includes(m.sender) && room.state === 'CHATTING')
        if (room) {
          if (/^.*(start|leave|next)/.test(m.text)) return
          if (['.start', '.leave', '.next', '.mulai', '.keluar', '.lanjut', '.skip'].includes(m.text)) return
          let other = [room.a, room.b].find(user => user !== m.sender)
          m.copyNForward(other, true, m.quoted && m.quoted.fromMe ? {
            contextInfo: {
              ...m.msg.contextInfo,
              forwardingScore: 0,
              isForwarded: true,
              participant: other
            }
          } : {})
        }
        return !0
      }
    }

  } catch (err) {
console.log(util.format(err))
  }
}

let file = require.resolve(__filename)
fs.watchFile(file, () => {
  fs.unwatchFile(file)
  console.log(`Update ${__filename}`)
  delete require.cache[file]
  require(file)
})